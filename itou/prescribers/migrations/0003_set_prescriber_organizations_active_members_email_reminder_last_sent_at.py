# Generated by Django 5.0.6 on 2024-06-10 15:31

import datetime
import math
import time

from dateutil.relativedelta import relativedelta
from django.db import migrations


def set_active_members_email_reminder_last_sent_at(apps, schema_editor):
    """
    Set active_members_email_reminder_last_sent_at for prescriber organizations created more than 3 months ago.
    Doing so to avoid processing a single and huge batch of most of the pre-existing prescriber organizations during
    the first run of the send_check_authorized_members_email management command.
    """
    START_DATE = datetime.date.today() - relativedelta(months=3)
    PrescriberOrganization = apps.get_model("prescribers", "PrescriberOrganization")

    prescriber_organizations_qs = (
        PrescriberOrganization.objects.filter(
            active_members_email_reminder_last_sent_at__isnull=True,
            created_at__date__lt=START_DATE,
        )
        .only("active_members_email_reminder_last_sent_at", "created_at")
        .order_by("created_at")
    )
    batch_size = max([math.ceil(prescriber_organizations_qs.count() / 90), 50])
    batch_start_date = START_DATE

    prescriber_organizations_processed = 0
    start = time.perf_counter()
    while prescriber_organizations_batch := prescriber_organizations_qs[:batch_size]:
        prescriber_organizations = []
        for prescriber_organization in prescriber_organizations_batch:
            prescriber_organization.active_members_email_reminder_last_sent_at = datetime.datetime.combine(
                batch_start_date,
                prescriber_organization.created_at.timetz(),
            )
            prescriber_organizations.append(prescriber_organization)
        prescriber_organizations_processed += PrescriberOrganization.objects.bulk_update(
            prescriber_organizations, {"active_members_email_reminder_last_sent_at"}
        )
        batch_start_date += datetime.timedelta(days=1)
        print(
            f"{prescriber_organizations_processed} prescriber organizations "
            f"migrated in {time.perf_counter() - start:.2f} sec"
        )


class Migration(migrations.Migration):
    dependencies = [
        ("prescribers", "0002_prescriberorganization_active_members_email_reminder_last_sent_at"),
    ]

    operations = [
        migrations.RunPython(set_active_members_email_reminder_last_sent_at, migrations.RunPython.noop, elidable=True),
    ]
