import re
import textwrap

from django.conf import settings
from django.core import mail
from django.template.loader import get_template

from itou.utils import constants as global_constants
from itou.utils.enums_context_processors import expose_enums


def remove_extra_line_breaks(text):
    """
    Replaces multiple line breaks with just one.

    Useful to suppress empty line breaks generated by Django's template tags
    in emails text templates.
    """
    return re.sub(r"\n{3,}", "\n\n", text)


def get_email_text_template(template, context):
    context.update(
        {
            "itou_assistance_url": global_constants.ITOU_ASSISTANCE_URL,
            "itou_doc_url": global_constants.ITOU_DOC_URL,
            "itou_email_prolongation": global_constants.ITOU_EMAIL_PROLONGATION,
            "itou_environment": settings.ITOU_ENVIRONMENT,
            "itou_fqdn": settings.ITOU_FQDN,
            "itou_protocol": settings.ITOU_PROTOCOL,
            "itou_community_url": global_constants.ITOU_COMMUNITY_URL,
        }
    )
    return remove_extra_line_breaks(get_template(template).render(context).strip())


def get_email_message(to, context, subject, body, from_email=settings.DEFAULT_FROM_EMAIL, bcc=None):
    subject_prefix = "[DEMO] " if settings.ITOU_ENVIRONMENT == "DEMO" else ""
    # Mailjet max subject length is 255
    subject = textwrap.shorten(
        subject_prefix + get_email_text_template(subject, context), width=250, placeholder="..."
    )
    # Add enums in emails
    context.update(expose_enums())
    return mail.EmailMessage(
        from_email=from_email,
        to=to,
        bcc=bcc,
        subject=subject,
        body=get_email_text_template(body, context),
    )


def send_email_messages(email_messages):
    with mail.get_connection() as connection:
        connection.send_messages(email_messages)


def redact_email_address(email):
    def redact_part(part):
        return part[0] + "*" * (len(part) - 1) if part else ""

    if not email:
        return ""
    if "@" not in email:
        return redact_part(email)
    user_part, domain_part = email.rsplit("@", 1)
    redacted_user = redact_part(user_part)
    if "." in domain_part:
        redacted_domain = ".".join([redact_part(part) for part in domain_part.rsplit(".", 1)])
    else:
        redacted_domain = redact_part(domain_part)
    return f"{redacted_user}@{redacted_domain}"
