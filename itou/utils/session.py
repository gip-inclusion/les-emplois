import json
import logging
import uuid

import itou.utils.json
from itou.utils import python


logger = logging.Logger(__name__)


class SessionNamespaceException(Exception):
    pass


class SessionNamespaceDoesNotExist(SessionNamespaceException):
    pass


class SessionNamespaceInvalidKind(SessionNamespaceException):
    pass


class SessionNamespace:
    """Class to facilitate the usage of namespaces inside the session."""

    NOT_SET = python.Sentinel()

    def __init__(self, session, expected_session_kind: str, namespace):
        self._session = session
        self.name = str(namespace)
        key = self.session_kind_key(self.name)
        try:
            # Prevents session pollution by another view: the name of the
            # session is often passed in URLs, revealing it to users. Malicious
            # users could try making a view use session namespace data from
            # another view by feeding it a namespace generated by another view.
            loaded_session_kind = self._session[key]
        except KeyError as e:
            logger.warning(f"Failed to load session, missing {key}.")
            raise SessionNamespaceDoesNotExist(key) from e
        else:
            if loaded_session_kind != expected_session_kind:
                logger.warning(f"Loading a {loaded_session_kind} while expecting a {expected_session_kind}.")
                raise SessionNamespaceInvalidKind(key)

    def __repr__(self):
        return f"<SessionNamespace({self._session[self.name]!r})>"

    @staticmethod
    def session_kind_key(name):
        return f"{name}_session_kind"

    def __contains__(self, item):
        return item in self._session[self.name]

    def get(self, key, default=NOT_SET):
        return self._session[self.name].get(key, default)

    def set(self, key, value):
        self._session[self.name][key] = value
        self._session.modified = True

    def update(self, data):
        self._session[self.name].update(data)
        self._session.modified = True

    def delete(self):
        del self._session[self.name]
        del self._session[self.session_kind_key(self.name)]
        self._session.modified = True

    def save(self):
        self._session.save()

    def as_dict(self):
        return dict(self._session[self.name])

    @classmethod
    def create_uuid_namespace(cls, session, session_kind: str, data):
        name = str(uuid.uuid4())
        session[name] = data
        session[cls.session_kind_key(name)] = session_kind
        return cls(session, session_kind, name)


class JSONSerializer:
    """Class to be used in SESSION_SERIALIZER, so we can serialize data using our custom JSON encoder/decoder."""

    def dumps(self, obj):
        # Using latin-1 like django.contrib.sessions.serializers.JSONSerializer
        return json.dumps(obj, cls=itou.utils.json.JSONEncoder).encode("latin-1")

    def loads(self, data):
        # Using latin-1 like django.contrib.sessions.serializers.JSONSerializer
        return json.loads(data.decode("latin-1"), cls=itou.utils.json.JSONDecoder)
