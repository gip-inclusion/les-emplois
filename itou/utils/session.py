import json
import logging
import uuid

from django.http import Http404

import itou.utils.json
from itou.utils import python


logger = logging.Logger(__name__)


class SessionNamespace:
    """Class to facilitate the usage of namespaces inside the session."""

    NOT_SET = python.Sentinel()

    def __init__(self, session, expected_session_kind: str, namespace):
        self._session = session
        self.expected_session_kind = expected_session_kind
        self.name = str(namespace)
        self.kind_verified = False

    def __repr__(self):
        return f"<SessionNamespace({self._session[self.name]!r})>"

    @property
    def session_kind_key(self):
        return f"{self.name}_session_kind"

    def verify_kind(self):
        """\
        Prevents session pollution by another view.

        The name of the session is often passed in the URL, revealing it to
        users. Malicious users could try making a view use session namespace
        data from another view by feeding it a namespace generated by another
        view.
        """
        if not self.kind_verified:
            try:
                session_kind = self._session[self.session_kind_key]
            except KeyError:
                logger.warning(f"Failed to load session, missing {self.session_kind_key}.")
                raise Http404
            else:
                if session_kind != self.expected_session_kind:
                    logger.warning(f"Loading a {session_kind} while expecting a {self.expected_session_kind}.")
                    raise Http404
                self.kind_verified = True

    def __contains__(self, item):
        self.verify_kind()
        return item in self._session[self.name]

    def init(self, session_kind: str, data: dict):
        self._session[self.name] = data
        self._session[self.session_kind_key] = session_kind
        self._session.modified = True
        self.kind_verified = True

    def get(self, key, default=NOT_SET):
        self.verify_kind()
        return self._session[self.name].get(key, default)

    def set(self, key, value):
        self.verify_kind()
        self._session[self.name][key] = value
        self._session.modified = True

    def update(self, data):
        self.verify_kind()
        self._session[self.name].update(data)
        self._session.modified = True

    def exists(self):
        self.verify_kind()
        return self.name in self._session

    def delete(self):
        if not self.exists():
            return
        self.verify_kind()

        del self._session[self.name]
        del self._session[self.session_kind_key]
        self._session.modified = True

    def save(self):
        self._session.save()

    def as_dict(self):
        self.verify_kind()
        return dict(self._session[self.name])

    @classmethod
    def create_uuid_namespace(cls, session, session_kind: str, data=None):
        s = cls(session, session_kind, namespace=str(uuid.uuid4()))
        if data is None:
            data = {}
        s.init(session_kind, data)
        return s


class JSONSerializer:
    """Class to be used in SESSION_SERIALIZER, so we can serialize data using our custom JSON encoder/decoder."""

    def dumps(self, obj):
        # Using latin-1 like django.contrib.sessions.serializers.JSONSerializer
        return json.dumps(obj, cls=itou.utils.json.JSONEncoder).encode("latin-1")

    def loads(self, data):
        # Using latin-1 like django.contrib.sessions.serializers.JSONSerializer
        return json.loads(data.decode("latin-1"), cls=itou.utils.json.JSONDecoder)
