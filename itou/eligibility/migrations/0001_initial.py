# Generated by Django 5.2.4 on 2025-07-19 04:56

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import itou.utils.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("companies", "0001_initial"),
        ("prescribers", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AdministrativeCriteria",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "level",
                    models.CharField(
                        choices=[("1", "Niveau 1"), ("2", "Niveau 2")],
                        default="1",
                        max_length=1,
                        verbose_name="niveau",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="nom")),
                ("desc", models.CharField(blank=True, max_length=255, verbose_name="description")),
                ("written_proof", models.CharField(blank=True, max_length=255, verbose_name="justificatif")),
                (
                    "written_proof_url",
                    models.URLField(blank=True, verbose_name="lien d'aide à propos du justificatif"),
                ),
                ("ui_rank", models.PositiveSmallIntegerField(default=32767)),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                (
                    "written_proof_validity",
                    models.CharField(
                        blank=True, default="", max_length=255, verbose_name="durée de validité du justificatif"
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("RSA", "Bénéficiaire du RSA"),
                            ("AAH", "Allocation aux adultes handicapés"),
                            ("ASS", "Allocataire ASS"),
                            ("CAP_BEP", "Niveau d'étude 3 (CAP, BEP) ou infra"),
                            ("SENIOR", "Senior (+ de 50 ans)"),
                            ("JEUNE", "Jeune (- de 26 ans)"),
                            ("ASE", "Aide sociale à l'enfance"),
                            ("DELD", "Demandeur d'emploi de longue durée (12-24 mois)"),
                            ("DETLD", "Demandeur d'emploi de très longue durée (+24 mois)"),
                            ("TH", "Travailleur handicapé"),
                            ("PI", "Parent isolé"),
                            ("PSH_PR", "Personne sans hébergement ou hébergée ou ayant un parcours de rue"),
                            (
                                "REF_DA",
                                "Réfugié statutaire, bénéficiaire d'une protection temporaire, protégé subsidiaire ou "
                                "demandeur d'asile",
                            ),
                            ("ZRR", "Résident ZRR"),
                            ("QPV", "Résident QPV"),
                            ("DETENTION_MJ", "Sortant de détention ou personne placée sous main de justice"),
                            ("FLE", "Maîtrise de la langue française"),
                            ("PM", "Problème de mobilité"),
                            ("JEUNE_SQ", "Jeune de moins de 26 ans sans qualification (niveau 4 maximum)"),
                            ("MINIMA", "Bénéficiaire des minima sociaux"),
                            ("DELD_12", "Demandeur d'emploi inscrit depuis moins de 12 mois"),
                            ("DE_45", "Demandeur d’emploi de 45 ans et plus"),
                            ("RECONVERSION", "Personne en reconversion professionnelle contrainte"),
                            ("SIAE_CUI", "Personne bénéficiant ou sortant d’un dispositif d’insertion"),
                            ("RS_PS_DA", "Demandeur d'asile"),
                            ("AUTRE_MINIMA", "Autre minima social"),
                            ("FT", "Personne inscrite à France Travail"),
                            ("SANS_TRAVAIL_12", "Personne éloignée du marché du travail (> 1 an)"),
                        ],
                        default="",
                        verbose_name="type",
                    ),
                ),
            ],
            options={
                "verbose_name": "critère administratif IAE",
                "verbose_name_plural": "critères administratifs IAE",
                "ordering": ["level", "ui_rank"],
            },
        ),
        migrations.CreateModel(
            name="EligibilityDiagnosis",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "author_kind",
                    models.CharField(
                        choices=[("prescriber", "Prescripteur habilité"), ("employer", "Employeur"), ("geiq", "GEIQ")],
                        default="prescriber",
                        max_length=10,
                        verbose_name="type de l'auteur",
                    ),
                ),
                (
                    "author_siae",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"kind__in": ["AI", "ACI", "EI", "EITI", "ETTI"]},
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="companies.company",
                        verbose_name="SIAE de l'auteur",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now, verbose_name="date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, db_index=True, verbose_name="date de modification"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="auteur",
                    ),
                ),
                (
                    "author_prescriber_organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="prescribers.prescriberorganization",
                        verbose_name="organisation du prescripteur de l'auteur",
                    ),
                ),
                (
                    "job_seeker",
                    models.ForeignKey(
                        limit_choices_to={"kind": "job_seeker"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eligibility_diagnoses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="demandeur d'emploi",
                    ),
                ),
                (
                    "expires_at",
                    models.DateField(
                        db_index=True,
                        help_text="Diagnosic expiré à compter de ce jour",
                        verbose_name="date d'expiration",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "verbose_name": "diagnostic d'éligibilité IAE",
                "verbose_name_plural": "diagnostics d'éligibilité IAE",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("author_kind", "employer"),
                                ("author_prescriber_organization__isnull", True),
                                ("author_siae__isnull", False),
                            ),
                            models.Q(
                                ("author_kind", "prescriber"),
                                ("author_prescriber_organization__isnull", False),
                                ("author_siae__isnull", True),
                            ),
                            _connector="OR",
                        ),
                        name="eligibility_iae_diagnosis_author_kind_coherence",
                        violation_error_message="La structure de l'auteur ne correspond pas à son type",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="SelectedAdministrativeCriteria",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                (
                    "administrative_criteria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="administrative_criteria_through",
                        to="eligibility.administrativecriteria",
                    ),
                ),
                (
                    "eligibility_diagnosis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="selected_administrative_criteria",
                        to="eligibility.eligibilitydiagnosis",
                    ),
                ),
                (
                    "certification_period",
                    itou.utils.models.InclusiveDateRangeField(
                        blank=True, null=True, verbose_name="période de certification"
                    ),
                ),
                (
                    "certified",
                    models.BooleanField(blank=True, null=True, verbose_name="certifié par l'API Particulier"),
                ),
                ("certified_at", models.DateTimeField(blank=True, null=True, verbose_name="certifié le")),
                (
                    "data_returned_by_api",
                    models.JSONField(blank=True, null=True, verbose_name="résultat renvoyé par l'API Particulier"),
                ),
            ],
            options={
                "ordering": ["administrative_criteria"],
                "verbose_name": "critère administratif IAE sélectionné",
                "verbose_name_plural": "critères administratifs IAE sélectionnés",
                "unique_together": {("eligibility_diagnosis", "administrative_criteria")},
            },
        ),
        migrations.AddField(
            model_name="eligibilitydiagnosis",
            name="administrative_criteria",
            field=models.ManyToManyField(
                blank=True,
                through="eligibility.SelectedAdministrativeCriteria",
                to="eligibility.administrativecriteria",
                verbose_name="critères administratifs",
            ),
        ),
        migrations.CreateModel(
            name="GEIQAdministrativeCriteria",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="nom")),
                ("desc", models.CharField(blank=True, max_length=255, verbose_name="description")),
                ("written_proof", models.CharField(blank=True, max_length=255, verbose_name="justificatif")),
                (
                    "written_proof_url",
                    models.URLField(blank=True, verbose_name="lien d'aide à propos du justificatif"),
                ),
                (
                    "written_proof_validity",
                    models.CharField(
                        blank=True, default="", max_length=255, verbose_name="durée de validité du justificatif"
                    ),
                ),
                ("ui_rank", models.PositiveSmallIntegerField(default=32767)),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                (
                    "annex",
                    models.CharField(
                        choices=[
                            ("0", "Aucune annexe associée"),
                            ("1", "Annexe 1"),
                            ("2", "Annexe 2"),
                            ("1+2", "Annexes 1 et 2"),
                        ],
                        default="1",
                        max_length=3,
                        verbose_name="annexe",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        blank=True,
                        choices=[("1", "Niveau 1"), ("2", "Niveau 2")],
                        max_length=1,
                        null=True,
                        verbose_name="niveau",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="eligibility.geiqadministrativecriteria",
                        verbose_name="critère parent",
                    ),
                ),
                ("slug", models.SlugField(blank=True, max_length=100, null=True, verbose_name="référence courte")),
                ("api_code", models.CharField(verbose_name="code API")),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("RSA", "Bénéficiaire du RSA"),
                            ("AAH", "Allocation aux adultes handicapés"),
                            ("ASS", "Allocataire ASS"),
                            ("CAP_BEP", "Niveau d'étude 3 (CAP, BEP) ou infra"),
                            ("SENIOR", "Senior (+ de 50 ans)"),
                            ("JEUNE", "Jeune (- de 26 ans)"),
                            ("ASE", "Aide sociale à l'enfance"),
                            ("DELD", "Demandeur d'emploi de longue durée (12-24 mois)"),
                            ("DETLD", "Demandeur d'emploi de très longue durée (+24 mois)"),
                            ("TH", "Travailleur handicapé"),
                            ("PI", "Parent isolé"),
                            ("PSH_PR", "Personne sans hébergement ou hébergée ou ayant un parcours de rue"),
                            (
                                "REF_DA",
                                "Réfugié statutaire, bénéficiaire d'une protection temporaire, protégé subsidiaire ou "
                                "demandeur d'asile",
                            ),
                            ("ZRR", "Résident ZRR"),
                            ("QPV", "Résident QPV"),
                            ("DETENTION_MJ", "Sortant de détention ou personne placée sous main de justice"),
                            ("FLE", "Maîtrise de la langue française"),
                            ("PM", "Problème de mobilité"),
                            ("JEUNE_SQ", "Jeune de moins de 26 ans sans qualification (niveau 4 maximum)"),
                            ("MINIMA", "Bénéficiaire des minima sociaux"),
                            ("DELD_12", "Demandeur d'emploi inscrit depuis moins de 12 mois"),
                            ("DE_45", "Demandeur d’emploi de 45 ans et plus"),
                            ("RECONVERSION", "Personne en reconversion professionnelle contrainte"),
                            ("SIAE_CUI", "Personne bénéficiant ou sortant d’un dispositif d’insertion"),
                            ("RS_PS_DA", "Demandeur d'asile"),
                            ("AUTRE_MINIMA", "Autre minima social"),
                            ("FT", "Personne inscrite à France Travail"),
                            ("SANS_TRAVAIL_12", "Personne éloignée du marché du travail (> 1 an)"),
                        ],
                        default="",
                        verbose_name="type",
                    ),
                ),
            ],
            options={
                "verbose_name": "critère administratif GEIQ",
                "verbose_name_plural": "critères administratifs GEIQ",
                "ordering": [models.OrderBy(models.F("level"), nulls_last=True), "ui_rank"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(("annex__in", ("0", "1")), ("level__isnull", True)),
                            models.Q(("annex__in", ("2", "1+2")), ("level__in", ("1", "2")), ("level__isnull", False)),
                            _connector="OR",
                        ),
                        name="administrativecriteria_level_annex_consistency",
                        violation_error_message="Incohérence entre l'annexe du critère administratif et son niveau",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="GEIQEligibilityDiagnosis",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "author_kind",
                    models.CharField(
                        choices=[("prescriber", "Prescripteur habilité"), ("employer", "Employeur"), ("geiq", "GEIQ")],
                        default="prescriber",
                        max_length=10,
                        verbose_name="type de l'auteur",
                    ),
                ),
                (
                    "author_geiq",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"kind": "GEIQ"},
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="geiq_eligibilitydiagnosis_set",
                        to="companies.company",
                        verbose_name="GEIQ de l'auteur",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now, verbose_name="date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, db_index=True, verbose_name="date de modification"),
                ),
                (
                    "expires_at",
                    models.DateField(
                        db_index=True,
                        help_text="Diagnosic expiré à compter de ce jour",
                        verbose_name="date d'expiration",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="auteur",
                    ),
                ),
                (
                    "author_prescriber_organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="prescribers.prescriberorganization",
                        verbose_name="organisation du prescripteur de l'auteur",
                    ),
                ),
                (
                    "job_seeker",
                    models.ForeignKey(
                        limit_choices_to={"kind": "job_seeker"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geiq_eligibility_diagnoses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="demandeur d'emploi",
                    ),
                ),
            ],
            options={
                "verbose_name": "diagnostic d'éligibilité GEIQ",
                "verbose_name_plural": "diagnostics d'éligibilité GEIQ",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("author_geiq__isnull", False),
                                ("author_kind", "geiq"),
                                ("author_prescriber_organization__isnull", True),
                            ),
                            models.Q(
                                ("author_geiq__isnull", True),
                                ("author_kind", "prescriber"),
                                ("author_prescriber_organization__isnull", False),
                            ),
                            _connector="OR",
                        ),
                        name="author_kind_coherence",
                        violation_error_message="La structure de l'auteur ne correspond pas à son type",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="GEIQSelectedAdministrativeCriteria",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                (
                    "administrative_criteria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="administrative_criteria_through",
                        to="eligibility.geiqadministrativecriteria",
                    ),
                ),
                (
                    "eligibility_diagnosis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="selected_administrative_criteria",
                        to="eligibility.geiqeligibilitydiagnosis",
                    ),
                ),
                (
                    "certification_period",
                    itou.utils.models.InclusiveDateRangeField(
                        blank=True, null=True, verbose_name="période de certification"
                    ),
                ),
                (
                    "certified",
                    models.BooleanField(blank=True, null=True, verbose_name="certifié par l'API Particulier"),
                ),
                ("certified_at", models.DateTimeField(blank=True, null=True, verbose_name="certifié le")),
                (
                    "data_returned_by_api",
                    models.JSONField(blank=True, null=True, verbose_name="résultat renvoyé par l'API Particulier"),
                ),
            ],
            options={
                "ordering": ["administrative_criteria"],
                "verbose_name": "critère administratif GEIQ sélectionné",
                "verbose_name_plural": "critères administratifs GEIQ sélectionnés",
                "unique_together": {("eligibility_diagnosis", "administrative_criteria")},
            },
        ),
        migrations.AddField(
            model_name="geiqeligibilitydiagnosis",
            name="administrative_criteria",
            field=models.ManyToManyField(
                blank=True,
                through="eligibility.GEIQSelectedAdministrativeCriteria",
                to="eligibility.geiqadministrativecriteria",
                verbose_name="critères administratifs GEIQ",
            ),
        ),
    ]
