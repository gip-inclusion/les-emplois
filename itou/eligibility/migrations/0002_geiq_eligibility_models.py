# Generated by Django 4.1.5 on 2023-01-16 16:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ("prescribers", "0001_initial"),
        ("siaes", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("eligibility", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="GEIQAdministrativeCriteria",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                ("desc", models.CharField(blank=True, max_length=255, verbose_name="Description")),
                ("written_proof", models.CharField(blank=True, max_length=255, verbose_name="Justificatif")),
                (
                    "written_proof_url",
                    models.URLField(blank=True, verbose_name="Lien d'aide à propos du justificatif"),
                ),
                (
                    "written_proof_validity",
                    models.CharField(
                        blank=True, default="", max_length=255, verbose_name="Durée de validité du justificatif"
                    ),
                ),
                ("ui_rank", models.PositiveSmallIntegerField(default=32767)),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                (
                    "annex",
                    models.CharField(
                        choices=[("1", "Annexe 1"), ("2", "Annexe 2")],
                        default="1",
                        max_length=1,
                        verbose_name="Annexe",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        blank=True,
                        choices=[("1", "Niveau 1"), ("2", "Niveau 2")],
                        max_length=1,
                        null=True,
                        verbose_name="Niveau",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="eligibility.geiqadministrativecriteria",
                        verbose_name="Critère parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Critère administratif GEIQ",
                "verbose_name_plural": "Critères administratifs GEIQ",
                "ordering": [models.OrderBy(models.F("level"), nulls_last=True), "ui_rank"],
            },
        ),
        migrations.CreateModel(
            name="GEIQEligibilityDiagnosis",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "author_kind",
                    models.CharField(
                        choices=[("prescriber", "Prescripteur"), ("siae_staff", "Employeur (SIAE)"), ("geiq", "GEIQ")],
                        default="prescriber",
                        max_length=10,
                        verbose_name="Type de l'auteur",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, db_index=True, null=True, verbose_name="Date de modification"),
                ),
                ("expires_at", models.DateTimeField(db_index=True, verbose_name="Date d'expiration")),
            ],
            options={
                "verbose_name": "Diagnostic d'éligibilité GEIQ",
                "verbose_name_plural": "Diagnostics d'éligibilité GEIQ",
            },
        ),
        migrations.AlterModelOptions(
            name="administrativecriteria",
            options={
                "ordering": ["level", "ui_rank"],
                "verbose_name": "Critère administratif IAE",
                "verbose_name_plural": "Critères administratifs IAE",
            },
        ),
        migrations.AlterModelOptions(
            name="eligibilitydiagnosis",
            options={
                "ordering": ["-created_at"],
                "verbose_name": "Diagnostic d'éligibilité IAE",
                "verbose_name_plural": "Diagnostics d'éligibilité IAE",
            },
        ),
        migrations.AlterModelOptions(
            name="selectedadministrativecriteria",
            options={
                "verbose_name": "Critère administratif IAE sélectionné",
                "verbose_name_plural": "Critères administratifs IAE sélectionnés",
            },
        ),
        migrations.AlterField(
            model_name="eligibilitydiagnosis",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name="Auteur"
            ),
        ),
        migrations.AlterField(
            model_name="eligibilitydiagnosis",
            name="author_kind",
            field=models.CharField(
                choices=[("prescriber", "Prescripteur"), ("siae_staff", "Employeur (SIAE)"), ("geiq", "GEIQ")],
                default="prescriber",
                max_length=10,
                verbose_name="Type de l'auteur",
            ),
        ),
        migrations.CreateModel(
            name="GEIQSelectedAdministrativeCriteria",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                (
                    "administrative_criteria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="administrative_criteria_through",
                        to="eligibility.geiqadministrativecriteria",
                    ),
                ),
                (
                    "eligibility_diagnosis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="eligibility.geiqeligibilitydiagnosis"
                    ),
                ),
            ],
            options={
                "verbose_name": "Critère administratif GEIQ sélectionné",
                "verbose_name_plural": "Critères administratifs GEIQ sélectionnés",
                "unique_together": {("eligibility_diagnosis", "administrative_criteria")},
            },
        ),
        migrations.AddField(
            model_name="geiqeligibilitydiagnosis",
            name="administrative_criteria",
            field=models.ManyToManyField(
                blank=True,
                through="eligibility.GEIQSelectedAdministrativeCriteria",
                to="eligibility.geiqadministrativecriteria",
                verbose_name="Critères administratifs GEIQ",
            ),
        ),
        migrations.AddField(
            model_name="geiqeligibilitydiagnosis",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name="Auteur"
            ),
        ),
        migrations.AddField(
            model_name="geiqeligibilitydiagnosis",
            name="author_geiq",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"kind": "GEIQ"},
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="geiq_eligibilitydiagnosis_set",
                to="siaes.siae",
                verbose_name="GEIQ de l'auteur",
            ),
        ),
        migrations.AddField(
            model_name="geiqeligibilitydiagnosis",
            name="author_prescriber_organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="prescribers.prescriberorganization",
                verbose_name="Organisation du prescripteur de l'auteur",
            ),
        ),
        migrations.AddField(
            model_name="geiqeligibilitydiagnosis",
            name="job_seeker",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="geiq_eligibility_diagnoses",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Demandeur d'emploi",
            ),
        ),
        migrations.AddConstraint(
            model_name="geiqeligibilitydiagnosis",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("author_geiq__isnull", False),
                        ("author_kind", "geiq"),
                        ("author_prescriber_organization__isnull", True),
                    ),
                    models.Q(
                        ("author_geiq__isnull", True),
                        ("author_kind", "prescriber"),
                        ("author_prescriber_organization__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="author_kind_coherence",
                violation_error_message="Le diagnostic d'éligibilité GEIQ ne peut avoir 2 structures pour auteur",
            ),
        ),
        migrations.AddConstraint(
            model_name="geiqadministrativecriteria",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("annex", "1"), ("level__isnull", True)),
                    models.Q(("annex", "2"), ("level__isnull", False)),
                    _connector="OR",
                ),
                name="ac_level_annex_coherence",
                violation_error_message="Incohérence entre l'annexe du critère administratif et son niveau",
            ),
        ),
    ]
