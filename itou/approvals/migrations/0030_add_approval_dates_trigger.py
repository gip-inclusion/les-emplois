# Generated by Django 4.0.3 on 2022-03-11 21:52

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("approvals", "0029_add_approval_date_tracking"),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION approval_period_update_event()
                    RETURNS TRIGGER AS $approvals_approvalperiodupdateevent$
                BEGIN
                -- If there is an "update" action on 'approvals_approval' table (Approval model object),
                -- "upsert" updated values of 'start_at' and 'end_at' fields
                -- in 'approvals_approvalperiodupdateevent' table (ApprovalPeriodUpdateEvent model object).
                    IF (TG_OP = 'UPDATE') THEN
                        INSERT INTO approvals_approvalperiodupdateevent(approval_id, created_at, start_at, end_at)
                        SELECT NEW.id, NOW(), NEW.start_at, NEW.end_at
                        ON CONFLICT(approval_id)
                        DO UPDATE SET
                            created_at = now(), start_at = NEW.start_at, end_at = NEW.end_at;
                    END IF;
                    RETURN NULL;
                END;
                $approvals_approvalperiodupdateevent$ LANGUAGE plpgsql;

                CREATE TRIGGER trigger_approval_period_update_event
                AFTER UPDATE OF start_at, end_at on approvals_approval
                FOR EACH ROW
                EXECUTE PROCEDURE approval_period_update_event();
                """,
            reverse_sql="""
                DROP TRIGGER IF EXISTS trigger_approval_period_update_event ON approvals_approval;
                DROP FUNCTION IF EXISTS approval_period_update_event();
                """,
        )
    ]
