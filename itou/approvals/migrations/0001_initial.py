# Generated by Django 5.0.3 on 2024-03-21 08:52

import django.contrib.postgres.constraints
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.datetime
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models

import itou.utils.models
import itou.utils.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("eligibility", "0002_geiq_eligibility_models"),
        ("prescribers", "0003_alter_prescribermembership_updated_at_and_more"),
        ("files", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Approval",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "number",
                    models.CharField(
                        help_text="12 caractères alphanumériques.",
                        max_length=12,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-zA-Z]*$", "Seuls les caractères alphanumériques sont autorisés."
                            ),
                            django.core.validators.MinLengthValidator(12),
                        ],
                        verbose_name="numéro",
                    ),
                ),
                (
                    "start_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de début"
                    ),
                ),
                (
                    "end_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de fin"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="créé par",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approvals",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="demandeur d'emploi",
                    ),
                ),
                (
                    "pe_notification_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="date de notification à PE"),
                ),
                (
                    "pe_notification_endpoint",
                    models.CharField(
                        blank=True,
                        choices=[("rech_individu", "Recherche Individu"), ("maj_pass", "Mise A Jour Pass Iae")],
                        max_length=32,
                        null=True,
                        verbose_name="dernier endpoint de l'API PE contacté",
                    ),
                ),
                (
                    "pe_notification_status",
                    models.CharField(
                        choices=[
                            ("notification_pending", "Pending"),
                            ("notification_ready", "Ready"),
                            ("notification_success", "Success"),
                            ("notification_error", "Error"),
                            ("notification_should_retry", "Should Retry"),
                        ],
                        default="notification_pending",
                        max_length=32,
                        verbose_name="état de la notification à PE",
                    ),
                ),
                (
                    "pe_notification_exit_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("S000", "Aucun individu trouvé"),
                            ("S001", "Individu trouvé"),
                            ("S002", "Plusieurs individu trouvés"),
                            ("R010", "NIR Certifié absent"),
                            ("R011", "NIR Certifié incorrect"),
                            ("R020", "Nom de naissance absente"),
                            ("R021", "Nom de naissance incorrect"),
                            ("R030", "Prénom absent"),
                            ("R031", "Prénom incorrect"),
                            ("R040", "Date de naissance absente"),
                            ("R041", "Date de naissance incorrecte"),
                            ("R042", "Date de naissance invalide"),
                            ("S000", "Suivi délégué installé"),
                            ("S001", "SD non installé : Identifiant national individu obligatoire"),
                            ("S002", "SD non installé : Code traitement obligatoire"),
                            ("S003", "SD non installé : Code traitement erroné"),
                            ("S004", "SD non installé : Erreur lors de la recherche de la TDV référente"),
                            ("S005", "SD non installé : Identifiant régional de l’individu obligatoire"),
                            ("S006", "SD non installé : Code Pôle Emploi de l’individu obligatoire"),
                            ("S007", "SD non installé : Individu inexistant en base"),
                            ("S008", "SD non installé : Individu radié"),
                            ("S009", "SD non installé : Inscription incomplète de l’individu "),
                            ("S010", "SD non installé : PEC de l’individu inexistante en base"),
                            ("S011", "SD non installé : Demande d’emploi de l’individu inexistante en base"),
                            ("S012", "SD non installé : Suivi principal de l’individu inexistant en base"),
                            ("S013", "SD non installé : Référent suivi principal non renseigné en base"),
                            ("S014", "SD non installé : Structure suivi principal non renseignée en base"),
                            ("S015", "SD non installé : Suivi délégué déjà en cours"),
                            ("S016", "SD non installé : Problème lors de la recherche du dernier suivi délégué"),
                            ("S017", "SD non installé : Type de suivi de l’individu non EDS»"),
                            ("S018", "SD non installé : Type de SIAE obligatoire"),
                            ("S019", "SD non installé : Type de SIAE erroné"),
                            ("S020", "SD non installé : Statut de la réponse obligatoire"),
                            ("S021", "SD non installé : Statut de la réponse erroné"),
                            ("S022", "SD non installé : Refus du PASS IAE"),
                            ("S023", "SD non installé : Date de début du PASS IAE obligatoire"),
                            ("S024", "SD non installé : Date de début du PASS IAE dans le futur"),
                            ("S025", "SD non installé : Date de fin du PASS IAE obligatoire"),
                            ("S026", "SD non installé : Date fin PASS IAE non strictement sup à date début"),
                            ("S027", "SD non installé : Numéro du PASS IAE obligatoire"),
                            ("S028", "SD non installé : Origine de la candidature obligatoire"),
                            ("S029", "SD non installé : Origine de la candidature erronée"),
                            ("S031", "SD non installé : Numéro SIRET SIAE obligatoire"),
                            ("S032", "SD non installé : Organisme générique inexistant dans réf partenaire"),
                            ("S033", "SD non installé : Conseiller prescripteur inexistant en base"),
                            ("S034", "SD non installé : Structure prescripteur inexistante en base"),
                            ("S035", "SD non installé : Type de structure du prescripteur erroné"),
                            ("S036", "SD non installé : Pas de lien entre structure prescripteur et partenaire"),
                            ("S037", "SD non installé : Organisme générique inexistant en base"),
                            ("S038", "SD non installé : Correspondant du partenaire inexistant en base"),
                            ("S039", "SD non installé : Structure correspondant inexistante en base"),
                            ("S040", "SD non installé : Structure correspondant inexistante dans réf des struct"),
                            ("S041", "SD non installé : Structure de suivi non autorisée"),
                            ("S042", "SD non installé : Adresse du correspondant inexistante en base"),
                            ("S043", "SD non installé : Commune du correspondant inexistante en base"),
                            ("E_ERR_D98_D_PR_PROBLEME_TECHNIQUE", "Problème technique inconnu"),
                            ("E_ERR_EX042_PROBLEME_DECHIFFREMEMENT", "Erreur lors du déchiffrement du NIR chiffré"),
                        ],
                        max_length=64,
                        null=True,
                        verbose_name="dernier code de sortie constaté",
                    ),
                ),
                (
                    "origin",
                    models.CharField(
                        choices=[
                            ("default", "Créé normalement via les emplois"),
                            ("pe_approval", "Créé lors d'un import d'Agrément Pole Emploi"),
                            ("ai_stock", "Créé lors de l'import du stock AI"),
                            ("admin", "Créé depuis l'admin"),
                        ],
                        default="default",
                        max_length=30,
                        verbose_name="origine du pass",
                    ),
                ),
                (
                    "eligibility_diagnosis",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="eligibility.eligibilitydiagnosis",
                        verbose_name="diagnostic d'éligibilité",
                    ),
                ),
                (
                    "origin_prescriber_organization_kind",
                    models.CharField(
                        choices=[
                            ("CAP_EMPLOI", "Cap emploi"),
                            ("ML", "Mission locale"),
                            ("OIL", "Opérateur d'intermédiation locative"),
                            (
                                "ODC",
                                "Organisation délégataire d'un Conseil Départemental (Orientation et suivi des BRSA)",
                            ),
                            ("PENSION", "Pension de famille / résidence accueil"),
                            ("PE", "France Travail"),
                            ("RS_FJT", "Résidence sociale / FJT - Foyer de Jeunes Travailleurs"),
                            ("PREVENTION", "Service ou club de prévention"),
                            ("DEPT", "Service social du conseil départemental"),
                            ("AFPA", "AFPA - Agence nationale pour la formation professionnelle des adultes"),
                            ("ASE", "ASE - Aide sociale à l'enfance"),
                            (
                                "CAARUD",
                                "CAARUD - Centre d'accueil et d'accompagnement à la réduction de risques pour usagers "
                                "de drogues",
                            ),
                            ("CADA", "CADA - Centre d'accueil de demandeurs d'asile"),
                            ("CAF", "CAF - Caisse d'allocations familiales"),
                            ("CAVA", "CAVA - Centre d'adaptation à la vie active"),
                            (
                                "CCAS",
                                "CCAS - Centre communal d'action sociale ou centre intercommunal d'action sociale",
                            ),
                            ("CHRS", "CHRS - Centre d'hébergement et de réinsertion sociale"),
                            ("CHU", "CHU - Centre d'hébergement d'urgence"),
                            ("CIDFF", "CIDFF - Centre d'information sur les droits des femmes et des familles"),
                            ("CPH", "CPH - Centre provisoire d'hébergement"),
                            ("CSAPA", "CSAPA - Centre de soins, d'accompagnement et de prévention en addictologie"),
                            ("E2C", "E2C - École de la deuxième chance"),
                            ("EPIDE", "EPIDE - Établissement pour l'insertion dans l'emploi"),
                            ("HUDA", "HUDA - Hébergement d'urgence pour demandeurs d'asile"),
                            ("MSA", "MSA - Mutualité Sociale Agricole"),
                            (
                                "OACAS",
                                "OACAS - Structure porteuse d'un agrément national organisme d'accueil communautaire "
                                "et d'activité solidaire",
                            ),
                            ("PIJ_BIJ", "PIJ-BIJ - Point/Bureau information jeunesse"),
                            ("PJJ", "PJJ - Protection judiciaire de la jeunesse"),
                            ("PLIE", "PLIE - Plan local pour l'insertion et l'emploi"),
                            ("SPIP", "SPIP - Service pénitentiaire d'insertion et de probation"),
                            ("Autre", "Autre"),
                        ],
                        verbose_name="typologie prescripteur à l'origine du PASS IAE",
                    ),
                ),
                (
                    "origin_sender_kind",
                    models.CharField(
                        choices=[
                            ("job_seeker", "Demandeur d'emploi"),
                            ("prescriber", "Prescripteur"),
                            ("employer", "Employeur (SIAE)"),
                        ],
                        null=True,
                        verbose_name="origine de la candidature à l'origine du PASS IAE",
                    ),
                ),
                (
                    "origin_siae_kind",
                    models.CharField(
                        choices=[
                            ("ACI", "Atelier chantier d'insertion"),
                            ("AI", "Association intermédiaire"),
                            ("EA", "Entreprise adaptée"),
                            ("EATT", "Entreprise adaptée de travail temporaire"),
                            ("EI", "Entreprise d'insertion"),
                            ("EITI", "Entreprise d'insertion par le travail indépendant"),
                            ("ETTI", "Entreprise de travail temporaire d'insertion"),
                            ("GEIQ", "Groupement d'employeurs pour l'insertion et la qualification"),
                            ("OPCS", "Organisation porteuse de la clause sociale"),
                        ],
                        null=True,
                        verbose_name="type siae à l'origine du PASS IAE",
                    ),
                ),
                (
                    "origin_siae_siret",
                    models.CharField(max_length=14, null=True, verbose_name="siret siae à l'origine du PASS IAE"),
                ),
            ],
            options={
                "verbose_name": "PASS IAE",
                "verbose_name_plural": "PASS IAE",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PoleEmploiApproval",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de début"
                    ),
                ),
                (
                    "end_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de fin"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                ("pe_structure_code", models.CharField(max_length=5, verbose_name="code structure France Travail")),
                ("number", models.CharField(max_length=12, unique=True, verbose_name="numéro")),
                (
                    "pole_emploi_id",
                    models.CharField(max_length=8, verbose_name="identifiant France Travail (ex pôle emploi)"),
                ),
                ("first_name", models.CharField(max_length=150, verbose_name="prénom")),
                ("last_name", models.CharField(max_length=150, verbose_name="nom")),
                ("birth_name", models.CharField(max_length=150, verbose_name="nom de naissance")),
                (
                    "birthdate",
                    models.DateField(default=django.utils.timezone.localdate, verbose_name="date de naissance"),
                ),
                ("nir", models.CharField(blank=True, max_length=15, null=True, verbose_name="NIR")),
                ("ntt_nia", models.CharField(blank=True, max_length=40, null=True, verbose_name="NTT ou NIA")),
                (
                    "pe_notification_endpoint",
                    models.CharField(
                        blank=True,
                        choices=[("rech_individu", "Recherche Individu"), ("maj_pass", "Mise A Jour Pass Iae")],
                        max_length=32,
                        null=True,
                        verbose_name="dernier endpoint de l'API PE contacté",
                    ),
                ),
                (
                    "pe_notification_status",
                    models.CharField(
                        choices=[
                            ("notification_pending", "Pending"),
                            ("notification_ready", "Ready"),
                            ("notification_success", "Success"),
                            ("notification_error", "Error"),
                            ("notification_should_retry", "Should Retry"),
                        ],
                        default="notification_pending",
                        max_length=32,
                        verbose_name="état de la notification à PE",
                    ),
                ),
                (
                    "pe_notification_exit_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("S000", "Aucun individu trouvé"),
                            ("S001", "Individu trouvé"),
                            ("S002", "Plusieurs individu trouvés"),
                            ("R010", "NIR Certifié absent"),
                            ("R011", "NIR Certifié incorrect"),
                            ("R020", "Nom de naissance absente"),
                            ("R021", "Nom de naissance incorrect"),
                            ("R030", "Prénom absent"),
                            ("R031", "Prénom incorrect"),
                            ("R040", "Date de naissance absente"),
                            ("R041", "Date de naissance incorrecte"),
                            ("R042", "Date de naissance invalide"),
                            ("S000", "Suivi délégué installé"),
                            ("S001", "SD non installé : Identifiant national individu obligatoire"),
                            ("S002", "SD non installé : Code traitement obligatoire"),
                            ("S003", "SD non installé : Code traitement erroné"),
                            ("S004", "SD non installé : Erreur lors de la recherche de la TDV référente"),
                            ("S005", "SD non installé : Identifiant régional de l’individu obligatoire"),
                            ("S006", "SD non installé : Code Pôle Emploi de l’individu obligatoire"),
                            ("S007", "SD non installé : Individu inexistant en base"),
                            ("S008", "SD non installé : Individu radié"),
                            ("S009", "SD non installé : Inscription incomplète de l’individu "),
                            ("S010", "SD non installé : PEC de l’individu inexistante en base"),
                            ("S011", "SD non installé : Demande d’emploi de l’individu inexistante en base"),
                            ("S012", "SD non installé : Suivi principal de l’individu inexistant en base"),
                            ("S013", "SD non installé : Référent suivi principal non renseigné en base"),
                            ("S014", "SD non installé : Structure suivi principal non renseignée en base"),
                            ("S015", "SD non installé : Suivi délégué déjà en cours"),
                            ("S016", "SD non installé : Problème lors de la recherche du dernier suivi délégué"),
                            ("S017", "SD non installé : Type de suivi de l’individu non EDS»"),
                            ("S018", "SD non installé : Type de SIAE obligatoire"),
                            ("S019", "SD non installé : Type de SIAE erroné"),
                            ("S020", "SD non installé : Statut de la réponse obligatoire"),
                            ("S021", "SD non installé : Statut de la réponse erroné"),
                            ("S022", "SD non installé : Refus du PASS IAE"),
                            ("S023", "SD non installé : Date de début du PASS IAE obligatoire"),
                            ("S024", "SD non installé : Date de début du PASS IAE dans le futur"),
                            ("S025", "SD non installé : Date de fin du PASS IAE obligatoire"),
                            ("S026", "SD non installé : Date fin PASS IAE non strictement sup à date début"),
                            ("S027", "SD non installé : Numéro du PASS IAE obligatoire"),
                            ("S028", "SD non installé : Origine de la candidature obligatoire"),
                            ("S029", "SD non installé : Origine de la candidature erronée"),
                            ("S031", "SD non installé : Numéro SIRET SIAE obligatoire"),
                            ("S032", "SD non installé : Organisme générique inexistant dans réf partenaire"),
                            ("S033", "SD non installé : Conseiller prescripteur inexistant en base"),
                            ("S034", "SD non installé : Structure prescripteur inexistante en base"),
                            ("S035", "SD non installé : Type de structure du prescripteur erroné"),
                            ("S036", "SD non installé : Pas de lien entre structure prescripteur et partenaire"),
                            ("S037", "SD non installé : Organisme générique inexistant en base"),
                            ("S038", "SD non installé : Correspondant du partenaire inexistant en base"),
                            ("S039", "SD non installé : Structure correspondant inexistante en base"),
                            ("S040", "SD non installé : Structure correspondant inexistante dans réf des struct"),
                            ("S041", "SD non installé : Structure de suivi non autorisée"),
                            ("S042", "SD non installé : Adresse du correspondant inexistante en base"),
                            ("S043", "SD non installé : Commune du correspondant inexistante en base"),
                            ("E_ERR_D98_D_PR_PROBLEME_TECHNIQUE", "Problème technique inconnu"),
                            ("E_ERR_EX042_PROBLEME_DECHIFFREMEMENT", "Erreur lors du déchiffrement du NIR chiffré"),
                        ],
                        max_length=64,
                        null=True,
                        verbose_name="dernier code de sortie constaté",
                    ),
                ),
                (
                    "pe_notification_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="date de notification à PE"),
                ),
                (
                    "siae_kind",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACI", "Atelier chantier d'insertion"),
                            ("AI", "Association intermédiaire"),
                            ("EA", "Entreprise adaptée"),
                            ("EATT", "Entreprise adaptée de travail temporaire"),
                            ("EI", "Entreprise d'insertion"),
                            ("EITI", "Entreprise d'insertion par le travail indépendant"),
                            ("ETTI", "Entreprise de travail temporaire d'insertion"),
                            ("GEIQ", "Groupement d'employeurs pour l'insertion et la qualification"),
                            ("OPCS", "Organisation porteuse de la clause sociale"),
                        ],
                        max_length=6,
                        null=True,
                        verbose_name="type de la SIAE",
                    ),
                ),
                (
                    "siae_siret",
                    models.CharField(
                        blank=True,
                        max_length=14,
                        null=True,
                        validators=[itou.utils.validators.validate_siret],
                        verbose_name="siret de la SIAE",
                    ),
                ),
            ],
            options={
                "verbose_name": "agrément Pôle emploi",
                "verbose_name_plural": "agréments Pôle emploi",
                "ordering": ["-start_at"],
                "indexes": [models.Index(fields=["pole_emploi_id", "birthdate"], name="pe_id_and_birthdate_idx")],
            },
        ),
        migrations.CreateModel(
            name="Suspension",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de début"
                    ),
                ),
                (
                    "end_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de fin"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("CONTRACT_SUSPENDED", "Contrat de travail suspendu depuis plus de 15 jours"),
                            ("CONTRACT_BROKEN", "Contrat de travail rompu"),
                            ("FINISHED_CONTRACT", "Contrat de travail terminé"),
                            (
                                "APPROVAL_BETWEEN_CTA_MEMBERS",
                                "Situation faisant l'objet d'un accord entre les acteurs membres du CTA (Comité "
                                "technique d'animation)",
                            ),
                            ("CONTRAT_PASSERELLE", "Bascule dans l'expérimentation contrat passerelle"),
                            ("SICKNESS", "Arrêt pour longue maladie"),
                            ("MATERNITY", "Congé de maternité"),
                            ("INCARCERATION", "Incarcération"),
                            (
                                "TRIAL_OUTSIDE_IAE",
                                "Période d'essai auprès d'un employeur ne relevant pas de l'insertion par l'activité "
                                "économique",
                            ),
                            ("DETOXIFICATION", "Période de cure pour désintoxication"),
                            (
                                "FORCE_MAJEURE",
                                "Raison de force majeure conduisant le salarié à quitter son emploi ou toute autre "
                                "situation faisant l'objet d'un accord entre les acteurs membres du CTA",
                            ),
                        ],
                        default="CONTRACT_SUSPENDED",
                        max_length=30,
                        verbose_name="motif",
                    ),
                ),
                ("reason_explanation", models.TextField(blank=True, verbose_name="explications supplémentaires")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="date de modification")),
                (
                    "approval",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="approvals.approval", verbose_name="PASS IAE"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approvals_suspended_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="créé par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="mis à jour par",
                    ),
                ),
            ],
            options={
                "verbose_name": "suspension",
                "ordering": ["-start_at"],
            },
        ),
        migrations.AddConstraint(
            model_name="suspension",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=(
                    (
                        itou.utils.models.DateRange(
                            "start_at",
                            "end_at",
                            django.contrib.postgres.fields.ranges.RangeBoundary(
                                inclusive_lower=True, inclusive_upper=True
                            ),
                        ),
                        "&&",
                    ),
                    ("approval", "="),
                ),
                name="exclude_overlapping_suspensions",
                violation_error_message="La période chevauche une suspension existante pour ce PASS\xa0IAE.",
            ),
        ),
        migrations.CreateModel(
            name="ProlongationRequest",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de début"
                    ),
                ),
                (
                    "end_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de fin"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("SENIOR_CDI", "CDI conclu avec une personne de plus de 57\u202fans"),
                            ("COMPLETE_TRAINING", "Fin d'une formation"),
                            ("RQTH", "RQTH - Reconnaissance de la qualité de travailleur handicapé"),
                            ("SENIOR", "50\u202fans et plus"),
                            (
                                "PARTICULAR_DIFFICULTIES",
                                "Difficultés particulièrement importantes dont l'absence de prise en charge ferait "
                                "obstacle à son insertion professionnelle",
                            ),
                            ("HEALTH_CONTEXT", "Contexte sanitaire"),
                        ],
                        default="COMPLETE_TRAINING",
                        max_length=30,
                        verbose_name="motif",
                    ),
                ),
                ("reason_explanation", models.TextField(blank=True, verbose_name="explications supplémentaires")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="date de modification")),
                (
                    "require_phone_interview",
                    models.BooleanField(blank=True, default=False, verbose_name="demande d'entretien téléphonique"),
                ),
                ("contact_email", models.EmailField(blank=True, max_length=254, verbose_name="e-mail de contact")),
                (
                    "contact_phone",
                    models.CharField(blank=True, max_length=20, verbose_name="numéro de téléphone de contact"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "À traiter"), ("GRANTED", "Acceptée"), ("DENIED", "Refusée")],
                        default="PENDING",
                        max_length=32,
                        verbose_name="statut",
                    ),
                ),
                ("processed_at", models.DateTimeField(blank=True, null=True, verbose_name="date de traitement")),
                (
                    "approval",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="approvals.approval", verbose_name="PASS IAE"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="créé par",
                    ),
                ),
                (
                    "declared_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_declared",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="déclarée par",
                    ),
                ),
                (
                    "prescriber_organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="prescribers.prescriberorganization",
                        verbose_name="organisation du prescripteur habilité",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_processed",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="traité par",
                    ),
                ),
                (
                    "report_file",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="files.file",
                        verbose_name="fichier bilan",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modifié par",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_validated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="prescripteur habilité qui a autorisé cette prolongation",
                    ),
                ),
                ("reminder_sent_at", models.DateTimeField(editable=False, null=True, verbose_name="rappel envoyé le")),
            ],
            options={
                "verbose_name": "demande de prolongation",
                "verbose_name_plural": "demandes de prolongation",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Prolongation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de début"
                    ),
                ),
                (
                    "end_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de fin"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("SENIOR_CDI", "CDI conclu avec une personne de plus de 57\u202fans"),
                            ("COMPLETE_TRAINING", "Fin d'une formation"),
                            ("RQTH", "RQTH - Reconnaissance de la qualité de travailleur handicapé"),
                            ("SENIOR", "50\u202fans et plus"),
                            (
                                "PARTICULAR_DIFFICULTIES",
                                "Difficultés particulièrement importantes dont l'absence de prise en charge ferait "
                                "obstacle à son insertion professionnelle",
                            ),
                            ("HEALTH_CONTEXT", "Contexte sanitaire"),
                        ],
                        default="COMPLETE_TRAINING",
                        max_length=30,
                        verbose_name="motif",
                    ),
                ),
                ("reason_explanation", models.TextField(blank=True, verbose_name="explications supplémentaires")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="date de modification")),
                (
                    "approval",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="approvals.approval", verbose_name="PASS IAE"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="créé par",
                    ),
                ),
                (
                    "declared_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_declared",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="déclarée par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modifié par",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_validated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="prescripteur habilité qui a autorisé cette prolongation",
                    ),
                ),
                ("contact_email", models.EmailField(blank=True, max_length=254, verbose_name="e-mail de contact")),
                (
                    "contact_phone",
                    models.CharField(blank=True, max_length=20, verbose_name="numéro de téléphone de contact"),
                ),
                (
                    "prescriber_organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="prescribers.prescriberorganization",
                        verbose_name="organisation du prescripteur habilité",
                    ),
                ),
                (
                    "report_file",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="files.file",
                        verbose_name="fichier bilan",
                    ),
                ),
                (
                    "require_phone_interview",
                    models.BooleanField(blank=True, default=False, verbose_name="demande d'entretien téléphonique"),
                ),
                (
                    "request",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="approvals.prolongationrequest",
                        verbose_name="demande de prolongation",
                    ),
                ),
            ],
            options={
                "verbose_name": "prolongation",
                "ordering": ["-start_at"],
            },
        ),
        migrations.CreateModel(
            name="OriginalPoleEmploiApproval",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de début"
                    ),
                ),
                (
                    "end_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de fin"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                ("pe_structure_code", models.CharField(max_length=5, verbose_name="code structure France Travail")),
                ("number", models.CharField(max_length=15, unique=True, verbose_name="numéro")),
                (
                    "pole_emploi_id",
                    models.CharField(max_length=8, verbose_name="identifiant France Travail (ex pôle emploi)"),
                ),
                ("first_name", models.CharField(max_length=150, verbose_name="prénom")),
                ("last_name", models.CharField(max_length=150, verbose_name="nom")),
                ("birth_name", models.CharField(max_length=150, verbose_name="nom de naissance")),
                (
                    "birthdate",
                    models.DateField(default=django.utils.timezone.localdate, verbose_name="date de naissance"),
                ),
                ("nir", models.CharField(blank=True, max_length=15, null=True, verbose_name="NIR")),
                ("ntt_nia", models.CharField(blank=True, max_length=40, null=True, verbose_name="NTT ou NIA")),
                ("merged", models.BooleanField()),
            ],
            options={
                "db_table": "merged_approvals_poleemploiapproval",
                "ordering": ["-start_at"],
                "verbose_name": "agrément Pôle emploi original",
                "verbose_name_plural": "agréments Pôle emploi originaux",
                "indexes": [
                    models.Index(fields=["pole_emploi_id", "birthdate"], name="merged_pe_id_and_birthdate_idx")
                ],
            },
        ),
        migrations.AddIndex(
            model_name="poleemploiapproval",
            index=models.Index(fields=["nir"], name="nir_idx"),
        ),
        migrations.AddConstraint(
            model_name="suspension",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "start_at__lte",
                        django.db.models.functions.datetime.TruncDate(django.db.models.functions.datetime.Now()),
                    )
                ),
                name="suspension_cannot_start_in_the_future",
            ),
        ),
        migrations.AddConstraint(
            model_name="approval",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("eligibility_diagnosis__isnull", False), ("origin__in", ["admin", "default"])),
                    models.Q(("eligibility_diagnosis", None), ("origin__in", ["pe_approval", "ai_stock"])),
                    _connector="OR",
                ),
                name="approval_eligibility_diagnosis",
                violation_error_message="Incohérence entre l'origine du PASS IAE et la présence d'un diagnostic "
                "d'éligibilité",
            ),
        ),
        migrations.AddConstraint(
            model_name="prolongation",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=(
                    (
                        itou.utils.models.DateRange(
                            "start_at",
                            "end_at",
                            django.contrib.postgres.fields.ranges.RangeBoundary(
                                inclusive_lower=True, inclusive_upper=False
                            ),
                        ),
                        "&&",
                    ),
                    ("approval", "="),
                ),
                name="exclude_prolongation_overlapping_dates",
                violation_error_message="La période chevauche une prolongation existante pour ce PASS\xa0IAE.",
            ),
        ),
        migrations.AddConstraint(
            model_name="prolongation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("report_file", None),
                    models.Q(
                        ("reason__in", ("RQTH", "SENIOR", "PARTICULAR_DIFFICULTIES")), ("report_file__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="check_prolongation_reason_and_report_file_coherence",
                violation_error_message="Incohérence entre le fichier de bilan et la raison de prolongation",
            ),
        ),
        migrations.AddConstraint(
            model_name="prolongationrequest",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("report_file", None),
                    models.Q(
                        ("reason__in", ("RQTH", "SENIOR", "PARTICULAR_DIFFICULTIES")), ("report_file__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="check_prolongationrequest_reason_and_report_file_coherence",
                violation_error_message="Incohérence entre le fichier de bilan et la raison de prolongation",
            ),
        ),
        migrations.AddConstraint(
            model_name="prolongationrequest",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("require_phone_interview", False),
                    models.Q(
                        models.Q(("contact_email", ""), _negated=True), models.Q(("contact_phone", ""), _negated=True)
                    ),
                    _connector="OR",
                ),
                name="check_prolongationrequest_require_phone_interview",
            ),
        ),
        migrations.AddConstraint(
            model_name="prolongationrequest",
            constraint=models.UniqueConstraint(
                condition=models.Q(("status", "PENDING")),
                fields=("approval",),
                name="unique_prolongationrequest_approval_for_pending",
                violation_error_message="Une demande de prolongation à traiter existe déjà pour ce PASS IAE",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="prolongation",
            trigger=pgtrigger.compiler.Trigger(
                name="update_approval_end_at",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n                    --\n                    "
                    "-- When a prolongation is inserted/updated/deleted, the end date\n                    "
                    "-- of its approval is automatically pushed back or forth.\n                    "
                    "--\n                    -- See:\n                    "
                    "-- https://www.postgresql.org/docs/12/triggers.html\n                    "
                    "-- https://www.postgresql.org/docs/12/plpgsql-trigger.html#PLPGSQL-TRIGGER-AUDIT-EXAMPLE"
                    "\n                    --\n                    IF (TG_OP = 'DELETE') THEN"
                    "\n                        -- At delete time, the approval's end date is pushed back if the "
                    "prolongation\n                        -- was validated."
                    "\n                        UPDATE approvals_approval"
                    "\n                        SET end_at = end_at - (OLD.end_at - OLD.start_at)"
                    "\n                        WHERE id = OLD.approval_id;"
                    "\n                    ELSIF (TG_OP = 'INSERT') THEN"
                    "\n                        -- At insert time, the approval's end date is pushed forward if the "
                    "prolongation\n                        -- is validated."
                    "\n                        UPDATE approvals_approval"
                    "\n                        SET end_at = end_at + (NEW.end_at - NEW.start_at)"
                    "\n                        WHERE id = NEW.approval_id;"
                    "\n                    ELSIF (TG_OP = 'UPDATE') THEN"
                    "\n                        -- At update time, the approval's end date is first reset before"
                    "\n                        -- being pushed forward."
                    "\n                        UPDATE approvals_approval"
                    "\n                        SET end_at = end_at - (OLD.end_at - OLD.start_at) + (NEW.end_at - "
                    "NEW.start_at)\n                        WHERE id = NEW.approval_id;\n                    END IF;"
                    "\n                    RETURN NULL;\n                ",
                    hash="68d9afbacb095f4426a5a5d0065acc16dd2cdc36",
                    operation="INSERT OR UPDATE OR DELETE",
                    pgid="pgtrigger_update_approval_end_at_d9288",
                    table="approvals_prolongation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="suspension",
            trigger=pgtrigger.compiler.Trigger(
                name="update_approval_end_at",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n                    --"
                    "\n                    -- When a suspension is inserted/updated/deleted, the end date"
                    "\n                    -- of its approval is automatically pushed back or forth."
                    "\n                    --\n                    -- See:"
                    "\n                    -- https://www.postgresql.org/docs/12/triggers.html"
                    "\n                    -- https://www.postgresql.org/docs/12/plpgsql-trigger.html#PLPGSQL-TRIGGER"
                    "-AUDIT-EXAMPLE\n                    --\n                    IF (TG_OP = 'DELETE') THEN"
                    "\n                        -- At delete time, the approval's end date is pushed back."
                    "\n                        UPDATE approvals_approval"
                    "\n                        SET end_at = end_at - (OLD.end_at - OLD.start_at)"
                    "\n                        WHERE id = OLD.approval_id;"
                    "\n                    ELSIF (TG_OP = 'INSERT') THEN"
                    "\n                        -- At insert time, the approval's end date is pushed forward."
                    "\n                        UPDATE approvals_approval"
                    "\n                        SET end_at = end_at + (NEW.end_at - NEW.start_at)"
                    "\n                        WHERE id = NEW.approval_id;"
                    "\n                    ELSIF (TG_OP = 'UPDATE') THEN"
                    "\n                        -- At update time, the approval's end date is first reset before"
                    "\n                        -- being pushed forward, e.g.:"
                    '\n                        --     * step 1 "create new 90 days suspension":'
                    "\n                        --         * extend approval: approval.end_date + 90 days"
                    '\n                        --     * step 2 "edit 60 days instead of 90 days":'
                    "\n                        --         * reset approval: approval.end_date - 90 days"
                    "\n                        --         * extend approval: approval.end_date + 60 days"
                    "\n                        UPDATE approvals_approval"
                    "\n                        SET end_at = end_at - (OLD.end_at - OLD.start_at) + (NEW.end_at - "
                    "NEW.start_at)\n                        WHERE id = NEW.approval_id;"
                    "\n                    END IF;\n                    RETURN NULL;\n                ",
                    hash="051cd1df6304c50f45e9564921ac2c2b5b902d6d",
                    operation="INSERT OR UPDATE OR DELETE",
                    pgid="pgtrigger_update_approval_end_at_6c264",
                    table="approvals_suspension",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="approval",
            trigger=pgtrigger.compiler.Trigger(
                name="create_employee_record_notification",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."end_at" IS DISTINCT FROM (NEW."end_at") OR OLD."start_at" IS DISTINCT FROM '
                    '(NEW."start_at"))',
                    declare="DECLARE current_employee_record_id INT;",
                    func="\n                    -- If there is an \"UPDATE\" action on 'approvals_approval' table "
                    "(Approval model object):\n                    -- create an `EmployeeRecordUpdateNotification` "
                    "object for each PROCESSED `EmployeeRecord`\n                    -- linked to this approval\n    "
                    "                IF (TG_OP = 'UPDATE') THEN\n                        -- Only for update "
                    "operations:\n                        -- iterate through processed employee records linked to "
                    "this approval\n                        FOR current_employee_record_id IN\n                     "
                    "       SELECT id FROM employee_record_employeerecord\n                            WHERE "
                    "approval_number = NEW.number\n                            AND status = 'PROCESSED'\n           "
                    "                 LOOP\n                                -- Create "
                    "`EmployeeRecordUpdateNotification` object\n                                "
                    "-- with the correct type and status\n                                "
                    "INSERT INTO employee_record_employeerecordupdatenotification\n                                  "
                    "  (employee_record_id, created_at, updated_at, status)\n                                "
                    "SELECT current_employee_record_id, NOW(), NOW(), 'NEW'\n                                "
                    "-- Update it if already created (UPSERT)\n                                -- On partial "
                    "indexes conflict, the where clause of the index must be added here\n                    "
                    "            ON conflict(employee_record_id) WHERE status = 'NEW'\n                               "
                    " DO\n                                -- Not exactly the same syntax as a standard update op\n   "
                    "                             UPDATE SET updated_at = NOW();\n                            "
                    "END LOOP;\n                    END IF;\n                    RETURN NULL;\n                ",
                    hash="fccf85ab0214d6439e66fdf5eeb3dd9c4b114561",
                    operation='UPDATE OF "start_at", "end_at"',
                    pgid="pgtrigger_create_employee_record_notification_0b059",
                    table="approvals_approval",
                    when="AFTER",
                ),
            ),
        ),
        migrations.CreateModel(
            name="ProlongationRequestDenyInformation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("IAE", "L’IAE ne correspond plus aux besoins / à la situation de la personne."),
                            (
                                "SIAE",
                                "La typologie de SIAE ne correspond plus aux besoins / à la situation de la personne.",
                            ),
                            (
                                "DURATION",
                                "La durée de prolongation demandée n’est pas adaptée à la situation du candidat.",
                            ),
                            (
                                "REASON",
                                "Le motif de prolongation demandé n’est pas adapté à la situation du candidat.",
                            ),
                        ],
                        verbose_name="motif de refus",
                    ),
                ),
                ("reason_explanation", models.TextField(verbose_name="explications du motif de refus")),
                (
                    "proposed_actions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                (
                                    "EXIT_IAE",
                                    "Accompagnement à la recherche d’emploi hors IAE et mobilisation de l’offre de "
                                    "services disponible au sein de votre structure ou celle d’un partenaire.",
                                ),
                                (
                                    "SOCIAL_PARTNER",
                                    "Orientation vers un partenaire de l’accompagnement social/professionnel.",
                                ),
                                ("OTHER", "Autre"),
                            ]
                        ),
                        blank=True,
                        null=True,
                        size=None,
                        verbose_name="actions envisagées",
                    ),
                ),
                (
                    "proposed_actions_explanation",
                    models.TextField(blank=True, verbose_name="explications des actions envisagées"),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="date de modification")),
                (
                    "request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="deny_information",
                        to="approvals.prolongationrequest",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="prolongationrequestdenyinformation",
            constraint=models.CheckConstraint(
                check=models.Q(("proposed_actions__len", 0), _negated=True),
                name="non_empty_proposed_actions",
                violation_error_message="Les actions envisagées ne peuvent pas être vide",
            ),
        ),
        migrations.CreateModel(
            name="CancelledApproval",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de début"
                    ),
                ),
                (
                    "end_at",
                    models.DateField(
                        db_index=True, default=django.utils.timezone.localdate, verbose_name="date de fin"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de création"),
                ),
                (
                    "pe_notification_status",
                    models.CharField(
                        choices=[
                            ("notification_pending", "Pending"),
                            ("notification_ready", "Ready"),
                            ("notification_success", "Success"),
                            ("notification_error", "Error"),
                            ("notification_should_retry", "Should Retry"),
                        ],
                        default="notification_pending",
                        max_length=32,
                        verbose_name="état de la notification à PE",
                    ),
                ),
                (
                    "pe_notification_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="date de notification à PE"),
                ),
                (
                    "pe_notification_endpoint",
                    models.CharField(
                        blank=True,
                        choices=[("rech_individu", "Recherche Individu"), ("maj_pass", "Mise A Jour Pass Iae")],
                        max_length=32,
                        null=True,
                        verbose_name="dernier endpoint de l'API PE contacté",
                    ),
                ),
                (
                    "pe_notification_exit_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("S000", "Aucun individu trouvé"),
                            ("S001", "Individu trouvé"),
                            ("S002", "Plusieurs individu trouvés"),
                            ("R010", "NIR Certifié absent"),
                            ("R011", "NIR Certifié incorrect"),
                            ("R020", "Nom de naissance absente"),
                            ("R021", "Nom de naissance incorrect"),
                            ("R030", "Prénom absent"),
                            ("R031", "Prénom incorrect"),
                            ("R040", "Date de naissance absente"),
                            ("R041", "Date de naissance incorrecte"),
                            ("R042", "Date de naissance invalide"),
                            ("S000", "Suivi délégué installé"),
                            ("S001", "SD non installé : Identifiant national individu obligatoire"),
                            ("S002", "SD non installé : Code traitement obligatoire"),
                            ("S003", "SD non installé : Code traitement erroné"),
                            ("S004", "SD non installé : Erreur lors de la recherche de la TDV référente"),
                            ("S005", "SD non installé : Identifiant régional de l’individu obligatoire"),
                            ("S006", "SD non installé : Code Pôle Emploi de l’individu obligatoire"),
                            ("S007", "SD non installé : Individu inexistant en base"),
                            ("S008", "SD non installé : Individu radié"),
                            ("S009", "SD non installé : Inscription incomplète de l’individu "),
                            ("S010", "SD non installé : PEC de l’individu inexistante en base"),
                            ("S011", "SD non installé : Demande d’emploi de l’individu inexistante en base"),
                            ("S012", "SD non installé : Suivi principal de l’individu inexistant en base"),
                            ("S013", "SD non installé : Référent suivi principal non renseigné en base"),
                            ("S014", "SD non installé : Structure suivi principal non renseignée en base"),
                            ("S015", "SD non installé : Suivi délégué déjà en cours"),
                            ("S016", "SD non installé : Problème lors de la recherche du dernier suivi délégué"),
                            ("S017", "SD non installé : Type de suivi de l’individu non EDS»"),
                            ("S018", "SD non installé : Type de SIAE obligatoire"),
                            ("S019", "SD non installé : Type de SIAE erroné"),
                            ("S020", "SD non installé : Statut de la réponse obligatoire"),
                            ("S021", "SD non installé : Statut de la réponse erroné"),
                            ("S022", "SD non installé : Refus du PASS IAE"),
                            ("S023", "SD non installé : Date de début du PASS IAE obligatoire"),
                            ("S024", "SD non installé : Date de début du PASS IAE dans le futur"),
                            ("S025", "SD non installé : Date de fin du PASS IAE obligatoire"),
                            ("S026", "SD non installé : Date fin PASS IAE non strictement sup à date début"),
                            ("S027", "SD non installé : Numéro du PASS IAE obligatoire"),
                            ("S028", "SD non installé : Origine de la candidature obligatoire"),
                            ("S029", "SD non installé : Origine de la candidature erronée"),
                            ("S031", "SD non installé : Numéro SIRET SIAE obligatoire"),
                            ("S032", "SD non installé : Organisme générique inexistant dans réf partenaire"),
                            ("S033", "SD non installé : Conseiller prescripteur inexistant en base"),
                            ("S034", "SD non installé : Structure prescripteur inexistante en base"),
                            ("S035", "SD non installé : Type de structure du prescripteur erroné"),
                            ("S036", "SD non installé : Pas de lien entre structure prescripteur et partenaire"),
                            ("S037", "SD non installé : Organisme générique inexistant en base"),
                            ("S038", "SD non installé : Correspondant du partenaire inexistant en base"),
                            ("S039", "SD non installé : Structure correspondant inexistante en base"),
                            ("S040", "SD non installé : Structure correspondant inexistante dans réf des struct"),
                            ("S041", "SD non installé : Structure de suivi non autorisée"),
                            ("S042", "SD non installé : Adresse du correspondant inexistante en base"),
                            ("S043", "SD non installé : Commune du correspondant inexistante en base"),
                            ("E_ERR_D98_D_PR_PROBLEME_TECHNIQUE", "Problème technique inconnu"),
                            ("E_ERR_EX042_PROBLEME_DECHIFFREMEMENT", "Erreur lors du déchiffrement du NIR chiffré"),
                        ],
                        max_length=64,
                        null=True,
                        verbose_name="dernier code de sortie constaté",
                    ),
                ),
                (
                    "number",
                    models.CharField(
                        help_text="12 caractères alphanumériques.",
                        max_length=12,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-zA-Z]*$", "Seuls les caractères alphanumériques sont autorisés."
                            ),
                            django.core.validators.MinLengthValidator(12),
                        ],
                        verbose_name="numéro",
                    ),
                ),
                ("user_last_name", models.CharField(verbose_name="nom demandeur d'emploi")),
                ("user_first_name", models.CharField(verbose_name="prénom demandeur d'emploi")),
                ("user_nir", models.CharField(blank=True, verbose_name="NIR demandeur d'emploi")),
                (
                    "user_birthdate",
                    models.DateField(blank=True, null=True, verbose_name="date de naissance demandeur d'emploi"),
                ),
                (
                    "user_id_national_pe",
                    models.CharField(blank=True, null=True, verbose_name="identifiant national PE"),
                ),
                ("origin_siae_siret", models.CharField(max_length=14, verbose_name="siret siae")),
                (
                    "origin_siae_kind",
                    models.CharField(
                        choices=[
                            ("ACI", "Atelier chantier d'insertion"),
                            ("AI", "Association intermédiaire"),
                            ("EA", "Entreprise adaptée"),
                            ("EATT", "Entreprise adaptée de travail temporaire"),
                            ("EI", "Entreprise d'insertion"),
                            ("EITI", "Entreprise d'insertion par le travail indépendant"),
                            ("ETTI", "Entreprise de travail temporaire d'insertion"),
                            ("GEIQ", "Groupement d'employeurs pour l'insertion et la qualification"),
                            ("OPCS", "Organisation porteuse de la clause sociale"),
                        ],
                        verbose_name="type siae",
                    ),
                ),
                (
                    "origin_sender_kind",
                    models.CharField(
                        choices=[
                            ("job_seeker", "Demandeur d'emploi"),
                            ("prescriber", "Prescripteur"),
                            ("employer", "Employeur (SIAE)"),
                        ],
                        verbose_name="origine de la candidature",
                    ),
                ),
                (
                    "origin_prescriber_organization_kind",
                    models.CharField(
                        choices=[
                            ("CAP_EMPLOI", "Cap emploi"),
                            ("ML", "Mission locale"),
                            ("OIL", "Opérateur d'intermédiation locative"),
                            (
                                "ODC",
                                "Organisation délégataire d'un Conseil Départemental (Orientation et suivi des BRSA)",
                            ),
                            ("PENSION", "Pension de famille / résidence accueil"),
                            ("PE", "France Travail"),
                            ("RS_FJT", "Résidence sociale / FJT - Foyer de Jeunes Travailleurs"),
                            ("PREVENTION", "Service ou club de prévention"),
                            ("DEPT", "Service social du conseil départemental"),
                            ("AFPA", "AFPA - Agence nationale pour la formation professionnelle des adultes"),
                            ("ASE", "ASE - Aide sociale à l'enfance"),
                            (
                                "CAARUD",
                                "CAARUD - Centre d'accueil et d'accompagnement à la réduction de risques pour usagers "
                                "de drogues",
                            ),
                            ("CADA", "CADA - Centre d'accueil de demandeurs d'asile"),
                            ("CAF", "CAF - Caisse d'allocations familiales"),
                            ("CAVA", "CAVA - Centre d'adaptation à la vie active"),
                            (
                                "CCAS",
                                "CCAS - Centre communal d'action sociale ou centre intercommunal d'action sociale",
                            ),
                            ("CHRS", "CHRS - Centre d'hébergement et de réinsertion sociale"),
                            ("CHU", "CHU - Centre d'hébergement d'urgence"),
                            ("CIDFF", "CIDFF - Centre d'information sur les droits des femmes et des familles"),
                            ("CPH", "CPH - Centre provisoire d'hébergement"),
                            ("CSAPA", "CSAPA - Centre de soins, d'accompagnement et de prévention en addictologie"),
                            ("E2C", "E2C - École de la deuxième chance"),
                            ("EPIDE", "EPIDE - Établissement pour l'insertion dans l'emploi"),
                            ("HUDA", "HUDA - Hébergement d'urgence pour demandeurs d'asile"),
                            ("MSA", "MSA - Mutualité Sociale Agricole"),
                            (
                                "OACAS",
                                "OACAS - Structure porteuse d'un agrément national organisme d'accueil communautaire "
                                "et d'activité solidaire",
                            ),
                            ("PIJ_BIJ", "PIJ-BIJ - Point/Bureau information jeunesse"),
                            ("PJJ", "PJJ - Protection judiciaire de la jeunesse"),
                            ("PLIE", "PLIE - Plan local pour l'insertion et l'emploi"),
                            ("SPIP", "SPIP - Service pénitentiaire d'insertion et de probation"),
                            ("Autre", "Autre"),
                        ],
                        verbose_name="typologie prescripteur",
                    ),
                ),
            ],
            options={
                "verbose_name": "PASS IAE annulé",
                "verbose_name_plural": "PASS IAE annulés",
                "ordering": ["-created_at"],
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="approval",
            trigger=pgtrigger.compiler.Trigger(
                name="plan_pe_notification_on_date_updates",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."end_at" IS DISTINCT FROM (NEW."end_at") OR OLD."start_at" IS DISTINCT FROM '
                    '(NEW."start_at"))',
                    func="\n                    -- If there is an \"UPDATE\" action on 'approvals_approval' table "
                    "(Approval model object)\n                    -- and dates are modified then reset "
                    "pe_notification_status field to PENDING status\n                    IF (TG_OP = 'UPDATE') THEN\n "
                    "                       IF NEW.pe_notification_status IS DISTINCT FROM OLD.pe_notification_status "
                    "THEN\n                            RAISE EXCEPTION 'Modification de pe_notification_status en "
                    "même temps que les dates';\n                        END IF;\n                        "
                    "NEW.pe_notification_status := 'notification_pending';\n                    END IF;\n          "
                    "          RETURN NEW;\n                ",
                    hash="87e0995e8fd74e059c551a5f0815b74882aa0fd2",
                    operation='UPDATE OF "start_at", "end_at"',
                    pgid="pgtrigger_plan_pe_notification_on_date_updates_dfc8e",
                    table="approvals_approval",
                    when="BEFORE",
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="cancelledapproval",
            constraint=models.CheckConstraint(
                check=models.Q(("start_at__lt", models.F("end_at"))),
                name="approvals_cancelledapproval_start_before_end",
            ),
        ),
        migrations.AddConstraint(
            model_name="approval",
            constraint=models.CheckConstraint(
                check=models.Q(("start_at__lt", models.F("end_at"))), name="approvals_approval_start_before_end"
            ),
        ),
    ]
