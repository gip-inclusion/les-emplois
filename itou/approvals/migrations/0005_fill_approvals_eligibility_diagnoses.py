# Generated by Django 4.1.5 on 2023-01-30 08:35
from django.db import migrations
from django.db.models import Count, Q

from itou.approvals.enums import Origin
from itou.job_applications.models import JobApplicationWorkflow


def _fill_approval_eligibility_diagnoses(apps, schema_editor):
    Approval = apps.get_model("approvals", "Approval")
    approvals_qs = Approval.objects.filter(
        origin__in=[Origin.ADMIN, Origin.DEFAULT],
        eligibility_diagnosis=None,
    )

    approvals_with_job_app_count_qs = approvals_qs.annotate(
        accepted_job_app_count=Count(
            "jobapplication",
            filter=Q(
                jobapplication__state=JobApplicationWorkflow.STATE_ACCEPTED,
                jobapplication__eligibility_diagnosis__isnull=False,
            ),
        )
    )

    # Approvals with only one accepted job application with an eligibility diagnosis linked
    for approval in approvals_with_job_app_count_qs.filter(accepted_job_app_count=1).prefetch_related(
        "jobapplication_set__eligibility_diagnosis"
    ):
        accepted_job_app_with_diag = [
            ja
            for ja in approval.jobapplication_set.all()
            if ja.state == JobApplicationWorkflow.STATE_ACCEPTED and ja.eligibility_diagnosis is not None
        ]
        approval.eligibility_diagnosis = accepted_job_app_with_diag[0].eligibility_diagnosis
        approval.save()

    # Approvals with MORE than one accepted job application but only one eligibility diagnosis linked
    for approval in approvals_with_job_app_count_qs.filter(accepted_job_app_count__gte=1).prefetch_related(
        "jobapplication_set__eligibility_diagnosis"
    ):
        accepted_job_app_with_diag = [
            ja
            for ja in approval.jobapplication_set.all()
            if ja.state == JobApplicationWorkflow.STATE_ACCEPTED
            and ja.eligibility_diagnosis is not None
            and ja.eligibility_diagnosis.created_at <= approval.created_at < ja.eligibility_diagnosis.expires_at
        ]
        eligibility_diagnoses = list({ja.eligibility_diagnosis for ja in accepted_job_app_with_diag})
        if len(eligibility_diagnoses) == 1:
            approval.eligibility_diagnosis = eligibility_diagnoses[0]
            approval.save()

    # remains ~300 approvals -> manually
    print(f"Remaining approvals to handle : {approvals_qs.filter(eligibility_diagnosis=None).count()}")


class Migration(migrations.Migration):
    dependencies = [
        ("approvals", "0004_approval_eligibility_diagnosis"),
        ("job_applications", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(_fill_approval_eligibility_diagnoses, migrations.RunPython.noop, elidable=True),
    ]
