# Generated by Django 5.1.9 on 2025-05-26 20:34

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("companies", "0001_initial"),
        ("files", "0001_initial"),
        ("institutions", "0008_institution_automatic_geocoding_update"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AssessmentCampaign",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("year", models.IntegerField(unique=True, verbose_name="année")),
                (
                    "submission_deadline",
                    models.DateField(
                        verbose_name="date limite de transmission du bilan d’exécution",
                    ),
                ),
                ("review_deadline", models.DateField(verbose_name="date limite de contrôle du bilan d’exécution")),
            ],
            options={
                "verbose_name": "campagne de bilan d’exécution",
                "verbose_name_plural": "campagnes de bilan d’exécution",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("review_deadline__gte", models.F("submission_deadline"))),
                        name="geiq_review_after_submission",
                        violation_error_message=(
                            "Impossible d'avoir une date de contrôle antérieure à la date de transmission"
                        ),
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="créé le")),
                ("label_geiq_id", models.IntegerField(verbose_name="identifiant label du GEIQ principal")),
                ("label_geiq_name", models.CharField(verbose_name="nom du GEIQ principal dans label")),
                (
                    "with_main_geiq",
                    models.BooleanField(default=False, verbose_name="avec les contrats du GEIQ principal"),
                ),
                ("label_antennas", models.JSONField(verbose_name="antennes label concernées par le bilan")),
                ("label_rates", models.JSONField(null=True, verbose_name="taux récupérés sur l'API label")),
                ("employee_nb", models.PositiveSmallIntegerField(default=0, verbose_name="nombre d'employés")),
                (
                    "contracts_synced_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="données de contrats label récupérées le"
                    ),
                ),
                (
                    "contracts_selection_validated_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="sélection des contrats validée le"),
                ),
                ("geiq_comment", models.TextField(blank=True, verbose_name="commentaire général du GEIQ")),
                ("submitted_at", models.DateTimeField(blank=True, null=True, verbose_name="transmis le")),
                ("review_comment", models.TextField(blank=True, verbose_name="commentaire accompagnant la décision")),
                ("convention_amount", models.PositiveIntegerField(default=0, verbose_name="montant conventionné")),
                ("granted_amount", models.PositiveIntegerField(default=0, verbose_name="montant total accordé")),
                ("advance_amount", models.PositiveIntegerField(default=0, verbose_name="montant déjà versé")),
                (
                    "decision_validated_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="décision saisie le"),
                ),
                (
                    "grants_selection_validated_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="aides accordées validées le"),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True, verbose_name="contrôlé le")),
                (
                    "final_reviewed_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="contrôlé le (DREETS)"),
                ),
                (
                    "action_financial_assessment_file",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="files.file",
                        verbose_name="bilan financier de l’action",
                    ),
                ),
                (
                    "companies",
                    models.ManyToManyField(
                        limit_choices_to={"kind": "GEIQ"},
                        related_name="assessments",
                        to="companies.company",
                        verbose_name="entreprises",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="created_assessments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="créé par",
                    ),
                ),
                (
                    "final_reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="final_reviewed_assessments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="contrôlé par (DREETS)",
                    ),
                ),
                (
                    "final_reviewed_by_institution",
                    models.ForeignKey(
                        limit_choices_to={"kind__in": ["DDETS GEIQ", "DREETS GEIQ"]},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="final_reviewed_assessments",
                        to="institutions.institution",
                        verbose_name="institution ayant effectué le contrôle (DREETS)",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="reviewed_assessments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="contrôlé par",
                    ),
                ),
                (
                    "reviewed_by_institution",
                    models.ForeignKey(
                        limit_choices_to={"kind__in": ["DDETS GEIQ", "DREETS GEIQ"]},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reviewed_assessments",
                        to="institutions.institution",
                        verbose_name="institution ayant effectué le contrôle",
                    ),
                ),
                (
                    "structure_financial_assessment_file",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="files.file",
                        verbose_name="bilan financier de la structure",
                    ),
                ),
                (
                    "submitted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="submitted_assessments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="transmis par",
                    ),
                ),
                (
                    "summary_document_file",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="files.file",
                        verbose_name="document de synthèse généré par label",
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assessments",
                        to="geiq_assessments.assessmentcampaign",
                    ),
                ),
            ],
            options={
                "verbose_name": "bilan d’exécution",
                "verbose_name_plural": "bilans d’exécution",
            },
        ),
        migrations.CreateModel(
            name="AssessmentInstitutionLink",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("with_convention", models.BooleanField(default=False, verbose_name="avec une convention")),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="institution_links",
                        to="geiq_assessments.assessment",
                        verbose_name="bilan lié",
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        limit_choices_to={"kind__in": ["DDETS GEIQ", "DREETS GEIQ"]},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assessment_links",
                        to="institutions.institution",
                        verbose_name="institution liée",
                    ),
                ),
            ],
            options={
                "verbose_name": "institution liée",
                "verbose_name_plural": "institutions liées",
            },
        ),
        migrations.AddField(
            model_name="assessment",
            name="institutions",
            field=models.ManyToManyField(
                limit_choices_to={"kind__in": ["DDETS GEIQ", "DREETS GEIQ"]},
                related_name="implementation_assessments",
                through="geiq_assessments.AssessmentInstitutionLink",
                through_fields=("assessment", "institution"),
                to="institutions.institution",
                verbose_name="institutions",
            ),
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("label_id", models.IntegerField(verbose_name="ID label")),
                ("last_name", models.CharField(verbose_name="nom de famille")),
                ("first_name", models.CharField(verbose_name="prénom")),
                ("birthdate", models.DateField(verbose_name="date de naissance")),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Monsieur"), ("MME", "Madame")],
                        default="",
                        max_length=3,
                        verbose_name="civilité",
                    ),
                ),
                ("allowance_amount", models.IntegerField(verbose_name="aide potentielle")),
                ("other_data", models.JSONField(verbose_name="autres données")),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="employees",
                        to="geiq_assessments.assessment",
                        verbose_name="bilan d’exécution",
                    ),
                ),
            ],
            options={
                "verbose_name": "employé",
            },
        ),
        migrations.CreateModel(
            name="EmployeeContract",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("label_id", models.IntegerField(verbose_name="ID label")),
                ("start_at", models.DateField(verbose_name="date de début")),
                ("planned_end_at", models.DateField(verbose_name="date de fin prévisionnelle")),
                ("end_at", models.DateField(null=True, verbose_name="date de fin")),
                (
                    "nb_days_in_campaign_year",
                    models.PositiveSmallIntegerField(verbose_name="nombre de jours dans l'année du bilan"),
                ),
                ("allowance_requested", models.BooleanField(verbose_name="aide demandée par le GEIQ")),
                ("allowance_granted", models.BooleanField(verbose_name="aide acceptée par l'institution")),
                ("other_data", models.JSONField(verbose_name="autres données")),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contracts",
                        to="geiq_assessments.employee",
                        verbose_name="salarié",
                    ),
                ),
            ],
            options={
                "verbose_name": "contrat",
            },
        ),
        migrations.CreateModel(
            name="EmployeePrequalification",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("label_id", models.IntegerField(verbose_name="ID label")),
                ("start_at", models.DateField(verbose_name="date de début")),
                ("end_at", models.DateField(verbose_name="date de fin")),
                ("other_data", models.JSONField(verbose_name="autres données")),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prequalifications",
                        to="geiq_assessments.employee",
                        verbose_name="salarié",
                    ),
                ),
            ],
            options={
                "verbose_name": "préqualification",
            },
        ),
        migrations.CreateModel(
            name="LabelInfos",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("data", models.JSONField(verbose_name="données label")),
                ("synced_at", models.DateTimeField(auto_now=True, verbose_name="données label récupérées le")),
                (
                    "campaign",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="label_infos",
                        to="geiq_assessments.assessmentcampaign",
                    ),
                ),
            ],
            options={
                "verbose_name": "liste des GEIQ récupérée de label",
                "verbose_name_plural": "listes des GEIQ récupérées de label",
            },
        ),
        migrations.AddConstraint(
            model_name="assessmentinstitutionlink",
            constraint=models.UniqueConstraint(
                fields=("assessment", "institution"), name="assessment_institution_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("contracts_synced_at__isnull", True),
                    models.Q(("contracts_synced_at__gte", models.F("created_at")), ("created_at__isnull", False)),
                    _connector="OR",
                ),
                name="geiq_assessment_created_before_contracts_synced",
                violation_error_message=(
                    "Impossible d'avoir une date de synchronisation antérieure à la date de création"
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("contracts_selection_validated_at__isnull", True),
                    models.Q(
                        ("contracts_selection_validated_at__gte", models.F("contracts_synced_at")),
                        ("contracts_synced_at__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_contracts_synced_before_validation",
                violation_error_message=(
                    "Impossible d'avoir une date de validation de la sélection de contrats présentés antérieure à "
                    "la date de synchronisation"
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("submitted_at__isnull", True),
                    models.Q(
                        ("contracts_selection_validated_at__isnull", False),
                        ("submitted_at__gte", models.F("contracts_selection_validated_at")),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_contracts_validated_before_submission",
                violation_error_message=(
                    "Impossible d'avoir une date de soumission antérieure à la date de validation de la sélection "
                    "de contrats présentés"
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("grants_selection_validated_at__isnull", True),
                    models.Q(
                        ("grants_selection_validated_at__gte", models.F("submitted_at")),
                        ("submitted_at__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_submission_before_grants_validated",
                violation_error_message=(
                    "Impossible d'avoir une date de validation de sélection des aides accordées antérieure à la date "
                    "de soumission"
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("decision_validated_at__isnull", True),
                    models.Q(
                        ("decision_validated_at__gte", models.F("grants_selection_validated_at")),
                        ("grants_selection_validated_at__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_grants_validated_before_decision",
                violation_error_message=(
                    "Impossible d'avoir une date de décision antérieure à la date de validation de la sélection "
                    "des aides accordées"
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("reviewed_at__isnull", True),
                    models.Q(
                        ("decision_validated_at__isnull", False),
                        ("reviewed_at__gte", models.F("decision_validated_at")),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_decision_before_review",
                violation_error_message="Impossible d'avoir une date de contrôle antérieure à la date de décision",
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("final_reviewed_at__isnull", True),
                    models.Q(("final_reviewed_at__gte", models.F("reviewed_at")), ("reviewed_at__isnull", False)),
                    _connector="OR",
                ),
                name="geiq_assessment_review_before_final_review",
                violation_error_message=(
                    "Impossible d'avoir une date de contrôle DREETS antérieure à la date de contrôle"
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("submitted_at__isnull", True),
                    models.Q(
                        ("submitted_at__isnull", False),
                        ("submitted_by__isnull", False),
                        models.Q(
                            ("action_financial_assessment_file", None),
                            ("geiq_comment", ""),
                            ("structure_financial_assessment_file", None),
                            ("summary_document_file", None),
                            _negated=True,
                        ),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_full_or_no_submission",
                violation_error_message="Impossible d'avoir un envoi partiel",
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("reviewed_at__isnull", True),
                    models.Q(
                        ("reviewed_at__isnull", False),
                        ("reviewed_by__isnull", False),
                        ("reviewed_by_institution__isnull", False),
                        models.Q(("review_comment", ""), _negated=True),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_full_or_no_review",
                violation_error_message="Impossible d'avoir un contrôle partiel",
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("final_reviewed_at__isnull", True),
                    models.Q(
                        ("final_reviewed_at__isnull", False),
                        ("final_reviewed_by__isnull", False),
                        ("final_reviewed_by_institution__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="geiq_assessment_full_or_no_final_review",
                violation_error_message="Impossible d'avoir un contrôle DREETS partiel",
            ),
        ),
        migrations.AddConstraint(
            model_name="assessment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("with_main_geiq", True)),
                fields=("campaign", "label_geiq_id"),
                name="geiq_assessment_unique_label_geiq_id_with_main_geiq",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="employee",
            unique_together={("assessment", "label_id")},
        ),
        migrations.AddConstraint(
            model_name="employeecontract",
            constraint=models.CheckConstraint(
                condition=models.Q(("allowance_granted", True), ("allowance_requested", False), _negated=True),
                name="geiq_allowance_requested_or_not_granted",
                violation_error_message="Impossible d'accorder une aide non-sollicitée",
            ),
        ),
    ]
