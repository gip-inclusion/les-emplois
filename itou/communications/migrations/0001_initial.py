# Generated by Django 5.2.4 on 2025-07-16 05:30

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models

import itou.utils.storage.s3


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("files", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="NotificationRecord",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("notification_class", models.CharField(unique=True)),
                ("name", models.CharField()),
                ("category", models.CharField()),
                ("can_be_disabled", models.BooleanField()),
                ("is_obsolete", models.BooleanField(db_index=True, default=False)),
            ],
            options={
                "ordering": ["category", "name"],
                "base_manager_name": "include_obsolete",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("category", ""), ("name", ""), _connector="OR", _negated=True),
                        name="notificationrecord_category_and_name_required",
                    )
                ],
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("include_obsolete", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="NotificationSettings",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("structure_pk", models.PositiveIntegerField(null=True)),
                (
                    "structure_type",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.contenttype"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "base_manager_name": "objects",
                "constraints": [
                    models.UniqueConstraint(
                        models.F("user"),
                        condition=models.Q(("structure_pk__isnull", True)),
                        name="unique_settings_per_individual_user",
                    ),
                    models.UniqueConstraint(
                        models.F("user"),
                        models.F("structure_type"),
                        models.F("structure_pk"),
                        condition=models.Q(("structure_pk__isnull", False)),
                        name="unique_settings_per_organizational_user",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DisabledNotification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("disabled_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notification_record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="communications.notificationrecord"
                    ),
                ),
                (
                    "settings",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="communications.notificationsettings"
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        models.F("notification_record"),
                        models.F("settings"),
                        name="unique_notificationrecord_per_settings",
                    ),
                ]
            },
        ),
        migrations.AddField(
            model_name="notificationsettings",
            name="disabled_notifications",
            field=models.ManyToManyField(
                related_name="+", through="communications.DisabledNotification", to="communications.notificationrecord"
            ),
        ),
        migrations.CreateModel(
            name="AnnouncementCampaign",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "max_items",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="nombre d'articles affiché",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="le mois des nouveautés. Automatiquement fixé au premier du mois saisi",
                        unique=True,
                        verbose_name="mois concerné",
                    ),
                ),
                (
                    "live",
                    models.BooleanField(
                        default=True, help_text="les modifications sont toujours possible", verbose_name="prêt"
                    ),
                ),
            ],
            options={
                "verbose_name": "campagne d'annonce",
                "ordering": ["-start_date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("max_items__gte", 1), ("max_items__lte", 10)), name="max_items_range"
                    ),
                    models.CheckConstraint(condition=models.Q(("start_date__day", 1)), name="start_on_month"),
                ],
            },
        ),
        migrations.CreateModel(
            name="AnnouncementItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="le plus bas le valeur, le plus haut dans le fil des articles",
                        verbose_name="priorité",
                    ),
                ),
                ("title", models.TextField(help_text="résumé de nouveauté", verbose_name="titre")),
                (
                    "description",
                    models.TextField(help_text="détail du nouveauté ; le contenu", verbose_name="description"),
                ),
                (
                    "user_kind_tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("job_seeker", "candidat"),
                                ("prescriber", "prescripteur"),
                                ("employer", "employeur"),
                                ("labor_inspector", "inspecteur du travail"),
                                ("itou_staff", "administrateur"),
                            ]
                        ),
                        default=list,
                        size=None,
                        verbose_name="utilisateurs concernés",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        height_field="image_height",
                        help_text="1200x600 recommandé",
                        storage=itou.utils.storage.s3.PublicStorage(),
                        upload_to="news-images/",
                        verbose_name="capture d'écran",
                        width_field="image_width",
                    ),
                ),
                ("image_height", models.PositiveIntegerField(null=True, verbose_name="hauteur de l’image")),
                ("image_width", models.PositiveIntegerField(null=True, verbose_name="largeur de l’image")),
                (
                    "image_alt_text",
                    models.TextField(
                        blank=True,
                        help_text="la description est importante pour les utilisateurs de lecteurs d'écran, et "
                        "lorsque l'image ne se télécharge pas",
                        verbose_name="description de l'image",
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        blank=True,
                        help_text="URL d'une page où l'utilisateur peut obtenir plus d'informations sur l'article",
                        verbose_name="lien externe",
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="communications.announcementcampaign",
                        verbose_name="campagne",
                    ),
                ),
                (
                    "image_storage",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="files.file"
                    ),
                ),
            ],
            options={
                "verbose_name": "article d'annonce",
                "ordering": ["-campaign__start_date", "priority", "pk"],
                "unique_together": {("campaign", "priority")},
            },
        ),
    ]
