# Generated by Django 5.1.7 on 2025-04-02 19:14

from collections import Counter

from django.conf import settings
from django.db import migrations


def _fix_duplicates(apps, schema_editor):
    FollowUpGroupMembership = apps.get_model("gps", "FollowUpGroupMembership")
    to_fix = [
        key
        for key, count in Counter(FollowUpGroupMembership.objects.values_list("follow_up_group", "member")).items()
        if count > 1
    ]
    for follow_up_group_id, member_id in to_fix:
        membership_0, membership_1 = FollowUpGroupMembership.objects.filter(
            follow_up_group_id=follow_up_group_id, member_id=member_id
        ).order_by("created_at")
        membership_0.is_referent = membership_0.is_referent or membership_1.is_referent
        membership_0.is_referent_certified = membership_0.is_referent_certified or membership_1.is_referent_certified
        membership_0.is_active = membership_0.is_active or membership_1.is_active
        membership_0.last_contact_at = max(membership_0.last_contact_at, membership_1.last_contact_at)
        if membership_0.ended_at or membership_1.ended_at:
            membership_0.ended_at = max(filter(bool, [membership_0.ended_at or membership_1.ended_at]))
        membership_0.updated_at = max(membership_0.updated_at, membership_1.updated_at)
        membership_0.can_view_personal_information = (
            membership_0.can_view_personal_information or membership_1.can_view_personal_information
        )

        membership_0.reason = f"{membership_0.reason} {membership_1.reason}".strip()
        membership_0.end_reason = membership_0.end_reason or membership_1.end_reason
        membership_0.save()
        membership_1.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("gps", "0021_followupgroupmembership_is_referent_certified"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(_fix_duplicates, migrations.RunPython.noop, elidable=True),
        migrations.AlterUniqueTogether(
            name="followupgroupmembership",
            unique_together={("follow_up_group", "member")},
        ),
    ]
