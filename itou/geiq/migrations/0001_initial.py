# Generated by Django 5.0.6 on 2024-06-13 13:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("companies", "0002_fix_job_app_contract_type_enum"),
        ("files", "0001_initial"),
        ("institutions", "0002_alter_institution_kind"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Employee",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("label_id", models.IntegerField(verbose_name="ID LABEL")),
                ("last_name", models.CharField(verbose_name="nom de famille")),
                ("first_name", models.CharField(verbose_name="prénom")),
                ("birthdate", models.DateField(verbose_name="date de naissance")),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Monsieur"), ("MME", "Madame")],
                        default="",
                        max_length=3,
                        verbose_name="civilité",
                    ),
                ),
                ("annex1_nb", models.IntegerField(verbose_name="nombre de critères d'éligibilité de l'annexe 1")),
                (
                    "annex2_level1_nb",
                    models.IntegerField(verbose_name="nombre de critères d'éligibilité de l'annexe 2 niveau 1"),
                ),
                (
                    "annex2_level2_nb",
                    models.IntegerField(verbose_name="nombre de critères d'éligibilité de l'annexe 2 niveau 2"),
                ),
                ("allowance_amount", models.IntegerField(verbose_name="aide potentielle")),
                ("support_days_nb", models.PositiveIntegerField(verbose_name="nombre de jours d’accompagnement")),
                ("other_data", models.JSONField(verbose_name="autres données")),
            ],
            options={
                "verbose_name": "employé",
            },
        ),
        migrations.CreateModel(
            name="ImplementationAssessmentCampaign",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("year", models.IntegerField(unique=True, verbose_name="année")),
                (
                    "submission_deadline",
                    models.DateField(verbose_name="date limite de transmission du bilan d’exécution"),
                ),
                ("review_deadline", models.DateField(verbose_name="date limite de contrôle du bilan d’exécution")),
            ],
            options={
                "verbose_name": "campagne de bilan d’exécution",
                "verbose_name_plural": "campagnes de bilan d’exécution",
            },
        ),
        migrations.CreateModel(
            name="EmployeeContract",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("label_id", models.IntegerField(verbose_name="ID LABEL")),
                ("start_at", models.DateField(verbose_name="date de début")),
                ("planned_end_at", models.DateField(verbose_name="date de fin prévisionnelle")),
                ("end_at", models.DateField(null=True, verbose_name="date de fin")),
                ("other_data", models.JSONField(verbose_name="autres données")),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="contracts", to="geiq.employee"
                    ),
                ),
            ],
            options={
                "verbose_name": "contrat",
            },
        ),
        migrations.CreateModel(
            name="EmployeePrequalification",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("label_id", models.IntegerField(verbose_name="ID LABEL")),
                ("start_at", models.DateField(verbose_name="date de début")),
                ("end_at", models.DateField(verbose_name="date de fin")),
                ("other_data", models.JSONField(verbose_name="autres données")),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prequalifications",
                        to="geiq.employee",
                    ),
                ),
            ],
            options={
                "verbose_name": "préqualification",
            },
        ),
        migrations.CreateModel(
            name="ImplementationAssessment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("label_id", models.IntegerField(verbose_name="ID LABEL")),
                (
                    "last_synced_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="dernière synchronisation à"),
                ),
                ("other_data", models.JSONField(verbose_name="autres données")),
                ("submitted_at", models.DateTimeField(blank=True, null=True, verbose_name="transmis le")),
                ("reviewed_at", models.DateTimeField(blank=True, null=True, verbose_name="date de contrôle")),
                (
                    "review_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACCEPTED", "La totalité de l’aide conventionnée est accordée"),
                            ("PARTIAL_ACCEPTED", "Le solde de l’aide est partiellement accordé"),
                            ("REMAINDER_REFUSED", "Le solde de l’aide est refusé"),
                            (
                                "PARTIAL_REFUND",
                                "Le solde de l’aide est refusé et une demande de remboursement partiel sera demandée",
                            ),
                            (
                                "FULL_REFUND",
                                "Le solde de l’aide est refusé et une demande de remboursement total sera demandée",
                            ),
                        ],
                        null=True,
                        verbose_name="résultat du contrôle",
                    ),
                ),
                ("review_comment", models.TextField(blank=True, verbose_name="commentaire")),
                (
                    "activity_report_file",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="files.file",
                        verbose_name="document de synthèse",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="implementation_assessments",
                        to="companies.company",
                    ),
                ),
                (
                    "review_institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reviewed_geiq_assessment_set",
                        to="institutions.institution",
                        verbose_name="institution responsable du contrôle",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_geiq_assessment_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="contrôlé par",
                    ),
                ),
                (
                    "submitted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="submitted_geiq_assessment_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="transmis par",
                    ),
                ),
            ],
            options={
                "verbose_name": "bilan d’exécution",
                "verbose_name_plural": "bilans d’exécution",
            },
        ),
        migrations.AddField(
            model_name="employee",
            name="assessment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="employees",
                to="geiq.implementationassessment",
            ),
        ),
        migrations.AddConstraint(
            model_name="implementationassessmentcampaign",
            constraint=models.CheckConstraint(
                check=models.Q(("review_deadline__gte", models.F("submission_deadline"))),
                name="review_after_submission",
                violation_error_message="Impossible d'avoir une date de contrôle antérieure à la date de transmission",
            ),
        ),
        migrations.AddField(
            model_name="implementationassessment",
            name="campaign",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="implementation_assessments",
                to="geiq.implementationassessmentcampaign",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="employee",
            unique_together={("assessment", "label_id")},
        ),
        migrations.AddConstraint(
            model_name="implementationassessment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("submitted_at__isnull", True),
                    models.Q(
                        ("activity_report_file__isnull", False),
                        ("last_synced_at__isnull", False),
                        ("submitted_at__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="full_submission_or_no_submission",
                violation_error_message="Impossible d'avoir un envoi partiel",
            ),
        ),
        migrations.AddConstraint(
            model_name="implementationassessment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("reviewed_at__isnull", True),
                    models.Q(("reviewed_at__gte", models.F("submitted_at")), ("submitted_at__isnull", False)),
                    _connector="OR",
                ),
                name="reviewed_at_only_after_submitted_at",
                violation_error_message=(
                    "Impossible d'avoir une date de contrôle sans une date de soumission antérieure"
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="implementationassessment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("review_comment", ""),
                        ("review_institution__isnull", True),
                        ("review_state__isnull", True),
                        ("reviewed_at__isnull", True),
                    ),
                    models.Q(
                        ("review_institution__isnull", False),
                        ("review_state__isnull", False),
                        ("reviewed_at__isnull", False),
                        models.Q(("review_comment", ""), _negated=True),
                    ),
                    _connector="OR",
                ),
                name="full_review_or_no_review",
                violation_error_message="Impossible d'avoir un contrôle partiel",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="implementationassessment",
            unique_together={("campaign", "company"), ("campaign", "label_id")},
        ),
    ]
