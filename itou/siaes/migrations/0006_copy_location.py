# Generated by Django 4.2.3 on 2023-08-01 11:50

import csv
from pathlib import Path

from django.conf import settings
from django.db import migrations
from django.db.models import OuterRef, Subquery

from itou.asp.exceptions import UnknownCommuneError


def forwards(apps, schema_editor):
    SiaeJobDescription = apps.get_model("siaes", "SiaeJobDescription")
    City = apps.get_model("cities", "City")
    Commune = apps.get_model("asp", "Commune")
    SiaeMembership = apps.get_model("siaes", "SiaeMembership")

    # code_insee is unique
    # 35 094 rows as of August 3rd.
    problematic_updates = []
    for pk, code_insee in City.objects.values_list("pk", "code_insee"):
        siae_job_descriptions = SiaeJobDescription.objects.filter(location__id=pk)
        try:
            commune = Commune.by_insee_code(code_insee)
        except UnknownCommuneError:
            match code_insee:
                case ["98411", "98412", "98413", "98414"]:
                    # Islands.
                    commune = ""
                    # No job description associated at the moment but break if it's the case.
                    assert siae_job_descriptions.count() > 0
                case "89002":
                    # Aigremont does not exist in the ASP world.
                    # Replace it by Môlay, 6km away heading North.
                    commune = Commune.objects.current().get(code="89259")
                case "69123":
                    # Generic Lyon INSEE code.
                    commune = Commune.objects.current().get(code="69382")
                case "75056":
                    # Generic Paris INSEE code.
                    commune = Commune.objects.current().get(code="75101")
            problematic_updates += siae_job_descriptions.values_list("pk", flat=True)

        # TODO: better use a bulk_update. Refactor this file.
        siae_job_descriptions.update(location_asp=commune)

    if problematic_updates:
        admin_query = SiaeMembership.objects.filter(siae=OuterRef("siae"), is_admin=True, is_active=True).order_by(
            "-created_at"
        )
        problematic_job_desc = SiaeJobDescription.objects.filter(pk__in=problematic_updates).values(
            "pk",
            "location__code_insee",
            "location__name",
            "location_asp__code",
            "location_asp__name",
            "siae__name",
            "siae__email",
            admin_email=Subquery(admin_query.values("user__email")[:1]),
        )
        with open(Path(f"{settings.EXPORT_DIR}/problematic_siae_dec_updates.csv"), "w") as outfile:
            cols = problematic_job_desc[0].keys()
            csv_writer = csv.DictWriter(outfile, cols)
            csv_writer.writeheader()
            csv_writer.writerows(problematic_job_desc)


class Migration(migrations.Migration):
    dependencies = [
        ("siaes", "0005_siaejobdescription_location_asp"),
    ]

    operations = [migrations.RunPython(forwards, migrations.RunPython.noop, elidable=True)]
