#!/usr/bin/env python3
import csv
from collections import defaultdict
from io import StringIO

import django
from django.db import transaction
from django.db.models import Prefetch

from itou.siae_evaluations import enums as evaluation_enums
from itou.utils.emails import get_email_message, send_email_messages


def main():
    from itou.companies.models import CompanyMembership
    from itou.siae_evaluations.models import EvaluatedJobApplication, EvaluatedSiae

    with transaction.atomic():
        evaluated_job_apps = EvaluatedJobApplication.objects.filter(
            job_application__approval__start_at__lt="2023-01-01",
            evaluated_siae__evaluation_campaign__calendar_id=2,
        ).select_related(
            "job_application__approval",
            "job_application__job_seeker",
        )
        company_job_apps = defaultdict(list)
        for ja in evaluated_job_apps:
            company_job_apps[ja.evaluated_siae_id].append(ja)

        deletion_report = evaluated_job_apps.delete()
        print(f"Deletion report: {deletion_report}")
        emails = []
        remaining_evaluated_siae = []
        headers = ["SIAE ID", "admin emails", "PASS", "candidat"]
        with StringIO() as remaining_buf, StringIO() as canceled_buf:
            remaining = csv.writer(remaining_buf)
            remaining.writerow(headers)
            canceled = csv.writer(canceled_buf)
            canceled.writerow(headers)
            for evaluated_siae in (
                EvaluatedSiae.objects.filter(pk__in=company_job_apps)
                .select_related("siae")
                .prefetch_related(
                    Prefetch(
                        "siae__memberships",
                        queryset=CompanyMembership.objects.filter(is_admin=True, is_active=True).select_related(
                            "user"
                        ),
                        to_attr="admin_memberships",
                    ),
                )
            ):
                evaluated_job_apps = company_job_apps[evaluated_siae.pk]
                remaining_job_apps = evaluated_siae.evaluated_job_applications.all()
                admin_emails = [m.user.email for m in evaluated_siae.siae.admin_memberships]
                if len(remaining_job_apps) < 2:
                    # Cancel the evaluation campaign.
                    evaluated_job_apps.extend(remaining_job_apps)
                    writer = canceled
                    emails.append(
                        get_email_message(
                            admin_emails,
                            {"company": evaluated_siae.siae},
                            "siae_evaluations/email/to_siae_canceled_evaluation_subject.txt",
                            "siae_evaluations/email/to_siae_canceled_evaluation_body.txt",
                        )
                    )
                else:
                    writer = remaining
                    remaining_evaluated_siae.append(evaluated_siae)
                    emails.append(
                        get_email_message(
                            admin_emails,
                            {"company": evaluated_siae.siae, "evaluated_job_apps": evaluated_job_apps},
                            "siae_evaluations/email/to_siae_removed_auto_prescriptions_subject.txt",
                            "siae_evaluations/email/to_siae_removed_auto_prescriptions_body.txt",
                        )
                    )
                for evaluated_job_app in evaluated_job_apps:
                    writer.writerow(
                        [
                            evaluated_siae.pk,
                            ", ".join(admin_emails),
                            evaluated_job_app.job_application.approval.number,
                            evaluated_job_app.job_application.job_seeker,
                        ]
                    )
            print(f"{remaining_buf.getvalue()}\n\n{canceled_buf.getvalue()}")

        for evaluated_siae in remaining_evaluated_siae:
            # Removing invalid job applications may make the SIAE evaluation accepted.
            if (
                evaluated_siae.reviewed_at
                and not evaluated_siae.final_reviewed_at
                and evaluated_siae.state_from_applications == evaluation_enums.EvaluatedSiaeState.ACCEPTED
            ):
                print(f"Setting the evaluation state to ACCEPTED for {evaluated_siae} ({evaluated_siae.pk}).")
                evaluated_siae.final_reviewed_at = evaluated_siae.reviewed_at
                evaluated_siae.save(update_fields=["final_reviewed_at"])

        send_email_messages(emails)


if __name__ == "__main__":
    django.setup()
    main()
