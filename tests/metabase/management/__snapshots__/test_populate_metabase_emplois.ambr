# serializer version: 1
# name: test_populate_analytics
  dict({
    'num_queries': 48,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "analytics_datum"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_c1_analytics_v0"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_c1_analytics_v0" ("id" varchar,"type" varchar,"date" varchar,"value" integer,"type_detail" varchar,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_analytics_v0"."id" IS \'ID du point de mesure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_analytics_v0"."type" IS \'Type de mesure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_analytics_v0"."date" IS \'Date associée à la mesure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_analytics_v0"."value" IS \'Valeur de la mesure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_analytics_v0"."type_detail" IS \'Type détaillé\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_analytics_v0"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "analytics_datum"."id",
                 "analytics_datum"."code",
                 "analytics_datum"."bucket",
                 "analytics_datum"."value",
                 "analytics_datum"."measured_at"
          FROM "analytics_datum"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_c1_analytics_v0" ("id",
                                        "type",
                                        "date",
                                        "value",
                                        "type_detail",
                                        "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_analytics_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "c1_analytics_v0" RENAME TO "z_old_c1_analytics_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_c1_analytics_v0" RENAME TO "c1_analytics_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_analytics_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "analytics_statsdashboardvisit"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_c1_private_dashboard_visits_v0"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_c1_private_dashboard_visits_v0" ("id" integer,"measured_at" timestamp WITH TIME ZONE,
                                                                                                                            "dashboard_id" varchar,"department" varchar,"region" varchar,"current_company_id" integer,"current_prescriber_organization_id" integer,"current_institution_id" integer,"user_kind" varchar,"user_id" integer,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."id" IS \'ID du point de mesure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."measured_at" IS \'Date associée à la mesure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."dashboard_id" IS \'ID tableau de bord Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."department" IS \'Département\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."region" IS \'Région\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."current_company_id" IS \'ID entreprise courante\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."current_prescriber_organization_id" IS \'ID organisation prescriptrice courante\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."current_institution_id" IS \'ID institution courante\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."user_kind" IS \'Type utilisateur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."user_id" IS \'ID utilisateur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_c1_private_dashboard_visits_v0"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "analytics_statsdashboardvisit"."id",
                 "analytics_statsdashboardvisit"."dashboard_id",
                 "analytics_statsdashboardvisit"."dashboard_name",
                 "analytics_statsdashboardvisit"."department",
                 "analytics_statsdashboardvisit"."region",
                 "analytics_statsdashboardvisit"."current_company_id",
                 "analytics_statsdashboardvisit"."current_prescriber_organization_id",
                 "analytics_statsdashboardvisit"."current_institution_id",
                 "analytics_statsdashboardvisit"."user_kind",
                 "analytics_statsdashboardvisit"."user_id",
                 "analytics_statsdashboardvisit"."measured_at"
          FROM "analytics_statsdashboardvisit"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_c1_private_dashboard_visits_v0" ("id",
                                                       "measured_at",
                                                       "dashboard_id",
                                                       "department",
                                                       "region",
                                                       "current_company_id",
                                                       "current_prescriber_organization_id",
                                                       "current_institution_id",
                                                       "user_kind",
                                                       "user_id",
                                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_private_dashboard_visits_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "c1_private_dashboard_visits_v0" RENAME TO "z_old_c1_private_dashboard_visits_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_c1_private_dashboard_visits_v0" RENAME TO "c1_private_dashboard_visits_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_private_dashboard_visits_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_analytics[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_approvals
  dict({
    'num_queries': 37,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "approvals_approval"
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "approvals_poleemploiapproval"
          WHERE "approvals_poleemploiapproval"."start_at" >= %s
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_pass_agréments"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_pass_agréments" ("id" integer,"type" varchar,"date_début" date,"date_fin" date,"durée" interval,"id_candidat" integer,"id_structure" integer,"type_structure" varchar,"siret_structure" varchar,"nom_structure" varchar,"département_structure_ou_org_pe" varchar,"nom_département_structure_ou_org_pe" varchar,"région_structure_ou_org_pe" varchar,"injection_ai" integer,"hash_numéro_pass_iae" varchar,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."type" IS \'Type\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."date_début" IS \'Date de début\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."date_fin" IS \'Date de fin\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."durée" IS \'Durée\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."id_candidat" IS \'ID C1 du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."id_structure" IS \'ID structure qui a embauché si PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."type_structure" IS \'Type de la structure qui a embauché si PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."siret_structure" IS \'SIRET de la structure qui a embauché si PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."nom_structure" IS \'Nom de la structure qui a embauché si PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."département_structure_ou_org_pe" IS \'Département de la structure qui a embauché si PASS\xa0IAE ou du PE qui a délivré l agrément si Agrément PE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."nom_département_structure_ou_org_pe" IS \'Nom complet du département de la structure qui a embauché si PASS\xa0IAE ou du PE qui a délivré l agrément si Agrément PE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."région_structure_ou_org_pe" IS \'Région de la structure qui a embauché si PASS\xa0IAE ou du PE qui a délivré l agrément si Agrément PE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."injection_ai" IS \'Provient des injections AI\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."hash_numéro_pass_iae" IS \'Version obfusquée du PASS\xa0IAE ou d\'\'agrément\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_pass_agréments"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."number",
                 "approvals_approval"."user_id",
                 "approvals_approval"."origin",
          
            (SELECT U0."to_company_id" AS "to_company"
             FROM "job_applications_jobapplication" U0
             WHERE (U0."state" = %s
                    AND U0."job_seeker_id" = ("approvals_approval"."user_id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "last_hiring_company_pk",
                 "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 "users_user"."allow_next_sso_sub_update"
          FROM "approvals_approval"
          INNER JOIN "users_user" ON ("approvals_approval"."user_id" = "users_user"."id")
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_pass_agréments" ("id",
                                       "type",
                                       "date_début",
                                       "date_fin",
                                       "durée",
                                       "id_candidat",
                                       "id_structure",
                                       "type_structure",
                                       "siret_structure",
                                       "nom_structure",
                                       "département_structure_ou_org_pe",
                                       "nom_département_structure_ou_org_pe",
                                       "région_structure_ou_org_pe",
                                       "injection_ai",
                                       "hash_numéro_pass_iae",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "approvals_poleemploiapproval"."id",
                 "approvals_poleemploiapproval"."start_at",
                 "approvals_poleemploiapproval"."end_at",
                 "approvals_poleemploiapproval"."pe_structure_code",
                 "approvals_poleemploiapproval"."number"
          FROM "approvals_poleemploiapproval"
          WHERE "approvals_poleemploiapproval"."start_at" >= %s
          ORDER BY "approvals_poleemploiapproval"."start_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'get_code_safir_to_pe_org[metabase/tables/approvals.py]',
          'get_company_or_pe_org_from_approval[metabase/tables/approvals.py]',
          '<lambda>[metabase/tables/utils.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi"
          FROM "prescribers_prescriberorganization"
          WHERE "prescribers_prescriberorganization"."code_safir_pole_emploi" IS NOT NULL
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_pass_agréments" ("id",
                                       "type",
                                       "date_début",
                                       "date_fin",
                                       "durée",
                                       "id_candidat",
                                       "id_structure",
                                       "type_structure",
                                       "siret_structure",
                                       "nom_structure",
                                       "département_structure_ou_org_pe",
                                       "nom_département_structure_ou_org_pe",
                                       "région_structure_ou_org_pe",
                                       "injection_ai",
                                       "hash_numéro_pass_iae",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_pass_agréments" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "pass_agréments" RENAME TO "z_old_pass_agréments"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_pass_agréments" RENAME TO "pass_agréments"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_pass_agréments" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_approvals[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_companies
  dict({
    'num_queries': 68,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*)
          FROM
            (SELECT
               (SELECT COUNT(*) AS "count"
                FROM "companies_companymembership" U0
                INNER JOIN "users_user" U1 ON (U0."user_id" = U1."id")
                WHERE (U1."is_active"
                       AND U0."is_active"
                       AND U0."company_id" = ("companies_company"."id"))
                GROUP BY U0."company_id"
                ORDER BY RANDOM() ASC
                LIMIT 1) AS "active_memberships_count",
          
               (SELECT MIN(U0."joined_at") AS "min"
                FROM "companies_companymembership" U0
                WHERE U0."company_id" = ("companies_company"."id")
                GROUP BY U0."company_id"
                ORDER BY RANDOM() ASC
                LIMIT 1) AS "first_membership_join_date",
          
               (SELECT MAX(U2."last_login") AS "max"
                FROM "companies_companymembership" U0
                INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                WHERE U0."company_id" = ("companies_company"."id")
                GROUP BY U0."company_id"
                ORDER BY RANDOM() ASC
                LIMIT 1) AS "last_login_date",
          
               (SELECT COUNT(*) AS "count"
                FROM "companies_jobdescription" U0
                INNER JOIN "jobs_appellation" ON (U0."appellation_id" = "jobs_appellation"."code")
                WHERE (U0."company_id" = ("companies_company"."id")
                       AND U0."is_active")
                GROUP BY U0."company_id"
                LIMIT 1) AS "job_descriptions_active_count",
          
               (SELECT COUNT(*) AS "count"
                FROM "companies_jobdescription" U0
                INNER JOIN "jobs_appellation" ON (U0."appellation_id" = "jobs_appellation"."code")
                WHERE (U0."company_id" = ("companies_company"."id")
                       AND NOT U0."is_active")
                GROUP BY U0."company_id"
                LIMIT 1) AS "job_descriptions_inactive_count"
             FROM "companies_company"
             LEFT OUTER JOIN "job_applications_jobapplication" ON ("companies_company"."id" = "job_applications_jobapplication"."to_company_id")
             LEFT OUTER JOIN "job_applications_jobapplicationtransitionlog" ON ("job_applications_jobapplication"."id" = "job_applications_jobapplicationtransitionlog"."job_application_id")
             WHERE (NOT ("companies_company"."siret" = %s)
                    AND (NOT ("companies_company"."kind" IN (%s,
                                                             %s,
                                                             %s,
                                                             %s,
                                                             %s))
                         OR "companies_company"."source" = %s
                         OR EXISTS
                           (SELECT %s AS "a"
                            FROM "companies_siaeconvention" U0
                            WHERE (U0."id" = ("companies_company"."convention_id")
                                   AND U0."is_active")
                            LIMIT 1)))
             GROUP BY "companies_company"."id") subquery
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_structures_v0"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_structures_v0" ("id" integer,"id_asp" integer,"nom" varchar,"nom_complet" varchar,"description" varchar,"type" varchar,"siret" varchar,"source" varchar,"code_naf" varchar,"email_public" varchar,"email_authentification" varchar,"convergence_france" integer,"adresse_ligne_1" varchar,"adresse_ligne_2" varchar,"code_postal" varchar,"code_commune" varchar,"ville" varchar,"longitude" double precision,"latitude" double precision,"département" varchar,"nom_département" varchar,"région" varchar,"adresse_ligne_1_c1" varchar,"adresse_ligne_2_c1" varchar,"code_postal_c1" varchar,"code_commune_c1" varchar,"ville_c1" varchar,"longitude_c1" double precision,"latitude_c1" double precision,"département_c1" varchar,"nom_département_c1" varchar,"région_c1" varchar,"date_inscription" date,"total_membres" integer,"total_candidatures" integer,"total_candidatures_30j" integer,"total_embauches" integer,"total_embauches_30j" integer,"taux_conversion_30j" double precision,"total_auto_prescriptions" integer,"total_candidatures_autonomes" integer,"total_candidatures_via_prescripteur" integer,"total_candidatures_non_traitées" integer,"total_candidatures_en_étude" integer,"date_dernière_connexion" date,"active" integer,"date_dernière_évolution_candidature" date,"total_fiches_de_poste_actives" integer,"total_fiches_de_poste_inactives" integer,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."id" IS \'ID de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."id_asp" IS \'ID de la structure ASP correspondante\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."nom" IS \'Nom de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."nom_complet" IS \'Nom complet de la structure avec type et ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."description" IS \'Description de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."type" IS \'Type de structure (EI, ETTI, ACI, GEIQ etc..)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."siret" IS \'SIRET de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."source" IS \'Source des données de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."code_naf" IS \'naf\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."email_public" IS \'e-mail\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."email_authentification" IS \'e-mail d\'\'authentification\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."convergence_france" IS \'Convergence France (contrats PHC et CVG)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."adresse_ligne_1" IS \'Première ligne adresse de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."adresse_ligne_2" IS \'Seconde ligne adresse de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."code_postal" IS \'Code postal de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."code_commune" IS \'Code commune de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."ville" IS \'Ville de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."longitude" IS \'Longitude de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."latitude" IS \'Latitude de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."département" IS \'Département de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."nom_département" IS \'Nom complet du département de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."région" IS \'Région de la structure mère\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."adresse_ligne_1_c1" IS \'Première ligne adresse de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."adresse_ligne_2_c1" IS \'Seconde ligne adresse de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."code_postal_c1" IS \'Code postal de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."code_commune_c1" IS \'Code commune de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."ville_c1" IS \'Ville de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."longitude_c1" IS \'Longitude de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."latitude_c1" IS \'Latitude de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."département_c1" IS \'Département de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."nom_département_c1" IS \'Nom complet du département de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."région_c1" IS \'Région de la structure C1\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."date_inscription" IS \'Date inscription du premier compte employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_membres" IS \'Nombre de comptes employeur rattachés à la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_candidatures" IS \'Nombre de candidatures dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_candidatures_30j" IS \'Nombre de candidatures dans les 30 jours glissants dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_embauches" IS \'Nombre de candidatures en état accepté dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_embauches_30j" IS \'Nombre de candidatures en état accepté dans les 30 jours glissants dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."taux_conversion_30j" IS \'Taux de conversion des candidatures en embauches dans les 30 jours glissants\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_auto_prescriptions" IS \'Nombre de candidatures de source employeur dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_candidatures_autonomes" IS \'Nombre de candidatures de source candidat dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_candidatures_via_prescripteur" IS \'Nombre de candidatures de source prescripteur dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_candidatures_non_traitées" IS \'Nombre de candidatures en état nouveau dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_candidatures_en_étude" IS \'Nombre de candidatures en état étude dont la structure est destinataire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."date_dernière_connexion" IS \'Date de dernière connexion utilisateur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."active" IS \'Dernière connexion dans les 7 jours\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."date_dernière_évolution_candidature" IS \'Date de dernière évolution candidature sauf passage obsolète\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_fiches_de_poste_actives" IS \'Nombre de fiches de poste actives de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."total_fiches_de_poste_inactives" IS \'Nombre de fiches de poste inactives de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_structures_v0"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."description",
                 "companies_company"."source",
                 "companies_company"."convention_id",
          
            (SELECT COUNT(*) AS "count"
             FROM "companies_companymembership" U0
             INNER JOIN "users_user" U1 ON (U0."user_id" = U1."id")
             WHERE (U1."is_active"
                    AND U0."is_active"
                    AND U0."company_id" = ("companies_company"."id"))
             GROUP BY U0."company_id"
             ORDER BY RANDOM() ASC
             LIMIT 1) AS "active_memberships_count",
          
            (SELECT MIN(U0."joined_at") AS "min"
             FROM "companies_companymembership" U0
             WHERE U0."company_id" = ("companies_company"."id")
             GROUP BY U0."company_id"
             ORDER BY RANDOM() ASC
             LIMIT 1) AS "first_membership_join_date",
          
            (SELECT MAX(U2."last_login") AS "max"
             FROM "companies_companymembership" U0
             INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
             WHERE U0."company_id" = ("companies_company"."id")
             GROUP BY U0."company_id"
             ORDER BY RANDOM() ASC
             LIMIT 1) AS "last_login_date",
          
            (SELECT COUNT(*) AS "count"
             FROM "companies_jobdescription" U0
             INNER JOIN "jobs_appellation" ON (U0."appellation_id" = "jobs_appellation"."code")
             WHERE (U0."company_id" = ("companies_company"."id")
                    AND U0."is_active")
             GROUP BY U0."company_id"
             LIMIT 1) AS "job_descriptions_active_count",
          
            (SELECT COUNT(*) AS "count"
             FROM "companies_jobdescription" U0
             INNER JOIN "jobs_appellation" ON (U0."appellation_id" = "jobs_appellation"."code")
             WHERE (U0."company_id" = ("companies_company"."id")
                    AND NOT U0."is_active")
             GROUP BY U0."company_id"
             LIMIT 1) AS "job_descriptions_inactive_count",
                 MAX("job_applications_jobapplicationtransitionlog"."timestamp") FILTER (
                                                                                         WHERE NOT ("job_applications_jobapplicationtransitionlog"."to_state" = %s
                                                                                                    AND "job_applications_jobapplicationtransitionlog"."to_state" IS NOT NULL)) AS "last_job_application_transition_date",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") AS "total_candidatures",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."state" = %s) AS "total_embauches",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."created_at" >= %s) AS "total_candidatures_30j",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE ("job_applications_jobapplication"."created_at" >= %s
                                                                                       AND "job_applications_jobapplication"."state" = %s)) AS "total_embauches_30j",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."sender_company_id" = ("job_applications_jobapplication"."to_company_id")) AS "total_auto_prescriptions",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."sender_kind" = %s) AS "total_candidatures_autonomes",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."sender_kind" = %s) AS "total_candidatures_prescripteur",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE (NOT ("job_applications_jobapplication"."sender_company_id" = ("job_applications_jobapplication"."to_company_id")
                                                                                            AND "job_applications_jobapplication"."sender_company_id" IS NOT NULL)
                                                                                       AND "job_applications_jobapplication"."sender_kind" = %s)) AS "total_candidatures_employeur",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."state" = %s) AS "total_candidatures_non_traitees",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."state" = %s) AS "total_candidatures_en_cours",
                 "cities_city"."id",
                 "cities_city"."code_insee",
                 "companies_siaeconvention"."id",
                 "companies_siaeconvention"."asp_id"
          FROM "companies_company"
          LEFT OUTER JOIN "companies_siaeconvention" ON ("companies_company"."convention_id" = "companies_siaeconvention"."id")
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("companies_company"."id" = "job_applications_jobapplication"."to_company_id")
          LEFT OUTER JOIN "job_applications_jobapplicationtransitionlog" ON ("job_applications_jobapplication"."id" = "job_applications_jobapplicationtransitionlog"."job_application_id")
          LEFT OUTER JOIN "cities_city" ON ("companies_company"."insee_city_id" = "cities_city"."id")
          WHERE (NOT ("companies_company"."siret" = %s)
                 AND (NOT ("companies_company"."kind" IN (%s,
                                                          %s,
                                                          %s,
                                                          %s,
                                                          %s))
                      OR "companies_company"."source" = %s
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."id" = ("companies_company"."convention_id")
                                AND U0."is_active")
                         LIMIT 1)))
          GROUP BY "companies_company"."id",
                   "cities_city"."id",
                   "companies_siaeconvention"."id"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."insee_city_id",
                 "companies_company"."siret",
                 "companies_company"."source",
                 "companies_company"."convention_id",
                 "cities_city"."id",
                 "cities_city"."code_insee"
          FROM "companies_company"
          LEFT OUTER JOIN "cities_city" ON ("companies_company"."insee_city_id" = "cities_city"."id")
          WHERE (NOT ("companies_company"."siret" = %s)
                 AND "companies_company"."convention_id" IN (%s))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'get_post_code_to_insee_cities_map[metabase/tables/utils.py]',
          'get_code_commune[metabase/tables/utils.py]',
          '<lambda>[metabase/tables/utils.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "cities_city"."id",
                 "cities_city"."name",
                 "cities_city"."post_codes",
                 "cities_city"."code_insee"
          FROM "cities_city"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_structures_v0" ("id",
                                      "id_asp",
                                      "nom",
                                      "nom_complet",
                                      "description",
                                      "type",
                                      "siret",
                                      "source",
                                      "code_naf",
                                      "email_public",
                                      "email_authentification",
                                      "convergence_france",
                                      "adresse_ligne_1",
                                      "adresse_ligne_2",
                                      "code_postal",
                                      "code_commune",
                                      "ville",
                                      "longitude",
                                      "latitude",
                                      "département",
                                      "nom_département",
                                      "région",
                                      "adresse_ligne_1_c1",
                                      "adresse_ligne_2_c1",
                                      "code_postal_c1",
                                      "code_commune_c1",
                                      "ville_c1",
                                      "longitude_c1",
                                      "latitude_c1",
                                      "département_c1",
                                      "nom_département_c1",
                                      "région_c1",
                                      "date_inscription",
                                      "total_membres",
                                      "total_candidatures",
                                      "total_candidatures_30j",
                                      "total_embauches",
                                      "total_embauches_30j",
                                      "taux_conversion_30j",
                                      "total_auto_prescriptions",
                                      "total_candidatures_autonomes",
                                      "total_candidatures_via_prescripteur",
                                      "total_candidatures_non_traitées",
                                      "total_candidatures_en_étude",
                                      "date_dernière_connexion",
                                      "active",
                                      "date_dernière_évolution_candidature",
                                      "total_fiches_de_poste_actives",
                                      "total_fiches_de_poste_inactives",
                                      "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_structures_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "structures_v0" RENAME TO "z_old_structures_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_structures_v0" RENAME TO "structures_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_structures_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_companies[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_criteria
  dict({
    'num_queries': 21,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "eligibility_administrativecriteria"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_critères_iae"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_critères_iae" ("id" integer,"nom" varchar,"niveau" varchar,"description" varchar,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_critères_iae"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_critères_iae"."nom" IS \'nom\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_critères_iae"."niveau" IS \'niveau\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_critères_iae"."description" IS \'description\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_critères_iae"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "eligibility_administrativecriteria"."id",
                 "eligibility_administrativecriteria"."level",
                 "eligibility_administrativecriteria"."name",
                 "eligibility_administrativecriteria"."desc",
                 "eligibility_administrativecriteria"."written_proof",
                 "eligibility_administrativecriteria"."written_proof_url",
                 "eligibility_administrativecriteria"."written_proof_validity",
                 "eligibility_administrativecriteria"."kind",
                 "eligibility_administrativecriteria"."ui_rank",
                 "eligibility_administrativecriteria"."created_at"
          FROM "eligibility_administrativecriteria"
          ORDER BY "eligibility_administrativecriteria"."level" ASC,
                   "eligibility_administrativecriteria"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_critères_iae" ("id",
                                     "nom",
                                     "niveau",
                                     "description",
                                     "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_critères_iae" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "critères_iae" RENAME TO "z_old_critères_iae"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_critères_iae" RENAME TO "critères_iae"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_critères_iae" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_enums
  dict({
    'num_queries': 61,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_c1_ref_origine_candidature"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_c1_ref_origine_candidature" ("code" text,"label" text)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_c1_ref_origine_candidature" ("code",
                                                   "label")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_origine_candidature" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "c1_ref_origine_candidature" RENAME TO "z_old_c1_ref_origine_candidature"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_c1_ref_origine_candidature" RENAME TO "c1_ref_origine_candidature"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_origine_candidature" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_c1_ref_type_contrat"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_c1_ref_type_contrat" ("code" text,"label" text)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_c1_ref_type_contrat" ("code",
                                            "label")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_type_contrat" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "c1_ref_type_contrat" RENAME TO "z_old_c1_ref_type_contrat"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_c1_ref_type_contrat" RENAME TO "c1_ref_type_contrat"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_type_contrat" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_c1_ref_type_prescripteur"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_c1_ref_type_prescripteur" ("code" text,"label" text)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_c1_ref_type_prescripteur" ("code",
                                                 "label")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_type_prescripteur" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "c1_ref_type_prescripteur" RENAME TO "z_old_c1_ref_type_prescripteur"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_c1_ref_type_prescripteur" RENAME TO "c1_ref_type_prescripteur"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_type_prescripteur" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_c1_ref_motif_de_refus"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_c1_ref_motif_de_refus" ("code" text,"label" text)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_c1_ref_motif_de_refus" ("code",
                                              "label")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_motif_de_refus" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "c1_ref_motif_de_refus" RENAME TO "z_old_c1_ref_motif_de_refus"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_c1_ref_motif_de_refus" RENAME TO "c1_ref_motif_de_refus"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_motif_de_refus" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_c1_ref_motif_suspension"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_c1_ref_motif_suspension" ("code" text,"label" text)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_c1_ref_motif_suspension" ("code",
                                                "label")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_motif_suspension" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "c1_ref_motif_suspension" RENAME TO "z_old_c1_ref_motif_suspension"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_c1_ref_motif_suspension" RENAME TO "c1_ref_motif_suspension"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_c1_ref_motif_suspension" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'store_df[metabase/dataframes.py]',
          'Command.populate_enums[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_evaluated_criteria
  dict({
    'num_queries': 23,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "siae_evaluations_evaluatedadministrativecriteria"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_cap_critères_iae"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_cap_critères_iae" ("id" integer,"id_critère_iae" integer,"id_cap_candidature" integer,"date_dépôt" timestamp WITH TIME ZONE,
                                                                                                                                                                   "date_transmission" timestamp WITH TIME ZONE,
                                                                                                                                                                                                           "état" varchar,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_critères_iae"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_critères_iae"."id_critère_iae" IS \'critère administratif\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_critères_iae"."id_cap_candidature" IS \'candidature évaluée\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_critères_iae"."date_dépôt" IS \'téléversé le\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_critères_iae"."date_transmission" IS \'transmis le\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_critères_iae"."état" IS \'vérification\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_critères_iae"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedadministrativecriteria"."id",
                 "siae_evaluations_evaluatedadministrativecriteria"."administrative_criteria_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."proof_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."uploaded_at",
                 "siae_evaluations_evaluatedadministrativecriteria"."submitted_at",
                 "siae_evaluations_evaluatedadministrativecriteria"."review_state",
                 "siae_evaluations_evaluatedadministrativecriteria"."criteria_certified"
          FROM "siae_evaluations_evaluatedadministrativecriteria"
          INNER JOIN "eligibility_administrativecriteria" ON ("siae_evaluations_evaluatedadministrativecriteria"."administrative_criteria_id" = "eligibility_administrativecriteria"."id")
          ORDER BY "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id" ASC,
                   "eligibility_administrativecriteria"."level" ASC,
                   "eligibility_administrativecriteria"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_cap_critères_iae" ("id",
                                         "id_critère_iae",
                                         "id_cap_candidature",
                                         "date_dépôt",
                                         "date_transmission",
                                         "état",
                                         "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_critères_iae" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "cap_critères_iae" RENAME TO "z_old_cap_critères_iae"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_cap_critères_iae" RENAME TO "cap_critères_iae"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_critères_iae" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_criteria[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_evaluated_job_applications
  dict({
    'num_queries': 22,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "siae_evaluations_evaluatedjobapplication"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_cap_candidatures"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_cap_candidatures" ("id" integer,"id_candidature" UUID,
                                                                                             "id_cap_structure" integer,"état" varchar,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_candidatures"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_candidatures"."id_candidature" IS \'candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_candidatures"."id_cap_structure" IS \'SIAE évaluée\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_candidatures"."état" IS \'Etat du contrôle de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_candidatures"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedjobapplication"."id",
                 "siae_evaluations_evaluatedjobapplication"."job_application_id",
                 "siae_evaluations_evaluatedjobapplication"."evaluated_siae_id",
                 "siae_evaluations_evaluatedjobapplication"."labor_inspector_explanation"
          FROM "siae_evaluations_evaluatedjobapplication"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedadministrativecriteria"."id",
                 "siae_evaluations_evaluatedadministrativecriteria"."administrative_criteria_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."proof_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."uploaded_at",
                 "siae_evaluations_evaluatedadministrativecriteria"."submitted_at",
                 "siae_evaluations_evaluatedadministrativecriteria"."review_state",
                 "siae_evaluations_evaluatedadministrativecriteria"."criteria_certified"
          FROM "siae_evaluations_evaluatedadministrativecriteria"
          INNER JOIN "eligibility_administrativecriteria" ON ("siae_evaluations_evaluatedadministrativecriteria"."administrative_criteria_id" = "eligibility_administrativecriteria"."id")
          WHERE "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id" IN (%s)
          ORDER BY "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id" ASC,
                   "eligibility_administrativecriteria"."level" ASC,
                   "eligibility_administrativecriteria"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_cap_candidatures" ("id",
                                         "id_candidature",
                                         "id_cap_structure",
                                         "état",
                                         "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_candidatures" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "cap_candidatures" RENAME TO "z_old_cap_candidatures"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_cap_candidatures" RENAME TO "cap_candidatures"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_candidatures" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_evaluated_siaes
  dict({
    'num_queries': 25,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "siae_evaluations_evaluatedsiae"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_cap_structures"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_cap_structures" ("id" integer,"id_cap_campagne" integer,"id_structure" integer,"état" varchar,"date_contrôle" timestamp WITH TIME ZONE,
                                                                                                                                                                              "date_définitive_contrôle" timestamp WITH TIME ZONE,
                                                                                                                                                                                                                             "date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_structures"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_structures"."id_cap_campagne" IS \'contrôle\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_structures"."id_structure" IS \'SIAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_structures"."état" IS \'Etat du contrôle de la structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_structures"."date_contrôle" IS \'contrôlée le\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_structures"."date_définitive_contrôle" IS \'contrôle définitif le\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_structures"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedsiae"."id",
                 "siae_evaluations_evaluatedsiae"."evaluation_campaign_id",
                 "siae_evaluations_evaluatedsiae"."siae_id",
                 "siae_evaluations_evaluatedsiae"."reviewed_at",
                 "siae_evaluations_evaluatedsiae"."final_reviewed_at",
                 "siae_evaluations_evaluatedsiae"."submission_freezed_at",
                 "siae_evaluations_evaluatedsiae"."notified_at",
                 "siae_evaluations_evaluatedsiae"."notification_reason",
                 "siae_evaluations_evaluatedsiae"."notification_text",
                 "siae_evaluations_evaluatedsiae"."reminder_sent_at"
          FROM "siae_evaluations_evaluatedsiae"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedjobapplication"."id",
                 "siae_evaluations_evaluatedjobapplication"."job_application_id",
                 "siae_evaluations_evaluatedjobapplication"."evaluated_siae_id",
                 "siae_evaluations_evaluatedjobapplication"."labor_inspector_explanation"
          FROM "siae_evaluations_evaluatedjobapplication"
          WHERE "siae_evaluations_evaluatedjobapplication"."evaluated_siae_id" IN (%s)
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'EvaluatedSiae.evaluation_is_final[siae_evaluations/models.py]',
          'EvaluatedSiae.state[siae_evaluations/models.py]',
          '<lambda>[metabase/tables/evaluated_siaes.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluationcampaign"."id",
                 "siae_evaluations_evaluationcampaign"."name",
                 "siae_evaluations_evaluationcampaign"."created_at",
                 "siae_evaluations_evaluationcampaign"."percent_set_at",
                 "siae_evaluations_evaluationcampaign"."evaluations_asked_at",
                 "siae_evaluations_evaluationcampaign"."ended_at",
                 "siae_evaluations_evaluationcampaign"."submission_freeze_notified_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_start_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_end_at",
                 "siae_evaluations_evaluationcampaign"."institution_id",
                 "siae_evaluations_evaluationcampaign"."chosen_percent",
                 "siae_evaluations_evaluationcampaign"."calendar_id"
          FROM "siae_evaluations_evaluationcampaign"
          WHERE "siae_evaluations_evaluationcampaign"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_cap_structures" ("id",
                                       "id_cap_campagne",
                                       "id_structure",
                                       "état",
                                       "date_contrôle",
                                       "date_définitive_contrôle",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_structures" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "cap_structures" RENAME TO "z_old_cap_structures"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_cap_structures" RENAME TO "cap_structures"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_structures" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluated_siaes[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_evaluation_campaigns
  dict({
    'num_queries': 23,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "siae_evaluations_evaluationcampaign"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_cap_campagnes"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_cap_campagnes" ("id" integer,"nom" varchar,"id_institution" integer,"date_début" date,"date_fin" date,"pourcentage_sélection" integer,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_campagnes"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_campagnes"."nom" IS \'nom de la campagne d\'\'évaluation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_campagnes"."id_institution" IS \'DDETS IAE responsable du contrôle\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_campagnes"."date_début" IS \'date de début de la période contrôlée\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_campagnes"."date_fin" IS \'date de fin de la période contrôlée\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_campagnes"."pourcentage_sélection" IS \'pourcentage de sélection\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_cap_campagnes"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluationcampaign"."id",
                 "siae_evaluations_evaluationcampaign"."name",
                 "siae_evaluations_evaluationcampaign"."created_at",
                 "siae_evaluations_evaluationcampaign"."percent_set_at",
                 "siae_evaluations_evaluationcampaign"."evaluations_asked_at",
                 "siae_evaluations_evaluationcampaign"."ended_at",
                 "siae_evaluations_evaluationcampaign"."submission_freeze_notified_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_start_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_end_at",
                 "siae_evaluations_evaluationcampaign"."institution_id",
                 "siae_evaluations_evaluationcampaign"."chosen_percent",
                 "siae_evaluations_evaluationcampaign"."calendar_id"
          FROM "siae_evaluations_evaluationcampaign"
          INNER JOIN "institutions_institution" ON ("siae_evaluations_evaluationcampaign"."institution_id" = "institutions_institution"."id")
          ORDER BY "siae_evaluations_evaluationcampaign"."name" DESC,
                   "institutions_institution"."name" ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_cap_campagnes" ("id",
                                      "nom",
                                      "id_institution",
                                      "date_début",
                                      "date_fin",
                                      "pourcentage_sélection",
                                      "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_campagnes" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "cap_campagnes" RENAME TO "z_old_cap_campagnes"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_cap_campagnes" RENAME TO "cap_campagnes"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_cap_campagnes" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_evaluation_campaigns[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_gps_groups
  dict({
    'num_queries': 22,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "gps_followupgroup"
          INNER JOIN "users_user" ON ("gps_followupgroup"."beneficiary_id" = "users_user"."id")
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_gps_groups_v1"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_gps_groups_v1" ("id" integer,"created_at" timestamp WITH TIME ZONE,
                                                                                                          "updated_at" timestamp WITH TIME ZONE,
                                                                                                                                           "created_in_bulk" integer,"department" text,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_groups_v1"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_groups_v1"."created_at" IS \'date de création\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_groups_v1"."updated_at" IS \'date de modification\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_groups_v1"."created_in_bulk" IS \'créé massivement\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_groups_v1"."department" IS \'Département du bénéficiaire\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_groups_v1"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "gps_followupgroup"."id",
                 "gps_followupgroup"."created_at",
                 "gps_followupgroup"."created_in_bulk",
                 "gps_followupgroup"."updated_at",
                 "gps_followupgroup"."beneficiary_id",
                 "users_user"."department" AS "beneficiary_department"
          FROM "gps_followupgroup"
          INNER JOIN "users_user" ON ("gps_followupgroup"."beneficiary_id" = "users_user"."id")
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_gps_groups_v1" ("id",
                                      "created_at",
                                      "updated_at",
                                      "created_in_bulk",
                                      "department",
                                      "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_gps_groups_v1" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "gps_groups_v1" RENAME TO "z_old_gps_groups_v1"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_gps_groups_v1" RENAME TO "gps_groups_v1"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_gps_groups_v1" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_groups[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_gps_memberships
  dict({
    'num_queries': 25,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*)
          FROM
            (SELECT "gps_followupgroupmembership"."id" AS "col1"
             FROM "gps_followupgroupmembership"
             INNER JOIN "users_user" ON ("gps_followupgroupmembership"."member_id" = "users_user"."id")
             LEFT OUTER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
             LEFT OUTER JOIN "companies_company" ON ("companies_companymembership"."company_id" = "companies_company"."id")
             LEFT OUTER JOIN "prescribers_prescribermembership" ON ("users_user"."id" = "prescribers_prescribermembership"."user_id")
             LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("prescribers_prescribermembership"."organization_id" = "prescribers_prescriberorganization"."id")
             GROUP BY 1) subquery
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_gps_membres_v1"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_gps_membres_v1" ("id" integer,"group_id" integer,"created_at" timestamp WITH TIME ZONE,
                                                                                                                              "updated_at" timestamp WITH TIME ZONE,
                                                                                                                                                               "ended_at" date,"member_id" integer,"org_departments" text[],"created_in_bulk" integer,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."group_id" IS \'groupe de suivi\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."created_at" IS \'date de création\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."updated_at" IS \'date de modification\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."ended_at" IS \'date de fin de suivi\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."member_id" IS \'membre du groupe de suivi\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."org_departments" IS \'Départements de l\'\'organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."created_in_bulk" IS \'créé massivement\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_gps_membres_v1"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "gps_followupgroupmembership"."id",
                 "gps_followupgroupmembership"."is_referent_certified",
                 "gps_followupgroupmembership"."is_active",
                 "gps_followupgroupmembership"."created_at",
                 "gps_followupgroupmembership"."created_in_bulk",
                 "gps_followupgroupmembership"."last_contact_at",
                 "gps_followupgroupmembership"."started_at",
                 "gps_followupgroupmembership"."ended_at",
                 "gps_followupgroupmembership"."updated_at",
                 "gps_followupgroupmembership"."can_view_personal_information",
                 "gps_followupgroupmembership"."follow_up_group_id",
                 "gps_followupgroupmembership"."member_id",
                 "gps_followupgroupmembership"."creator_id",
                 "gps_followupgroupmembership"."reason",
                 "gps_followupgroupmembership"."end_reason",
                 ARRAY_AGG(DISTINCT "companies_company"."department"
                           ORDER BY "companies_company"."department") FILTER (
                                                                              WHERE "companies_companymembership"."is_active") AS "companies_departments",
                 ARRAY_AGG(DISTINCT "prescribers_prescriberorganization"."department"
                           ORDER BY "prescribers_prescriberorganization"."department") FILTER (
                                                                                               WHERE "prescribers_prescribermembership"."is_active") AS "prescriber_departments"
          FROM "gps_followupgroupmembership"
          INNER JOIN "users_user" ON ("gps_followupgroupmembership"."member_id" = "users_user"."id")
          LEFT OUTER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
          LEFT OUTER JOIN "companies_company" ON ("companies_companymembership"."company_id" = "companies_company"."id")
          LEFT OUTER JOIN "prescribers_prescribermembership" ON ("users_user"."id" = "prescribers_prescribermembership"."user_id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("prescribers_prescribermembership"."organization_id" = "prescribers_prescriberorganization"."id")
          GROUP BY "gps_followupgroupmembership"."id"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_gps_membres_v1" ("id",
                                       "group_id",
                                       "created_at",
                                       "updated_at",
                                       "ended_at",
                                       "member_id",
                                       "org_departments",
                                       "created_in_bulk",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_gps_membres_v1" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "gps_membres_v1" RENAME TO "z_old_gps_membres_v1"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_gps_membres_v1" RENAME TO "gps_membres_v1"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_gps_membres_v1" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_gps_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_institutions
  dict({
    'num_queries': 23,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "institutions_institution"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_institutions"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_institutions" ("id" integer,"type" varchar,"département" varchar,"nom_département" varchar,"région" varchar,"nom" varchar,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_institutions"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_institutions"."type" IS \'type\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_institutions"."département" IS \'Département\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_institutions"."nom_département" IS \'Nom complet du département\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_institutions"."région" IS \'Région\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_institutions"."nom" IS \'nom\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_institutions"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "institutions_institution"."id",
                 "institutions_institution"."address_line_1",
                 "institutions_institution"."address_line_2",
                 "institutions_institution"."post_code",
                 "institutions_institution"."city",
                 "institutions_institution"."department",
                 "institutions_institution"."coords",
                 "institutions_institution"."geocoding_score",
                 "institutions_institution"."geocoding_updated_at",
                 "institutions_institution"."ban_api_resolved_address",
                 "institutions_institution"."insee_city_id",
                 "institutions_institution"."name",
                 "institutions_institution"."created_at",
                 "institutions_institution"."updated_at",
                 "institutions_institution"."uid",
                 "institutions_institution"."active_members_email_reminder_last_sent_at",
                 "institutions_institution"."automatic_geocoding_update",
                 "institutions_institution"."kind"
          FROM "institutions_institution"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_institutions" ("id",
                                     "type",
                                     "département",
                                     "nom_département",
                                     "région",
                                     "nom",
                                     "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_institutions" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "institutions" RENAME TO "z_old_institutions"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_institutions" RENAME TO "institutions"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_institutions" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_institutions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_job_applications
  dict({
    'num_queries': 48,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "job_applications_jobapplication"
          WHERE (NOT ("job_applications_jobapplication"."origin" = %s)
                 AND "job_applications_jobapplication"."to_company_id" IN
                   (SELECT V0."id"
                    FROM "companies_company" V0
                    WHERE (NOT (V0."siret" = %s)
                           AND (NOT (V0."kind" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s,
                                                   %s))
                                OR V0."source" = %s
                                OR EXISTS
                                  (SELECT %s AS "a"
                                   FROM "companies_siaeconvention" U0
                                   WHERE (U0."id" = (V0."convention_id")
                                          AND U0."is_active")
                                   LIMIT 1)))))
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_candidatures"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_candidatures" ("id" UUID,
                                                                "candidature_archivee" integer,"candidature_refusée_automatiquement" integer,"date_candidature" date,"date_début_contrat" date,"date_traitement" date,"état" varchar,"origine" varchar,"origine_détaillée" varchar,"origine_id_structure" integer,"parcours_de_création" varchar,"délai_prise_en_compte" interval,"délai_de_réponse" interval,"motif_de_refus" varchar,"id_candidat" integer,"id_structure" integer,"type_structure" varchar,"nom_structure" varchar,"nom_complet_structure" varchar,"département_structure" varchar,"nom_département_structure" varchar,"région_structure" varchar,"id_org_prescripteur" integer,"nom_org_prescripteur" varchar,"safir_org_prescripteur" varchar,"nom_prénom_conseiller" varchar,"date_embauche" date,"injection_ai" integer,"mode_attribution_pass_iae" varchar,"type_contrat" varchar,"présence_de_cv" integer,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."id" IS \'ID C1 de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."candidature_archivee" IS \'Candidature archivée coté employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."candidature_refusée_automatiquement" IS \'Candidature automatiquement refusée car en attente depuis plus de 2 mois\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."date_candidature" IS \'Date de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."date_début_contrat" IS \'Date de début du contrat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."date_traitement" IS \'Date de dernier traitement de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."état" IS \'Etat de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."origine" IS \'Origine de la candidature (employeur, candidat, prescripteur habilité, orienteur)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."origine_détaillée" IS \'Origine détaillée de la candidature (employeur EI, ACI... candidat, orienteur, prescripteur PE, ML...)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."origine_id_structure" IS \'ID de la structure d\'\'origine de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."parcours_de_création" IS \'Parcours de création de la candidature (Normale, reprise de stock AI, import agrément PE, action support...)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."délai_prise_en_compte" IS \'Temps écoulé rétroactivement de état nouveau à état étude si la candidature est passée par ces états\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."délai_de_réponse" IS \'Temps écoulé rétroactivement de état nouveau à état accepté ou refusé si la candidature est passée par ces états\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."motif_de_refus" IS \'Motif de refus de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."id_candidat" IS \'ID C1 du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."id_structure" IS \'ID de la structure destinaire de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."type_structure" IS \'Type de la structure destinaire de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."nom_structure" IS \'Nom de la structure destinaire de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."nom_complet_structure" IS \'Nom complet de la structure destinaire de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."département_structure" IS \'Département de la structure destinaire de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."nom_département_structure" IS \'Nom complet du département de la structure destinaire de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."région_structure" IS \'Région de la structure destinaire de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."id_org_prescripteur" IS \'ID de l\'\'\'\'organisation prescriptrice\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."nom_org_prescripteur" IS \'Nom de l\'\'\'\'organisation prescriptrice\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."safir_org_prescripteur" IS \'SAFIR de l\'\'\'\'organisation prescriptrice\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."nom_prénom_conseiller" IS \'Nom prénom du conseiller PE ou SPIP\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."date_embauche" IS \'Date embauche le cas échéant\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."injection_ai" IS \'Provient des injections AI\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."mode_attribution_pass_iae" IS \'Mode d\'\'\'\'attribution du PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."type_contrat" IS \'Type de contrat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."présence_de_cv" IS \'Présence d\'\'\'\'un CV\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidatures"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplication"."id",
                 "job_applications_jobapplication"."job_seeker_id",
                 "job_applications_jobapplication"."resume_id",
                 "job_applications_jobapplication"."sender_id",
                 "job_applications_jobapplication"."sender_kind",
                 "job_applications_jobapplication"."sender_company_id",
                 "job_applications_jobapplication"."sender_prescriber_organization_id",
                 "job_applications_jobapplication"."to_company_id",
                 "job_applications_jobapplication"."state",
                 "job_applications_jobapplication"."archived_at",
                 "job_applications_jobapplication"."refusal_reason",
                 "job_applications_jobapplication"."hiring_start_at",
                 "job_applications_jobapplication"."origin",
                 "job_applications_jobapplication"."approval_delivery_mode",
                 "job_applications_jobapplication"."created_at",
                 "job_applications_jobapplication"."processed_at",
                 "job_applications_jobapplication"."contract_type",
          
            (SELECT MIN(U0."timestamp") AS "first_timestamp"
             FROM "job_applications_jobapplicationtransitionlog" U0
             WHERE (U0."job_application_id" = ("job_applications_jobapplication"."id")
                    AND U0."transition" = %s)
             GROUP BY U0."job_application_id") AS "transition_accepted_date",
                 (
                    (SELECT MIN(U0."timestamp") AS "first_timestamp"
                     FROM "job_applications_jobapplicationtransitionlog" U0
                     WHERE (U0."job_application_id" = ("job_applications_jobapplication"."id")
                            AND U0."transition" = %s)
                     GROUP BY U0."job_application_id") - "job_applications_jobapplication"."created_at") AS "time_spent_from_new_to_processing",
                 (
                    (SELECT MIN(U0."timestamp") AS "first_timestamp"
                     FROM "job_applications_jobapplicationtransitionlog" U0
                     WHERE (U0."job_application_id" = ("job_applications_jobapplication"."id")
                            AND U0."to_state" IN (%s,
                                                  %s))
                     GROUP BY U0."job_application_id") - "job_applications_jobapplication"."created_at") AS "time_spent_from_new_to_accepted_or_refused",
                 "users_user"."id",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 T4."id",
                 T4."kind",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."authorization_status",
                 "companies_company"."id",
                 "companies_company"."department",
                 "companies_company"."name",
                 "companies_company"."kind",
                 "companies_company"."brand"
          FROM "job_applications_jobapplication"
          INNER JOIN "companies_company" ON ("job_applications_jobapplication"."to_company_id" = "companies_company"."id")
          LEFT OUTER JOIN "users_user" ON ("job_applications_jobapplication"."sender_id" = "users_user"."id")
          LEFT OUTER JOIN "companies_company" T4 ON ("job_applications_jobapplication"."sender_company_id" = T4."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("job_applications_jobapplication"."sender_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          WHERE (NOT ("job_applications_jobapplication"."origin" = %s)
                 AND "job_applications_jobapplication"."to_company_id" IN
                   (SELECT V0."id"
                    FROM "companies_company" V0
                    WHERE (NOT (V0."siret" = %s)
                           AND (NOT (V0."kind" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s,
                                                   %s))
                                OR V0."source" = %s
                                OR EXISTS
                                  (SELECT %s AS "a"
                                   FROM "companies_siaeconvention" U0
                                   WHERE (U0."id" = (V0."convention_id")
                                          AND U0."is_active")
                                   LIMIT 1)))))
          ORDER BY "job_applications_jobapplication"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_candidatures" ("id",
                                     "candidature_archivee",
                                     "candidature_refusée_automatiquement",
                                     "date_candidature",
                                     "date_début_contrat",
                                     "date_traitement",
                                     "état",
                                     "origine",
                                     "origine_détaillée",
                                     "origine_id_structure",
                                     "parcours_de_création",
                                     "délai_prise_en_compte",
                                     "délai_de_réponse",
                                     "motif_de_refus",
                                     "id_candidat",
                                     "id_structure",
                                     "type_structure",
                                     "nom_structure",
                                     "nom_complet_structure",
                                     "département_structure",
                                     "nom_département_structure",
                                     "région_structure",
                                     "id_org_prescripteur",
                                     "nom_org_prescripteur",
                                     "safir_org_prescripteur",
                                     "nom_prénom_conseiller",
                                     "date_embauche",
                                     "injection_ai",
                                     "mode_attribution_pass_iae",
                                     "type_contrat",
                                     "présence_de_cv",
                                     "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_candidatures" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "candidatures" RENAME TO "z_old_candidatures"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_candidatures" RENAME TO "candidatures"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_candidatures" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_applications[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_job_applications.1
  dict({
    'num_queries': 19,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "job_applications_jobapplication_selected_jobs"
          INNER JOIN "job_applications_jobapplication" ON ("job_applications_jobapplication_selected_jobs"."jobapplication_id" = "job_applications_jobapplication"."id")
          WHERE (NOT ("job_applications_jobapplication"."origin" = %s)
                 AND "job_applications_jobapplication"."to_company_id" IN
                   (SELECT V0."id"
                    FROM "companies_company" V0
                    WHERE (NOT (V0."siret" = %s)
                           AND (NOT (V0."kind" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s,
                                                   %s))
                                OR V0."source" = %s
                                OR EXISTS
                                  (SELECT %s AS "a"
                                   FROM "companies_siaeconvention" U0
                                   WHERE (U0."id" = (V0."convention_id")
                                          AND U0."is_active")
                                   LIMIT 1)))))
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_fiches_de_poste_par_candidature"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_fiches_de_poste_par_candidature" ("id_fiche_de_poste" integer,"id_candidature" UUID,
                                                                                                                           "date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste_par_candidature"."id_fiche_de_poste" IS \'ID fiche de poste\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste_par_candidature"."id_candidature" IS \'ID de la candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste_par_candidature"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplication_selected_jobs"."id",
                 "job_applications_jobapplication_selected_jobs"."jobapplication_id",
                 "job_applications_jobapplication_selected_jobs"."jobdescription_id"
          FROM "job_applications_jobapplication_selected_jobs"
          INNER JOIN "job_applications_jobapplication" ON ("job_applications_jobapplication_selected_jobs"."jobapplication_id" = "job_applications_jobapplication"."id")
          WHERE (NOT ("job_applications_jobapplication"."origin" = %s)
                 AND "job_applications_jobapplication"."to_company_id" IN
                   (SELECT V0."id"
                    FROM "companies_company" V0
                    WHERE (NOT (V0."siret" = %s)
                           AND (NOT (V0."kind" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s,
                                                   %s))
                                OR V0."source" = %s
                                OR EXISTS
                                  (SELECT %s AS "a"
                                   FROM "companies_siaeconvention" U0
                                   WHERE (U0."id" = (V0."convention_id")
                                          AND U0."is_active")
                                   LIMIT 1)))))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_fiches_de_poste_par_candidature" ("id_fiche_de_poste",
                                                        "id_candidature",
                                                        "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_fiches_de_poste_par_candidature" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "fiches_de_poste_par_candidature" RENAME TO "z_old_fiches_de_poste_par_candidature"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_fiches_de_poste_par_candidature" RENAME TO "fiches_de_poste_par_candidature"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_fiches_de_poste_par_candidature" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_selected_jobs[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_job_descriptions
  dict({
    'num_queries': 33,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*)
          FROM
            (SELECT "companies_jobdescription"."id" AS "col1"
             FROM "companies_jobdescription"
             LEFT OUTER JOIN "job_applications_jobapplication_selected_jobs" ON ("companies_jobdescription"."id" = "job_applications_jobapplication_selected_jobs"."jobdescription_id")
             WHERE "companies_jobdescription"."company_id" IN
                 (SELECT V0."id"
                  FROM "companies_company" V0
                  WHERE (NOT (V0."siret" = %s)
                         AND (NOT (V0."kind" IN (%s,
                                                 %s,
                                                 %s,
                                                 %s,
                                                 %s))
                              OR V0."source" = %s
                              OR EXISTS
                                (SELECT %s AS "a"
                                 FROM "companies_siaeconvention" U0
                                 WHERE (U0."id" = (V0."convention_id")
                                        AND U0."is_active")
                                 LIMIT 1))))
             GROUP BY 1) subquery
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_fiches_de_poste"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_fiches_de_poste" ("id" integer,"code_rome" varchar,"nom_rome" varchar,"recrutement_ouvert" integer,"type_contrat" varchar,"id_employeur" integer,"type_employeur" varchar,"siret_employeur" varchar,"nom_employeur" varchar,"mises_a_jour_champs" JSONB,
                                                                                                                                                                                                                                                                                              "département_employeur" varchar,"nom_département_employeur" varchar,"région_employeur" varchar,"total_candidatures" integer,"date_création" date,"date_dernière_modification" date,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."id" IS \'ID de la fiche de poste\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."code_rome" IS \'Code ROME de la fiche de poste\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."nom_rome" IS \'Nom du ROME de la fiche de poste\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."recrutement_ouvert" IS \'Recrutement ouvert à ce jour\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."type_contrat" IS \'Type de contrat proposé\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."id_employeur" IS \'ID employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."type_employeur" IS \'Type employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."siret_employeur" IS \'SIRET employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."nom_employeur" IS \'Nom employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."mises_a_jour_champs" IS \'historique des mises à jour sur le modèle\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."département_employeur" IS \'Département employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."nom_département_employeur" IS \'Nom complet du département employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."région_employeur" IS \'Région employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."total_candidatures" IS \'Total de candidatures reçues\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."date_création" IS \'Date de création\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."date_dernière_modification" IS \'Date de dernière modification\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_fiches_de_poste"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "companies_jobdescription"."id",
                 "companies_jobdescription"."appellation_id",
                 "companies_jobdescription"."company_id",
                 "companies_jobdescription"."created_at",
                 "companies_jobdescription"."updated_at",
                 "companies_jobdescription"."is_active",
                 "companies_jobdescription"."last_employer_update_at",
                 "companies_jobdescription"."custom_name",
                 "companies_jobdescription"."description",
                 "companies_jobdescription"."ui_rank",
                 "companies_jobdescription"."contract_type",
                 "companies_jobdescription"."other_contract_type",
                 "companies_jobdescription"."location_id",
                 "companies_jobdescription"."hours_per_week",
                 "companies_jobdescription"."open_positions",
                 "companies_jobdescription"."profile_description",
                 "companies_jobdescription"."is_resume_mandatory",
                 "companies_jobdescription"."is_qpv_mandatory",
                 "companies_jobdescription"."market_context_description",
                 "companies_jobdescription"."source_id",
                 "companies_jobdescription"."source_kind",
                 "companies_jobdescription"."source_url",
                 "companies_jobdescription"."source_tags",
                 "companies_jobdescription"."field_history",
                 "companies_jobdescription"."creation_source",
                 COUNT("job_applications_jobapplication_selected_jobs"."jobapplication_id") AS "job_applications_count",
                 "jobs_appellation"."updated_at",
                 "jobs_appellation"."code",
                 "jobs_appellation"."name",
                 "jobs_appellation"."rome_id",
                 "jobs_appellation"."full_text",
                 "jobs_rome"."updated_at",
                 "jobs_rome"."code",
                 "jobs_rome"."name",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."spontaneous_applications_open_since",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id",
                 "companies_company"."fields_history"
          FROM "companies_jobdescription"
          INNER JOIN "companies_company" ON ("companies_jobdescription"."company_id" = "companies_company"."id")
          LEFT OUTER JOIN "job_applications_jobapplication_selected_jobs" ON ("companies_jobdescription"."id" = "job_applications_jobapplication_selected_jobs"."jobdescription_id")
          INNER JOIN "jobs_appellation" ON ("companies_jobdescription"."appellation_id" = "jobs_appellation"."code")
          LEFT OUTER JOIN "jobs_rome" ON ("jobs_appellation"."rome_id" = "jobs_rome"."code")
          WHERE "companies_jobdescription"."company_id" IN
              (SELECT V0."id"
               FROM "companies_company" V0
               WHERE (NOT (V0."siret" = %s)
                      AND (NOT (V0."kind" IN (%s,
                                              %s,
                                              %s,
                                              %s,
                                              %s))
                           OR V0."source" = %s
                           OR EXISTS
                             (SELECT %s AS "a"
                              FROM "companies_siaeconvention" U0
                              WHERE (U0."id" = (V0."convention_id")
                                     AND U0."is_active")
                              LIMIT 1))))
          GROUP BY "companies_jobdescription"."id",
                   "jobs_appellation"."code",
                   "jobs_rome"."code",
                   "companies_company"."id"
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_fiches_de_poste" ("id",
                                        "code_rome",
                                        "nom_rome",
                                        "recrutement_ouvert",
                                        "type_contrat",
                                        "id_employeur",
                                        "type_employeur",
                                        "siret_employeur",
                                        "nom_employeur",
                                        "mises_a_jour_champs",
                                        "département_employeur",
                                        "nom_département_employeur",
                                        "région_employeur",
                                        "total_candidatures",
                                        "date_création",
                                        "date_dernière_modification",
                                        "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_fiches_de_poste" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "fiches_de_poste" RENAME TO "z_old_fiches_de_poste"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_fiches_de_poste" RENAME TO "fiches_de_poste"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_fiches_de_poste" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_descriptions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_job_seekers
  dict({
    'num_queries': 82,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'get_table[metabase/tables/job_seekers.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'get_table[metabase/tables/job_seekers.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "eligibility_administrativecriteria"."id",
                 "eligibility_administrativecriteria"."level",
                 "eligibility_administrativecriteria"."name",
                 "eligibility_administrativecriteria"."desc",
                 "eligibility_administrativecriteria"."written_proof",
                 "eligibility_administrativecriteria"."written_proof_url",
                 "eligibility_administrativecriteria"."written_proof_validity",
                 "eligibility_administrativecriteria"."kind",
                 "eligibility_administrativecriteria"."ui_rank",
                 "eligibility_administrativecriteria"."created_at"
          FROM "eligibility_administrativecriteria"
          ORDER BY "eligibility_administrativecriteria"."id" ASC
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*)
          FROM
            (SELECT
               (SELECT U2."kind" AS "to_company__kind"
                FROM "job_applications_jobapplication" U0
                INNER JOIN "companies_company" U2 ON (U0."to_company_id" = U2."id")
                WHERE (U0."state" = %s
                       AND U0."job_seeker_id" = ("users_user"."id"))
                ORDER BY U0."created_at" DESC
                LIMIT 1) AS "last_hiring_company_kind"
             FROM "users_user"
             LEFT OUTER JOIN "eligibility_eligibilitydiagnosis" ON ("users_user"."id" = "eligibility_eligibilitydiagnosis"."job_seeker_id")
             LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
             WHERE "users_user"."kind" = %s
             GROUP BY "users_user"."id") subquery
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_candidats_v0"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_candidats_v0" ("id" integer,"hash_nir" varchar,"sexe_selon_nir" varchar,"annee_naissance_selon_nir" integer,"mois_naissance_selon_nir" integer,"age" integer,"date_inscription" date,"type_inscription" varchar,"pe_connect" integer,"pe_inscrit" integer,"date_dernière_connexion" date,"date_premiere_connexion" date,"actif" integer,"code_postal" varchar,"département" varchar,"nom_département" varchar,"région" varchar,"adresse_en_qpv" varchar,"total_candidatures" integer,"total_embauches" integer,"total_diagnostics" integer,"date_diagnostic" date,"date_expiration_diagnostic" date,"diagnostic_valide" integer,"id_auteur_diagnostic_prescripteur" integer,"id_auteur_diagnostic_employeur" integer,"type_auteur_diagnostic" varchar,"sous_type_auteur_diagnostic" varchar,"nom_auteur_diagnostic" varchar,"type_structure_dernière_embauche" varchar,"total_critères_niveau_1" integer,"total_critères_niveau_2" integer,"critère_n1_bénéficiaire_du_rsa" integer,"critère_n1_bénéficiaire_du_rsa_certifié" integer,"critère_n1_bénéficiaire_du_rsa_date_certification" timestamp WITH TIME ZONE,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          "critère_n1_bénéficiaire_du_rsa_période_certification" daterange,
critère_n1_allocataire_ass" integer,"critère_n1_allocataire_aah" integer,"critère_n1_allocataire_aah_certifié" integer,"critère_n1_allocataire_aah_date_certification" timestamp WITH TIME ZONE,
critère_n1_allocataire_aah_période_certification" daterange,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      "critère_n1_detld_plus_de_24_mois" integer,"critère_n2_niveau_d_étude_3_cap_bep_ou_infra" integer,"critère_n2_senior_plus_de_50_ans" integer,"critère_n2_jeune_moins_de_26_ans" integer,"critère_n2_sortant_de_l_ase" integer,"critère_n2_deld_12_à_24_mois" integer,"critère_n2_travailleur_handicapé" integer,"critère_n2_parent_isolé" integer,"critère_n2_parent_isolé_certifié" integer,"critère_n2_parent_isolé_date_certification" timestamp WITH TIME ZONE,
critère_n2_parent_isolé_période_certification" daterange,
critère_n2_personne_sans_hébergement_ou_hébergée_ou_ayant_un_parcours_de_rue" integer,"critère_n2_réfugié_statutaire_bénéficiaire_d_une_protection_temporaire_protégé_subsidiaire_ou_demandeur_d_asile" integer,"critère_n2_résident_zrr" integer,"critère_n2_résident_qpv" integer,"critère_n2_sortant_de_détention_ou_personne_placée_sous_main_de_justice" integer,"critère_n2_maîtrise_de_la_langue_française_inférieure_au_niveau_a1" integer,"critère_n2_problème_de_mobilité" integer,"injection_ai" integer,"date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."id" IS \'ID C1 du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."hash_nir" IS \'Version obfusquée du NIR\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."sexe_selon_nir" IS \'Sexe du candidat selon le NIR\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."annee_naissance_selon_nir" IS \'Année de naissance du candidat selon le NIR\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."mois_naissance_selon_nir" IS \'Mois de naissance du candidat selon le NIR\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."age" IS \'Age du candidat en années\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."date_inscription" IS \'Date inscription du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."type_inscription" IS \'Type inscription du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."pe_connect" IS \'Le candidat utilise PE Connect\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."pe_inscrit" IS \'Le candidat a un identifiant PE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."date_dernière_connexion" IS \'Date de dernière connexion au service du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."date_premiere_connexion" IS \'Date de première connexion\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."actif" IS \'Dernière connexion dans les 7 jours\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."code_postal" IS \'Code postal du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."département" IS \'Département du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."nom_département" IS \'Nom complet du département du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."région" IS \'Région du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."adresse_en_qpv" IS \'Analyse QPV sur adresse du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."total_candidatures" IS \'Nombre de candidatures\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."total_embauches" IS \'Nombre de candidatures de type accepté\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."total_diagnostics" IS \'Nombre de diagnostics\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."date_diagnostic" IS \'Date du dernier diagnostic\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."date_expiration_diagnostic" IS \'Date d\'\'expiration du dernier diagnostic\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."diagnostic_valide" IS \'Validité du dernier diagnostic au moment de l\'\'import\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."id_auteur_diagnostic_prescripteur" IS \'ID auteur diagnostic si prescripteur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."id_auteur_diagnostic_employeur" IS \'ID auteur diagnostic si employeur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."type_auteur_diagnostic" IS \'Type auteur du dernier diagnostic\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."sous_type_auteur_diagnostic" IS \'Sous type auteur du dernier diagnostic\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."nom_auteur_diagnostic" IS \'Nom auteur du dernier diagnostic\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."type_structure_dernière_embauche" IS \'Type de la structure destinataire de la dernière embauche du candidat\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."total_critères_niveau_1" IS \'Total critères de niveau 1 du dernier diagnostic\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."total_critères_niveau_2" IS \'Total critères de niveau 2 du dernier diagnostic\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_bénéficiaire_du_rsa" IS \'Critère Bénéficiaire du RSA (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_bénéficiaire_du_rsa_certifié" IS \'Certification du critère Bénéficiaire du RSA (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_bénéficiaire_du_rsa_date_certification" IS \'Date de la dernière Certification du critère Bénéficiaire du RSA (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_bénéficiaire_du_rsa_période_certification" IS \'Période de Certification du critère Bénéficiaire du RSA (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_allocataire_ass" IS \'Critère Allocataire ASS (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_allocataire_aah" IS \'Critère Allocataire AAH (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_allocataire_aah_certifié" IS \'Certification du critère Allocataire AAH (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_allocataire_aah_date_certification" IS \'Date de la dernière Certification du critère Allocataire AAH (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_allocataire_aah_période_certification" IS \'Période de Certification du critère Allocataire AAH (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n1_detld_plus_de_24_mois" IS \'Critère DETLD (plus de 24 mois) (niveau 1)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_niveau_d_étude_3_cap_bep_ou_infra" IS \'Critère Niveau d étude 3 (CAP BEP) ou infra (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_senior_plus_de_50_ans" IS \'Critère Senior (plus de 50 ans) (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_jeune_moins_de_26_ans" IS \'Critère Jeune (moins de 26 ans) (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_sortant_de_l_ase" IS \'Critère Sortant de l ASE (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_deld_12_à_24_mois" IS \'Critère DELD (12 à 24 mois) (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_travailleur_handicapé" IS \'Critère Travailleur handicapé (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_parent_isolé" IS \'Critère Parent isolé (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_parent_isolé_certifié" IS \'Certification du critère Parent isolé (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_parent_isolé_date_certification" IS \'Date de la dernière Certification du critère Parent isolé (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_parent_isolé_période_certification" IS \'Période de Certification du critère Parent isolé (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_personne_sans_hébergement_ou_hébergée_ou_ayant_un_parcours_de_rue" IS \'Critère Personne sans hébergement ou hébergée ou ayant un parcours de rue (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_réfugié_statutaire_bénéficiaire_d_une_protection_temporaire_protégé_subsidiaire_ou_demandeur_d_asile" IS \'Critère Réfugié statutaire bénéficiaire d une protection temporaire protégé subsidiaire ou demandeur d asile (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_résident_zrr" IS \'Critère Résident ZRR (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_résident_qpv" IS \'Critère Résident QPV (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_sortant_de_détention_ou_personne_placée_sous_main_de_justice" IS \'Critère Sortant de détention ou personne placée sous main de justice (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_maîtrise_de_la_langue_française_inférieure_au_niveau_a1" IS \'Critère Maîtrise de la langue française inférieure au niveau A1 (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."critère_n2_problème_de_mobilité" IS \'Critère Problème de mobilité (niveau 2)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."injection_ai" IS \'Provient des injections AI\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_candidats_v0"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."last_login",
                 "users_user"."date_joined",
                 "users_user"."post_code",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."identity_provider",
                 "users_user"."created_by_id",
                 "users_user"."first_login",
                 COUNT(DISTINCT "eligibility_eligibilitydiagnosis"."id") AS "eligibility_diagnoses_count",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") AS "job_applications_count",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE "job_applications_jobapplication"."state" = %s) AS "accepted_job_applications_count",
          
            (SELECT U2."kind" AS "to_company__kind"
             FROM "job_applications_jobapplication" U0
             INNER JOIN "companies_company" U2 ON (U0."to_company_id" = U2."id")
             WHERE (U0."state" = %s
                    AND U0."job_seeker_id" = ("users_user"."id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "last_hiring_company_kind",
                 T4."id",
                 T4."is_staff",
                 T4."kind",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."pole_emploi_id"
          FROM "users_user"
          LEFT OUTER JOIN "eligibility_eligibilitydiagnosis" ON ("users_user"."id" = "eligibility_eligibilitydiagnosis"."job_seeker_id")
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
          LEFT OUTER JOIN "users_user" T4 ON ("users_user"."created_by_id" = T4."id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          WHERE "users_user"."kind" = %s
          GROUP BY "users_user"."id",
                   T4."id",
                   "users_jobseekerprofile"."user_id"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "col1",
                 "col2",
                 "col3",
                 "col4",
                 "col5",
                 "col6",
                 "col7",
                 "level_1_count",
                 "level_2_count",
                 "criteria_ids",
                 "col8",
                 "col9",
                 "col10",
                 "col11",
                 "col12",
                 "col13",
                 "col14"
          FROM
            (SELECT *
             FROM
               (SELECT "eligibility_eligibilitydiagnosis"."id" AS "col1",
                       "eligibility_eligibilitydiagnosis"."author_kind" AS "col2",
                       "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" AS "col3",
                       "eligibility_eligibilitydiagnosis"."created_at" AS "col4",
                       "eligibility_eligibilitydiagnosis"."expires_at" AS "col5",
                       "eligibility_eligibilitydiagnosis"."job_seeker_id" AS "col6",
                       "eligibility_eligibilitydiagnosis"."author_siae_id" AS "col7",
                       COUNT("eligibility_selectedadministrativecriteria"."administrative_criteria_id") FILTER (
                                                                                                                WHERE "eligibility_administrativecriteria"."level" = %s) AS "level_1_count",
                       COUNT("eligibility_selectedadministrativecriteria"."administrative_criteria_id") FILTER (
                                                                                                                WHERE "eligibility_administrativecriteria"."level" = %s) AS "level_2_count",
                       ARRAY_AGG("eligibility_selectedadministrativecriteria"."administrative_criteria_id") AS "criteria_ids",
                       ROW_NUMBER() OVER (PARTITION BY "eligibility_eligibilitydiagnosis"."job_seeker_id"
                                          ORDER BY "eligibility_eligibilitydiagnosis"."created_at" DESC) AS "qual0",
                       "prescribers_prescriberorganization"."id" AS "col8",
                       "prescribers_prescriberorganization"."name" AS "col9",
                       "prescribers_prescriberorganization"."kind" AS "col10",
                       "companies_company"."id" AS "col11",
                       "companies_company"."name" AS "col12",
                       "companies_company"."kind" AS "col13",
                       "companies_company"."brand" AS "col14"
                FROM "eligibility_eligibilitydiagnosis"
                LEFT OUTER JOIN "eligibility_selectedadministrativecriteria" ON ("eligibility_eligibilitydiagnosis"."id" = "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id")
                LEFT OUTER JOIN "eligibility_administrativecriteria" ON ("eligibility_selectedadministrativecriteria"."administrative_criteria_id" = "eligibility_administrativecriteria"."id")
                LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
                LEFT OUTER JOIN "companies_company" ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = "companies_company"."id")
                WHERE "eligibility_eligibilitydiagnosis"."job_seeker_id" IN (%s,
                                                                             %s,
                                                                             %s)
                GROUP BY 1,
                         12,
                         15
                ORDER BY "eligibility_eligibilitydiagnosis"."created_at" DESC) "qualify"
             WHERE ("qual0" > %s
                    AND "qual0" <= %s)) "qualify_mask"
          ORDER BY "col4" DESC
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "eligibility_selectedadministrativecriteria"."id",
                 "eligibility_selectedadministrativecriteria"."certified",
                 "eligibility_selectedadministrativecriteria"."certified_at",
                 "eligibility_selectedadministrativecriteria"."certification_period",
                 "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id",
                 "eligibility_selectedadministrativecriteria"."administrative_criteria_id"
          FROM "eligibility_selectedadministrativecriteria"
          INNER JOIN "eligibility_administrativecriteria" ON ("eligibility_selectedadministrativecriteria"."administrative_criteria_id" = "eligibility_administrativecriteria"."id")
          WHERE "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id" IN (%s,
                                                                                            %s)
          ORDER BY "eligibility_administrativecriteria"."level" ASC,
                   "eligibility_administrativecriteria"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'get_qpv_job_seeker_pks[metabase/tables/utils.py]',
          'get_job_seeker_qpv_info[metabase/tables/job_seekers.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT uu.id
          FROM users_user uu
          INNER JOIN geo_qpv gq ON ST_Contains(gq.geometry, uu.coords::geometry)
          WHERE uu.coords IS NOT NULL
            AND uu.geocoding_score > 0.8
        ''',
      }),
      dict({
        'origin': list([
          'get_ai_stock_job_seeker_pks[metabase/tables/utils.py]',
          '<lambda>[metabase/tables/job_seekers.py]',
          'convert_boolean_to_int[metabase/utils.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."user_id" AS "user_id"
          FROM "approvals_approval"
          WHERE "approvals_approval"."origin" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_candidats_v0" ("id",
                                     "hash_nir",
                                     "sexe_selon_nir",
                                     "annee_naissance_selon_nir",
                                     "mois_naissance_selon_nir",
                                     "age",
                                     "date_inscription",
                                     "type_inscription",
                                     "pe_connect",
                                     "pe_inscrit",
                                     "date_dernière_connexion",
                                     "date_premiere_connexion",
                                     "actif",
                                     "code_postal",
                                     "département",
                                     "nom_département",
                                     "région",
                                     "adresse_en_qpv",
                                     "total_candidatures",
                                     "total_embauches",
                                     "total_diagnostics",
                                     "date_diagnostic",
                                     "date_expiration_diagnostic",
                                     "diagnostic_valide",
                                     "id_auteur_diagnostic_prescripteur",
                                     "id_auteur_diagnostic_employeur",
                                     "type_auteur_diagnostic",
                                     "sous_type_auteur_diagnostic",
                                     "nom_auteur_diagnostic",
                                     "type_structure_dernière_embauche",
                                     "total_critères_niveau_1",
                                     "total_critères_niveau_2",
                                     "critère_n1_bénéficiaire_du_rsa",
                                     "critère_n1_bénéficiaire_du_rsa_certifié",
                                     "critère_n1_bénéficiaire_du_rsa_date_certification",
                                     "critère_n1_bénéficiaire_du_rsa_période_certification",
                                     "critère_n1_allocataire_ass",
                                     "critère_n1_allocataire_aah",
                                     "critère_n1_allocataire_aah_certifié",
                                     "critère_n1_allocataire_aah_date_certification",
                                     "critère_n1_allocataire_aah_période_certification",
                                     "critère_n1_detld_plus_de_24_mois",
                                     "critère_n2_niveau_d_étude_3_cap_bep_ou_infra",
                                     "critère_n2_senior_plus_de_50_ans",
                                     "critère_n2_jeune_moins_de_26_ans",
                                     "critère_n2_sortant_de_l_ase",
                                     "critère_n2_deld_12_à_24_mois",
                                     "critère_n2_travailleur_handicapé",
                                     "critère_n2_parent_isolé",
                                     "critère_n2_parent_isolé_certifié",
                                     "critère_n2_parent_isolé_date_certification",
                                     "critère_n2_parent_isolé_période_certification",
                                     "critère_n2_personne_sans_hébergement_ou_hébergée_ou_ayant_un_parcours_de_rue",
                                     "critère_n2_réfugié_statutaire_bénéficiaire_d_une_protection_temporaire_protégé_subsidiaire_ou_demandeur_d_asile",
                                     "critère_n2_résident_zrr",
                                     "critère_n2_résident_qpv",
                                     "critère_n2_sortant_de_détention_ou_personne_placée_sous_main_de_justice",
                                     "critère_n2_maîtrise_de_la_langue_française_inférieure_au_niveau_a1",
                                     "critère_n2_problème_de_mobilité",
                                     "injection_ai",
                                     "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_candidats_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "candidats_v0" RENAME TO "z_old_candidats_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_candidats_v0" RENAME TO "candidats_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_candidats_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_job_seekers[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_memberships
  dict({
    'num_queries': 30,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "companies_companymembership"
          INNER JOIN "users_user" ON ("companies_companymembership"."user_id" = "users_user"."id")
          WHERE ("users_user"."is_active"
                 AND "companies_companymembership"."is_active")
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "prescribers_prescribermembership"
          INNER JOIN "users_user" ON ("prescribers_prescribermembership"."user_id" = "users_user"."id")
          WHERE ("users_user"."is_active"
                 AND "prescribers_prescribermembership"."is_active")
        ''',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "institutions_institutionmembership"
          INNER JOIN "users_user" ON ("institutions_institutionmembership"."user_id" = "users_user"."id")
          WHERE ("users_user"."is_active"
                 AND "institutions_institutionmembership"."is_active")
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_collaborations"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_collaborations" ("id_utilisateur" integer,"administrateur" integer,"id_structure" integer,"id_organisation" integer,"id_institution" integer,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_collaborations"."id_utilisateur" IS \'user\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_collaborations"."administrateur" IS \'administrateur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_collaborations"."id_structure" IS \'ID structure\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_collaborations"."id_organisation" IS \'ID organisation prescripteur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_collaborations"."id_institution" IS \'ID institution\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_collaborations"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "companies_companymembership"."id",
                 "companies_companymembership"."user_id",
                 "companies_companymembership"."joined_at",
                 "companies_companymembership"."is_admin",
                 "companies_companymembership"."is_active",
                 "companies_companymembership"."created_at",
                 "companies_companymembership"."updated_at",
                 "companies_companymembership"."company_id",
                 "companies_companymembership"."updated_by_id"
          FROM "companies_companymembership"
          INNER JOIN "users_user" ON ("companies_companymembership"."user_id" = "users_user"."id")
          WHERE ("users_user"."is_active"
                 AND "companies_companymembership"."is_active")
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_collaborations" ("id_utilisateur",
                                       "administrateur",
                                       "id_structure",
                                       "id_organisation",
                                       "id_institution",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "prescribers_prescribermembership"."id",
                 "prescribers_prescribermembership"."user_id",
                 "prescribers_prescribermembership"."joined_at",
                 "prescribers_prescribermembership"."is_admin",
                 "prescribers_prescribermembership"."is_active",
                 "prescribers_prescribermembership"."created_at",
                 "prescribers_prescribermembership"."updated_at",
                 "prescribers_prescribermembership"."organization_id",
                 "prescribers_prescribermembership"."updated_by_id"
          FROM "prescribers_prescribermembership"
          INNER JOIN "users_user" ON ("prescribers_prescribermembership"."user_id" = "users_user"."id")
          WHERE ("users_user"."is_active"
                 AND "prescribers_prescribermembership"."is_active")
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_collaborations" ("id_utilisateur",
                                       "administrateur",
                                       "id_structure",
                                       "id_organisation",
                                       "id_institution",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "institutions_institutionmembership"."id",
                 "institutions_institutionmembership"."user_id",
                 "institutions_institutionmembership"."joined_at",
                 "institutions_institutionmembership"."is_admin",
                 "institutions_institutionmembership"."is_active",
                 "institutions_institutionmembership"."created_at",
                 "institutions_institutionmembership"."updated_at",
                 "institutions_institutionmembership"."institution_id",
                 "institutions_institutionmembership"."updated_by_id"
          FROM "institutions_institutionmembership"
          INNER JOIN "users_user" ON ("institutions_institutionmembership"."user_id" = "users_user"."id")
          WHERE ("users_user"."is_active"
                 AND "institutions_institutionmembership"."is_active")
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_collaborations" ("id_utilisateur",
                                       "administrateur",
                                       "id_structure",
                                       "id_organisation",
                                       "id_institution",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_collaborations" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "collaborations" RENAME TO "z_old_collaborations"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_collaborations" RENAME TO "collaborations"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_collaborations" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_memberships[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_organizations
  dict({
    'num_queries': 48,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*)
          FROM
            (SELECT
               (SELECT COUNT(*) AS "count"
                FROM "prescribers_prescribermembership" U0
                INNER JOIN "users_user" U1 ON (U0."user_id" = U1."id")
                WHERE (U1."is_active"
                       AND U0."is_active"
                       AND U0."organization_id" = ("prescribers_prescriberorganization"."id"))
                GROUP BY U0."organization_id"
                ORDER BY RANDOM() ASC
                LIMIT 1) AS "active_memberships_count",
          
               (SELECT MIN(U0."joined_at") AS "min"
                FROM "prescribers_prescribermembership" U0
                WHERE U0."organization_id" = ("prescribers_prescriberorganization"."id")
                GROUP BY U0."organization_id"
                ORDER BY RANDOM() ASC
                LIMIT 1) AS "first_membership_join_date",
          
               (SELECT MAX(U2."last_login") AS "max"
                FROM "prescribers_prescribermembership" U0
                INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                WHERE U0."organization_id" = ("prescribers_prescriberorganization"."id")
                GROUP BY U0."organization_id"
                ORDER BY RANDOM() ASC
                LIMIT 1) AS "last_login_date"
             FROM "prescribers_prescriberorganization"
             LEFT OUTER JOIN "job_applications_jobapplication" ON ("prescribers_prescriberorganization"."id" = "job_applications_jobapplication"."sender_prescriber_organization_id")
             GROUP BY "prescribers_prescriberorganization"."id") subquery
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_organisations_v0"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_organisations_v0" ("id" integer,"siret" varchar,"nom" varchar,"type" varchar,"type_complet" varchar,"habilitée" integer,"adresse_ligne_1" varchar,"adresse_ligne_2" varchar,"code_postal" varchar,"code_commune" varchar,"ville" varchar,"longitude" double precision,"latitude" double precision,"département" varchar,"nom_département" varchar,"région" varchar,"date_inscription" date,"code_safir" varchar,"total_membres" integer,"total_candidatures" integer,"total_embauches" integer,"date_dernière_candidature" date,"date_dernière_connexion" date,"active" integer,"brsa" integer,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."id" IS \'ID organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."siret" IS \'SIRET organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."nom" IS \'Nom organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."type" IS \'Type organisation (abrégé)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."type_complet" IS \'Type organisation (détaillé)\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."habilitée" IS \'Organisation habilitée\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."adresse_ligne_1" IS \'Première ligne adresse de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."adresse_ligne_2" IS \'Seconde ligne adresse de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."code_postal" IS \'Code postal de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."code_commune" IS \'Code commune de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."ville" IS \'Ville de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."longitude" IS \'Longitude de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."latitude" IS \'Latitude de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."département" IS \'Département de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."nom_département" IS \'Nom complet du département de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."région" IS \'Région de cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."date_inscription" IS \'Date inscription du premier compte prescripteur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."code_safir" IS \'Code SAFIR Pôle emploi\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."total_membres" IS \'Nombre de comptes prescripteurs rattachés à cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."total_candidatures" IS \'Nombre de candidatures émises par cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."total_embauches" IS \'Nombre de candidatures en état accepté émises par cette organisation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."date_dernière_candidature" IS \'Date de la dernière création de candidature\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."date_dernière_connexion" IS \'Date de dernière connexion utilisateur\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."active" IS \'Dernière connexion dans les 7 jours\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."brsa" IS \'Organisation conventionnée pour le suivi des BRSA\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_organisations_v0"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'get_post_code_to_insee_cities_map[metabase/tables/utils.py]',
          'get_code_commune[metabase/tables/utils.py]',
          '<lambda>[metabase/tables/utils.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "cities_city"."id",
                 "cities_city"."name",
                 "cities_city"."post_codes",
                 "cities_city"."code_insee"
          FROM "cities_city"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'get_org_members_count[metabase/tables/organizations.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "users_user"
          LEFT OUTER JOIN "prescribers_prescribermembership" ON ("users_user"."id" = "prescribers_prescribermembership"."user_id")
          WHERE ("users_user"."kind" = %s
                 AND "prescribers_prescribermembership"."id" IS NULL)
        ''',
      }),
      dict({
        'origin': list([
          'get_org_job_applications_count[metabase/tables/organizations.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "job_applications_jobapplication"
          WHERE ("job_applications_jobapplication"."sender_kind" = %s
                 AND "job_applications_jobapplication"."sender_prescriber_organization_id" IS NULL
                 AND "job_applications_jobapplication"."to_company_id" IN
                   (SELECT V0."id"
                    FROM "companies_company" V0
                    WHERE (NOT (V0."siret" = %s)
                           AND (NOT (V0."kind" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s,
                                                   %s))
                                OR V0."source" = %s
                                OR EXISTS
                                  (SELECT %s AS "a"
                                   FROM "companies_siaeconvention" U0
                                   WHERE (U0."id" = (V0."convention_id")
                                          AND U0."is_active")
                                   LIMIT 1))))
                 AND NOT ("job_applications_jobapplication"."origin" = %s))
        ''',
      }),
      dict({
        'origin': list([
          'get_org_accepted_job_applications_count[metabase/tables/organizations.py]',
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "job_applications_jobapplication"
          WHERE ("job_applications_jobapplication"."sender_kind" = %s
                 AND "job_applications_jobapplication"."sender_prescriber_organization_id" IS NULL
                 AND "job_applications_jobapplication"."to_company_id" IN
                   (SELECT V0."id"
                    FROM "companies_company" V0
                    WHERE (NOT (V0."siret" = %s)
                           AND (NOT (V0."kind" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s,
                                                   %s))
                                OR V0."source" = %s
                                OR EXISTS
                                  (SELECT %s AS "a"
                                   FROM "companies_siaeconvention" U0
                                   WHERE (U0."id" = (V0."convention_id")
                                          AND U0."is_active")
                                   LIMIT 1))))
                 AND NOT ("job_applications_jobapplication"."origin" = %s)
                 AND "job_applications_jobapplication"."state" = %s)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_organisations_v0" ("id",
                                         "siret",
                                         "nom",
                                         "type",
                                         "type_complet",
                                         "habilitée",
                                         "adresse_ligne_1",
                                         "adresse_ligne_2",
                                         "code_postal",
                                         "code_commune",
                                         "ville",
                                         "longitude",
                                         "latitude",
                                         "département",
                                         "nom_département",
                                         "région",
                                         "date_inscription",
                                         "code_safir",
                                         "total_membres",
                                         "total_candidatures",
                                         "total_embauches",
                                         "date_dernière_candidature",
                                         "date_dernière_connexion",
                                         "active",
                                         "brsa",
                                         "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."authorization_status",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE (NOT ("job_applications_jobapplication"."origin" = %s
                                                                                            AND "job_applications_jobapplication"."origin" IS NOT NULL)
                                                                                       AND "job_applications_jobapplication"."to_company_id" IN
                                                                                         (SELECT V0."id"
                                                                                          FROM "companies_company" V0
                                                                                          WHERE (NOT (V0."siret" = %s)
                                                                                                 AND (NOT (V0."kind" IN (%s, %s, %s, %s, %s))
                                                                                                      OR V0."source" = %s
                                                                                                      OR EXISTS
                                                                                                        (SELECT %s AS "a"
                                                                                                         FROM "companies_siaeconvention" U0
                                                                                                         WHERE (U0."id" = (V0."convention_id")
                                                                                                                AND U0."is_active")
                                                                                                         LIMIT 1)))))) AS "job_applications_count",
                 COUNT(DISTINCT "job_applications_jobapplication"."id") FILTER (
                                                                                WHERE (NOT ("job_applications_jobapplication"."origin" = %s
                                                                                            AND "job_applications_jobapplication"."origin" IS NOT NULL)
                                                                                       AND "job_applications_jobapplication"."to_company_id" IN
                                                                                         (SELECT V0."id"
                                                                                          FROM "companies_company" V0
                                                                                          WHERE (NOT (V0."siret" = %s)
                                                                                                 AND (NOT (V0."kind" IN (%s, %s, %s, %s, %s))
                                                                                                      OR V0."source" = %s
                                                                                                      OR EXISTS
                                                                                                        (SELECT %s AS "a"
                                                                                                         FROM "companies_siaeconvention" U0
                                                                                                         WHERE (U0."id" = (V0."convention_id")
                                                                                                                AND U0."is_active")
                                                                                                         LIMIT 1))))
                                                                                       AND "job_applications_jobapplication"."state" = %s)) AS "accepted_job_applications_count",
                 MAX("job_applications_jobapplication"."created_at") FILTER (
                                                                             WHERE (NOT ("job_applications_jobapplication"."origin" = %s
                                                                                         AND "job_applications_jobapplication"."origin" IS NOT NULL)
                                                                                    AND "job_applications_jobapplication"."to_company_id" IN
                                                                                      (SELECT V0."id"
                                                                                       FROM "companies_company" V0
                                                                                       WHERE (NOT (V0."siret" = %s)
                                                                                              AND (NOT (V0."kind" IN (%s, %s, %s, %s, %s))
                                                                                                   OR V0."source" = %s
                                                                                                   OR EXISTS
                                                                                                     (SELECT %s AS "a"
                                                                                                      FROM "companies_siaeconvention" U0
                                                                                                      WHERE (U0."id" = (V0."convention_id")
                                                                                                             AND U0."is_active")
                                                                                                      LIMIT 1)))))) AS "last_job_application_creation_date",
          
            (SELECT COUNT(*) AS "count"
             FROM "prescribers_prescribermembership" U0
             INNER JOIN "users_user" U1 ON (U0."user_id" = U1."id")
             WHERE (U1."is_active"
                    AND U0."is_active"
                    AND U0."organization_id" = ("prescribers_prescriberorganization"."id"))
             GROUP BY U0."organization_id"
             ORDER BY RANDOM() ASC
             LIMIT 1) AS "active_memberships_count",
          
            (SELECT MIN(U0."joined_at") AS "min"
             FROM "prescribers_prescribermembership" U0
             WHERE U0."organization_id" = ("prescribers_prescriberorganization"."id")
             GROUP BY U0."organization_id"
             ORDER BY RANDOM() ASC
             LIMIT 1) AS "first_membership_join_date",
          
            (SELECT MAX(U2."last_login") AS "max"
             FROM "prescribers_prescribermembership" U0
             INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
             WHERE U0."organization_id" = ("prescribers_prescriberorganization"."id")
             GROUP BY U0."organization_id"
             ORDER BY RANDOM() ASC
             LIMIT 1) AS "last_login_date",
                 "cities_city"."id",
                 "cities_city"."code_insee"
          FROM "prescribers_prescriberorganization"
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("prescribers_prescriberorganization"."id" = "job_applications_jobapplication"."sender_prescriber_organization_id")
          LEFT OUTER JOIN "cities_city" ON ("prescribers_prescriberorganization"."insee_city_id" = "cities_city"."id")
          GROUP BY "prescribers_prescriberorganization"."id",
                   "cities_city"."id"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_organisations_v0" ("id",
                                         "siret",
                                         "nom",
                                         "type",
                                         "type_complet",
                                         "habilitée",
                                         "adresse_ligne_1",
                                         "adresse_ligne_2",
                                         "code_postal",
                                         "code_commune",
                                         "ville",
                                         "longitude",
                                         "latitude",
                                         "département",
                                         "nom_département",
                                         "région",
                                         "date_inscription",
                                         "code_safir",
                                         "total_membres",
                                         "total_candidatures",
                                         "total_embauches",
                                         "date_dernière_candidature",
                                         "date_dernière_connexion",
                                         "active",
                                         "brsa",
                                         "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_organisations_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "organisations_v0" RENAME TO "z_old_organisations_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_organisations_v0" RENAME TO "organisations_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_organisations_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_organizations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_prolongation_requests
  dict({
    'num_queries': 33,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "approvals_prolongationrequest"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_demandes_de_prolongation"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_demandes_de_prolongation" ("id" integer,"id_pass_agrément" integer,"date_début" date,"date_fin" date,"motif" varchar,"id_utilisateur_déclarant" integer,"id_structure_déclarante" integer,"id_organisation_prescripteur" integer,"id_utilisateur_prescripteur" integer,"id_prolongation" integer,"état" varchar,"motif_de_refus" varchar,"date_de_demande" date,"date_traitement" timestamp WITH TIME ZONE,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  "id_utilisateur_traitant" integer,"date_envoi_rappel" timestamp WITH TIME ZONE,
date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id_pass_agrément" IS \'PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."date_début" IS \'date de début\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."date_fin" IS \'date de fin\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."motif" IS \'Motif renseigné\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id_utilisateur_déclarant" IS \'déclarée par\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id_structure_déclarante" IS \'SIAE du déclarant\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id_organisation_prescripteur" IS \'organisation du prescripteur habilité\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id_utilisateur_prescripteur" IS \'prescripteur habilité qui a reçu la demande de prolongation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id_prolongation" IS \'ID C1 de la prolongation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."état" IS \'Etat de la demande\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."motif_de_refus" IS \'Motif de refus de la demande\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."date_de_demande" IS \'Date de la demande\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."date_traitement" IS \'date de traitement\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."id_utilisateur_traitant" IS \'traité par\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."date_envoi_rappel" IS \'rappel envoyé le\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_demandes_de_prolongation"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "approvals_prolongationrequest"."id",
                 "approvals_prolongationrequest"."approval_id",
                 "approvals_prolongationrequest"."start_at",
                 "approvals_prolongationrequest"."end_at",
                 "approvals_prolongationrequest"."reason",
                 "approvals_prolongationrequest"."reason_explanation",
                 "approvals_prolongationrequest"."declared_by_id",
                 "approvals_prolongationrequest"."declared_by_siae_id",
                 "approvals_prolongationrequest"."prescriber_organization_id",
                 "approvals_prolongationrequest"."created_at",
                 "approvals_prolongationrequest"."created_by_id",
                 "approvals_prolongationrequest"."updated_at",
                 "approvals_prolongationrequest"."updated_by_id",
                 "approvals_prolongationrequest"."report_file_id",
                 "approvals_prolongationrequest"."require_phone_interview",
                 "approvals_prolongationrequest"."contact_email",
                 "approvals_prolongationrequest"."contact_phone",
                 "approvals_prolongationrequest"."status",
                 "approvals_prolongationrequest"."assigned_to_id",
                 "approvals_prolongationrequest"."processed_at",
                 "approvals_prolongationrequest"."processed_by_id",
                 "approvals_prolongationrequest"."reminder_sent_at",
                 "approvals_prolongationrequestdenyinformation"."id",
                 "approvals_prolongationrequestdenyinformation"."request_id",
                 "approvals_prolongationrequestdenyinformation"."reason",
                 "approvals_prolongationrequestdenyinformation"."reason_explanation",
                 "approvals_prolongationrequestdenyinformation"."proposed_actions",
                 "approvals_prolongationrequestdenyinformation"."proposed_actions_explanation",
                 "approvals_prolongationrequestdenyinformation"."created_at",
                 "approvals_prolongationrequestdenyinformation"."updated_at",
                 "approvals_prolongation"."id",
                 "approvals_prolongation"."approval_id",
                 "approvals_prolongation"."start_at",
                 "approvals_prolongation"."end_at",
                 "approvals_prolongation"."reason",
                 "approvals_prolongation"."reason_explanation",
                 "approvals_prolongation"."declared_by_id",
                 "approvals_prolongation"."declared_by_siae_id",
                 "approvals_prolongation"."prescriber_organization_id",
                 "approvals_prolongation"."created_at",
                 "approvals_prolongation"."created_by_id",
                 "approvals_prolongation"."updated_at",
                 "approvals_prolongation"."updated_by_id",
                 "approvals_prolongation"."report_file_id",
                 "approvals_prolongation"."require_phone_interview",
                 "approvals_prolongation"."contact_email",
                 "approvals_prolongation"."contact_phone",
                 "approvals_prolongation"."request_id",
                 "approvals_prolongation"."validated_by_id"
          FROM "approvals_prolongationrequest"
          LEFT OUTER JOIN "approvals_prolongationrequestdenyinformation" ON ("approvals_prolongationrequest"."id" = "approvals_prolongationrequestdenyinformation"."request_id")
          LEFT OUTER JOIN "approvals_prolongation" ON ("approvals_prolongationrequest"."id" = "approvals_prolongation"."request_id")
          ORDER BY "approvals_prolongationrequest"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_demandes_de_prolongation" ("id",
                                                 "id_pass_agrément",
                                                 "date_début",
                                                 "date_fin",
                                                 "motif",
                                                 "id_utilisateur_déclarant",
                                                 "id_structure_déclarante",
                                                 "id_organisation_prescripteur",
                                                 "id_utilisateur_prescripteur",
                                                 "id_prolongation",
                                                 "état",
                                                 "motif_de_refus",
                                                 "date_de_demande",
                                                 "date_traitement",
                                                 "id_utilisateur_traitant",
                                                 "date_envoi_rappel",
                                                 "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_demandes_de_prolongation" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "demandes_de_prolongation" RENAME TO "z_old_demandes_de_prolongation"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_demandes_de_prolongation" RENAME TO "demandes_de_prolongation"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_demandes_de_prolongation" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongation_requests[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_prolongations
  dict({
    'num_queries': 28,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "approvals_prolongation"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_prolongations"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_prolongations" ("id" integer,"id_pass_agrément" integer,"date_début" date,"date_fin" date,"motif" varchar,"id_utilisateur_déclarant" integer,"id_structure_déclarante" integer,"id_organisation_prescripteur" integer,"id_utilisateur_prescripteur" integer,"date_de_création" date,"id_demande_de_prolongation" integer,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."id_pass_agrément" IS \'PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."date_début" IS \'date de début\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."date_fin" IS \'date de fin\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."motif" IS \'Motif renseigné\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."id_utilisateur_déclarant" IS \'déclarée par\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."id_structure_déclarante" IS \'SIAE du déclarant\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."id_organisation_prescripteur" IS \'organisation du prescripteur habilité\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."id_utilisateur_prescripteur" IS \'prescripteur habilité qui a autorisé cette prolongation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."date_de_création" IS \'Date de création\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."id_demande_de_prolongation" IS \'demande de prolongation\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_prolongations"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "approvals_prolongation"."id",
                 "approvals_prolongation"."approval_id",
                 "approvals_prolongation"."start_at",
                 "approvals_prolongation"."end_at",
                 "approvals_prolongation"."reason",
                 "approvals_prolongation"."reason_explanation",
                 "approvals_prolongation"."declared_by_id",
                 "approvals_prolongation"."declared_by_siae_id",
                 "approvals_prolongation"."prescriber_organization_id",
                 "approvals_prolongation"."created_at",
                 "approvals_prolongation"."created_by_id",
                 "approvals_prolongation"."updated_at",
                 "approvals_prolongation"."updated_by_id",
                 "approvals_prolongation"."report_file_id",
                 "approvals_prolongation"."require_phone_interview",
                 "approvals_prolongation"."contact_email",
                 "approvals_prolongation"."contact_phone",
                 "approvals_prolongation"."request_id",
                 "approvals_prolongation"."validated_by_id"
          FROM "approvals_prolongation"
          ORDER BY "approvals_prolongation"."start_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_prolongations" ("id",
                                      "id_pass_agrément",
                                      "date_début",
                                      "date_fin",
                                      "motif",
                                      "id_utilisateur_déclarant",
                                      "id_structure_déclarante",
                                      "id_organisation_prescripteur",
                                      "id_utilisateur_prescripteur",
                                      "date_de_création",
                                      "id_demande_de_prolongation",
                                      "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_prolongations" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "prolongations" RENAME TO "z_old_prolongations"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_prolongations" RENAME TO "prolongations"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_prolongations" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_prolongations[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_suspensions
  dict({
    'num_queries': 24,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "approvals_suspension"
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_suspensions_v0"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          CREATE TABLE IF NOT EXISTS "z_new_suspensions_v0" ("id" integer,"id_pass_agrément" integer,"date_début" date,"date_fin" date,"motif" varchar,"en_cours" integer,"date_de_création" timestamp WITH TIME ZONE,
                                                                                                                                                                                                                 "date_mise_à_jour_metabase" date)
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."id_pass_agrément" IS \'PASS\xa0IAE\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."date_début" IS \'date de début\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."date_fin" IS \'date de fin\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."motif" IS \'motif\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."en_cours" IS \'La suspension est en cours\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."date_de_création" IS \'date de création\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_suspensions_v0"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "approvals_suspension"."id",
                 "approvals_suspension"."approval_id",
                 "approvals_suspension"."start_at",
                 "approvals_suspension"."end_at",
                 "approvals_suspension"."siae_id",
                 "approvals_suspension"."reason",
                 "approvals_suspension"."reason_explanation",
                 "approvals_suspension"."created_at",
                 "approvals_suspension"."created_by_id",
                 "approvals_suspension"."updated_at",
                 "approvals_suspension"."updated_by_id"
          FROM "approvals_suspension"
          ORDER BY "approvals_suspension"."start_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_suspensions_v0" ("id",
                                       "id_pass_agrément",
                                       "date_début",
                                       "date_fin",
                                       "motif",
                                       "en_cours",
                                       "date_de_création",
                                       "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_suspensions_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "suspensions_v0" RENAME TO "z_old_suspensions_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_suspensions_v0" RENAME TO "suspensions_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_suspensions_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_suspensions[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
# name: test_populate_users
  dict({
    'num_queries': 22,
    'queries': list([
      dict({
        'origin': list([
          '_set_context_connection_wrapper[utils/triggers/__init__.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': "SELECT set_config('itou.context', %s, TRUE)",
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "users_user"
          WHERE ("users_user"."is_active"
                 AND "users_user"."kind" IN (%s,
                                             %s,
                                             %s))
        ''',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_new_utilisateurs_v0"',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'CREATE TABLE IF NOT EXISTS "z_new_utilisateurs_v0" ("id" integer,"email" varchar,"type" varchar,"prenom" varchar,"nom" varchar,"date_mise_à_jour_metabase" date)',
      }),
      dict({
        'origin': list([
          'create_table[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_utilisateurs_v0"."id" IS \'ID\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_utilisateurs_v0"."email" IS \'adresse e-mail\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_utilisateurs_v0"."type" IS \'type\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_utilisateurs_v0"."prenom" IS \'prénom\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_utilisateurs_v0"."nom" IS \'nom\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMENT ON COLUMN "z_new_utilisateurs_v0"."date_mise_à_jour_metabase" IS \'Date de dernière mise à jour de Metabase\'',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 "users_user"."allow_next_sso_sub_update"
          FROM "users_user"
          WHERE ("users_user"."is_active"
                 AND "users_user"."kind" IN (%s,
                                             %s,
                                             %s))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': '''
          COPY "z_new_utilisateurs_v0" ("id",
                                        "email",
                                        "type",
                                        "prenom",
                                        "nom",
                                        "date_mise_à_jour_metabase")
          FROM STDIN WITH (FORMAT BINARY)
        ''',
      }),
      dict({
        'origin': list([
          'inject_chunk[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_utilisateurs_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE IF EXISTS "utilisateurs_v0" RENAME TO "z_old_utilisateurs_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'ALTER TABLE "z_new_utilisateurs_v0" RENAME TO "utilisateurs_v0"',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'DROP TABLE IF EXISTS "z_old_utilisateurs_v0" CASCADE',
      }),
      dict({
        'origin': list([
          'rename_table_atomically[metabase/db.py]',
          'populate_table[metabase/db.py]',
          'Command.populate_users[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.handle[metabase/management/commands/populate_metabase_emplois.py]',
          'Command.execute[utils/command.py]',
        ]),
        'sql': 'COMMIT',
      }),
    ]),
  })
# ---
