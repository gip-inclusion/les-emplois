# serializer version: 1
# name: test_empty_list[/job-seekers/list-organization]
  '''
  <main class="s-main" id="main" role="main">
              <div aria-atomic="true" aria-live="polite" class="toast-container">
  
  </div>
  
              <section class="s-title-02">
                  <div class="s-title-02__container container">
                      <div class="s-title-02__row row">
                          <div class="s-title-02__col col-12">
                              
      
  
  
  
  
                              
      
  <div class="c-title">
      <div class="c-title__main">
              <h1>Candidats</h1>
          </div>
      
          <div aria-label="Actions sur les candidatures" class="c-title__cta" role="group">
              
              <a class="btn btn-lg btn-secondary btn-ico" data-matomo-action="clic" data-matomo-category="compte-candidat" data-matomo-event="true" data-matomo-option="creer-un-compte-candidat" href="/job-seekers/start?tunnel=standalone&amp;from_url=/job-seekers/list-organization">
                  <i aria-hidden="true" class="ri-user-add-line fw-medium"></i>
                  <span>Créer un compte candidat</span>
              </a>
              <a class="btn btn-lg btn-primary btn-ico" href="/search/employers/results">
                  <i aria-hidden="true" class="ri-draft-line fw-medium"></i>
                  <span>Postuler pour un candidat</span>
              </a>
          </div>
      
      
  </div>
  
  
                              
      
  
  
                              
      
          <ul class="s-tabs-01__nav nav nav-tabs mb-0" data-it-sliding-tabs="true">
              <li class="nav-item">
                  <a class="nav-link" href="/job-seekers/list">
                      Mes candidats
                  </a>
              </li>
              <li class="nav-item">
                  <a class="nav-link active" href="/job-seekers/list-organization">
                      Tous les candidats de la structure
                  </a>
              </li>
          </ul>
      
  
                          </div>
                      </div>
                  </div>
              </section>
  
              
      
  <div aria-labelledby="offcanvasApplyFiltersLabel" class="c-offcanvas-filters offcanvas offcanvas-end" id="offcanvasApplyFilters" tabindex="-1">
      <div class="offcanvas-header">
          <h4 class="mb-0 btn-ico" id="offcanvasApplyFiltersLabel">
              <i aria-hidden="true" class="ri-sound-module-fill fw-medium"></i>
              <span>Filtrer</span>
          </h4>
          <button aria-label="Fermer" class="btn-close" data-bs-dismiss="offcanvas" type="button"></button>
      </div>
      <div class="offcanvas-body" id="offcanvasApplyFiltersContent">
      
  
  
      <fieldset>
          <legend>
              <button aria-controls="collapseEligibility" aria-expanded="false" class="btn btn-outline-transparent has-collapse-caret collapsed" data-bs-target="#collapseEligibility" data-bs-toggle="collapse" type="button">Éligibilité IAE</button>
          </legend>
          <div class="my-3 collapse" id="collapseEligibility">
              <ul>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_eligibility_validated" id="id_eligibility_validated-offcanvas" name="eligibility_validated" type="checkbox"/>
          <label class="form-check-label" for="id_eligibility_validated-offcanvas">Valide</label>
      </div>
  </div>
  
                  </li>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_eligibility_pending" id="id_eligibility_pending-offcanvas" name="eligibility_pending" type="checkbox"/>
          <label class="form-check-label" for="id_eligibility_pending-offcanvas">À valider</label>
      </div>
  </div>
  
                  </li>
              </ul>
          </div>
      </fieldset>
      <hr/>
      <fieldset>
          <legend>
              <button aria-controls="collapseApproval" aria-expanded="false" class="btn btn-outline-transparent has-collapse-caret collapsed" data-bs-target="#collapseApproval" data-bs-toggle="collapse" type="button">
                  PASS IAE
              </button>
          </legend>
          <div class="my-3 collapse" id="collapseApproval">
              <ul>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_pass_iae_active" id="id_pass_iae_active-offcanvas" name="pass_iae_active" type="checkbox"/>
          <label class="form-check-label" for="id_pass_iae_active-offcanvas">Valide</label>
      </div>
  </div>
  
                  </li>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_pass_iae_expired" id="id_pass_iae_expired-offcanvas" name="pass_iae_expired" type="checkbox"/>
          <label class="form-check-label" for="id_pass_iae_expired-offcanvas">Expiré</label>
      </div>
  </div>
  
                  </li>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_no_pass_iae" id="id_no_pass_iae-offcanvas" name="no_pass_iae" type="checkbox"/>
          <label class="form-check-label" for="id_no_pass_iae-offcanvas">Aucun</label>
      </div>
  </div>
  
                  </li>
              </ul>
          </div>
      </fieldset>
  
  
      
          <hr/>
          
  
  <fieldset>
      <legend>
          <button aria-controls="collapseSenders" aria-expanded="false" class="btn btn-outline-transparent has-collapse-caret collapsed" data-bs-target="#collapseSenders" data-bs-toggle="collapse" type="button">
              Collaborateurs
          </button>
      </legend>
      <div class="mt-3 collapse" id="collapseSenders">
          
              <div class="form-group"><label class="form-label" for="id_organization_members">Nom de la personne</label><select class="form-select django-select2" data-allow-clear="true" data-minimum-input-length="0" data-placeholder="" data-theme="bootstrap-5" id="id_organization_members" lang="fr" multiple="" name="organization_members">
  </select></div>
          
      </div>
  </fieldset>
  
      
  </div>
  
      <div class="offcanvas-footer gap-3" id="offcanvasApplyFiltersButtons">
      <button class="btn btn-block btn-primary" data-bs-dismiss="offcanvas" type="button">Voir</button>
      
  
  
      
  
  
      
  
  
  </div>
  
  </div>
  
      <section class="s-section">
          <div class="s-section__container container">
              
                  
              
              <form hx-get="/job-seekers/list-organization" hx-include="#id_job_seeker,#id_organization_members" hx-indicator="#job-seekers-section" hx-push-url="true" hx-swap="outerHTML" hx-target="#job-seekers-section" hx-trigger="change from:#id_order, change delay:.5s, change from:#id_job_seeker delay:.5s, change from:#id_organization_members delay:.5s">
                  
  
  <div class="s-section__row row selection-indicator" data-emplois-elements-visibility-on-selection="hidden">
      <div class="col-12">
          <div></div>
          <div class="btn-dropdown-filter-group mb-3 mb-md-4">
              
  
  
      <div class="dropdown">
          <button aria-expanded="false" class="btn btn-dropdown-filter dropdown-toggle" data-bs-auto-close="outside" data-bs-toggle="dropdown" type="button">
              Situation IAE
          </button>
          <ul class="dropdown-menu">
              <li>
                  <strong class="dropdown-header">Éligibilité IAE</strong>
              </li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_eligibility_validated" name="eligibility_validated" type="checkbox"/><label class="form-check-label" for="id_eligibility_validated">Valide</label></div></div></li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_eligibility_pending" name="eligibility_pending" type="checkbox"/><label class="form-check-label" for="id_eligibility_pending">À valider</label></div></div></li>
              <li>
                  <hr class="dropdown-divider"/>
              </li>
              <li>
                  <strong class="dropdown-header">PASS IAE</strong>
              </li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_pass_iae_active" name="pass_iae_active" type="checkbox"/><label class="form-check-label" for="id_pass_iae_active">Valide</label></div></div></li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_pass_iae_expired" name="pass_iae_expired" type="checkbox"/><label class="form-check-label" for="id_pass_iae_expired">Expiré</label></div></div></li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_no_pass_iae" name="no_pass_iae" type="checkbox"/><label class="form-check-label" for="id_no_pass_iae">Aucun</label></div></div></li>
          </ul>
      </div>
  
  
              <div class="dropdown">
                  <button aria-expanded="false" class="btn btn-dropdown-filter dropdown-toggle" data-bs-auto-close="outside" data-bs-toggle="dropdown" type="button">
                      Candidat sans solution
                  </button>
                  <ul class="dropdown-menu">
                      <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_is_stalled" name="is_stalled" type="checkbox"/><label class="form-check-label" for="id_is_stalled">N’afficher que les candidats sans solution</label></div></div></li>
                      <li>
                          <hr class="dropdown-divider"/>
                      </li>
                      <li>
                          <a class="btn btn-link has-external-link" href="https://aide.emplois.inclusion.beta.gouv.fr/hc/fr/articles/33573455767441--Qu-est-ce-qu-un-candidat-sans-solution-sur-les-Emplois-de-l-inclusion" rel="noopener" target="_blank">Qu’est-ce qu’un candidat sans solution ?</a>
                      </li>
                  </ul>
              </div>
              
                  <button aria-controls="offcanvasApplyFilters" class="btn btn-ico btn-dropdown-filter" data-bs-target="#offcanvasApplyFilters" data-bs-toggle="offcanvas" type="button">
                      <i aria-hidden="true" class="ri-sound-module-fill fw-medium"></i>
                      <span>Tous les filtres <span id="all-filters-btn"></span></span>
                  </button>
              
              
  
  
      
  
  
      <div class="ms-md-auto" id="job-seekers-list-filter-counter">
          
      </div>
  
  
          </div>
      </div>
  </div>
  
                  <input id="id_order" name="order" type="hidden" value="full_name"/>
              </form>
              <div class="s-section__row row">
                  <div class="col-12">
                      <div class="d-flex flex-column flex-md-row align-items-md-center mb-3 mb-md-4">
                          <div class="flex-md-grow-1">
                              
  
  <p class="mb-0" id="job-seekers-list-count">
      0 résultat
  </p>
  
                          </div>
                          <div class="flex-column flex-md-row mt-3 mt-md-0">
                              <div class="w-lg-400px"><label class="visually-hidden" for="id_job_seeker">Nom</label><select class="form-select django-select2" data-allow-clear="true" data-minimum-input-length="0" data-placeholder="Nom du candidat" data-theme="bootstrap-5" id="id_job_seeker" lang="fr" name="job_seeker">
    <option selected="" value=""></option>
  
  </select></div>
                          </div>
                      </div>
                      
  
  
  
  
  <section aria-labelledby="job-seekers-list-count" id="job-seekers-section">
      
          <div class="text-center my-3 my-md-4">
              <img alt="" class="img-fluid" loading="lazy" src="/static/img/illustration-card-no-result.png"/>
              <p class="mb-1 mt-3">
                  <strong>Aucun candidat pour le moment</strong>
              </p>
          </div>
      
  </section>
  
  
  
                  </div>
              </div>
          </div>
      </section>
  
          </main>
  '''
# ---
# name: test_empty_list[/job-seekers/list]
  '''
  <main class="s-main" id="main" role="main">
              <div aria-atomic="true" aria-live="polite" class="toast-container">
  
  </div>
  
              <section class="s-title-02">
                  <div class="s-title-02__container container">
                      <div class="s-title-02__row row">
                          <div class="s-title-02__col col-12">
                              
      
  
  
  
  
                              
      
  <div class="c-title">
      <div class="c-title__main">
              <h1>Candidats</h1>
          </div>
      
          <div aria-label="Actions sur les candidatures" class="c-title__cta" role="group">
              
              <a class="btn btn-lg btn-secondary btn-ico" data-matomo-action="clic" data-matomo-category="compte-candidat" data-matomo-event="true" data-matomo-option="creer-un-compte-candidat" href="/job-seekers/start?tunnel=standalone&amp;from_url=/job-seekers/list">
                  <i aria-hidden="true" class="ri-user-add-line fw-medium"></i>
                  <span>Créer un compte candidat</span>
              </a>
              <a class="btn btn-lg btn-primary btn-ico" href="/search/employers/results">
                  <i aria-hidden="true" class="ri-draft-line fw-medium"></i>
                  <span>Postuler pour un candidat</span>
              </a>
          </div>
      
      
  </div>
  
  
                              
      
  
  
                              
      
          <ul class="s-tabs-01__nav nav nav-tabs mb-0" data-it-sliding-tabs="true">
              <li class="nav-item">
                  <a class="nav-link active" href="/job-seekers/list">
                      Mes candidats
                  </a>
              </li>
              <li class="nav-item">
                  <a class="nav-link" href="/job-seekers/list-organization">
                      Tous les candidats de la structure
                  </a>
              </li>
          </ul>
      
  
                          </div>
                      </div>
                  </div>
              </section>
  
              
      
  <div aria-labelledby="offcanvasApplyFiltersLabel" class="c-offcanvas-filters offcanvas offcanvas-end" id="offcanvasApplyFilters" tabindex="-1">
      <div class="offcanvas-header">
          <h4 class="mb-0 btn-ico" id="offcanvasApplyFiltersLabel">
              <i aria-hidden="true" class="ri-sound-module-fill fw-medium"></i>
              <span>Filtrer</span>
          </h4>
          <button aria-label="Fermer" class="btn-close" data-bs-dismiss="offcanvas" type="button"></button>
      </div>
      <div class="offcanvas-body" id="offcanvasApplyFiltersContent">
      
  
  
      <fieldset>
          <legend>
              <button aria-controls="collapseEligibility" aria-expanded="false" class="btn btn-outline-transparent has-collapse-caret collapsed" data-bs-target="#collapseEligibility" data-bs-toggle="collapse" type="button">Éligibilité IAE</button>
          </legend>
          <div class="my-3 collapse" id="collapseEligibility">
              <ul>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_eligibility_validated" id="id_eligibility_validated-offcanvas" name="eligibility_validated" type="checkbox"/>
          <label class="form-check-label" for="id_eligibility_validated-offcanvas">Valide</label>
      </div>
  </div>
  
                  </li>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_eligibility_pending" id="id_eligibility_pending-offcanvas" name="eligibility_pending" type="checkbox"/>
          <label class="form-check-label" for="id_eligibility_pending-offcanvas">À valider</label>
      </div>
  </div>
  
                  </li>
              </ul>
          </div>
      </fieldset>
      <hr/>
      <fieldset>
          <legend>
              <button aria-controls="collapseApproval" aria-expanded="false" class="btn btn-outline-transparent has-collapse-caret collapsed" data-bs-target="#collapseApproval" data-bs-toggle="collapse" type="button">
                  PASS IAE
              </button>
          </legend>
          <div class="my-3 collapse" id="collapseApproval">
              <ul>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_pass_iae_active" id="id_pass_iae_active-offcanvas" name="pass_iae_active" type="checkbox"/>
          <label class="form-check-label" for="id_pass_iae_active-offcanvas">Valide</label>
      </div>
  </div>
  
                  </li>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_pass_iae_expired" id="id_pass_iae_expired-offcanvas" name="pass_iae_expired" type="checkbox"/>
          <label class="form-check-label" for="id_pass_iae_expired-offcanvas">Expiré</label>
      </div>
  </div>
  
                  </li>
                  <li>
                      
  <div class="dropdown-item">
      <div class="form-check">
          <input class="form-check-input" data-emplois-sync-with="id_no_pass_iae" id="id_no_pass_iae-offcanvas" name="no_pass_iae" type="checkbox"/>
          <label class="form-check-label" for="id_no_pass_iae-offcanvas">Aucun</label>
      </div>
  </div>
  
                  </li>
              </ul>
          </div>
      </fieldset>
  
  
      
  </div>
  
      <div class="offcanvas-footer gap-3" id="offcanvasApplyFiltersButtons">
      <button class="btn btn-block btn-primary" data-bs-dismiss="offcanvas" type="button">Voir</button>
      
  
  
      
  
  
      
  
  
  </div>
  
  </div>
  
      <section class="s-section">
          <div class="s-section__container container">
              
                  
              
              <form hx-get="/job-seekers/list" hx-include="#id_job_seeker" hx-indicator="#job-seekers-section" hx-push-url="true" hx-swap="outerHTML" hx-target="#job-seekers-section" hx-trigger="change from:#id_order, change delay:.5s, change from:#id_job_seeker delay:.5s">
                  
  
  <div class="s-section__row row selection-indicator" data-emplois-elements-visibility-on-selection="hidden">
      <div class="col-12">
          <div></div>
          <div class="btn-dropdown-filter-group mb-3 mb-md-4">
              
  
  
      <div class="dropdown">
          <button aria-expanded="false" class="btn btn-dropdown-filter dropdown-toggle" data-bs-auto-close="outside" data-bs-toggle="dropdown" type="button">
              Situation IAE
          </button>
          <ul class="dropdown-menu">
              <li>
                  <strong class="dropdown-header">Éligibilité IAE</strong>
              </li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_eligibility_validated" name="eligibility_validated" type="checkbox"/><label class="form-check-label" for="id_eligibility_validated">Valide</label></div></div></li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_eligibility_pending" name="eligibility_pending" type="checkbox"/><label class="form-check-label" for="id_eligibility_pending">À valider</label></div></div></li>
              <li>
                  <hr class="dropdown-divider"/>
              </li>
              <li>
                  <strong class="dropdown-header">PASS IAE</strong>
              </li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_pass_iae_active" name="pass_iae_active" type="checkbox"/><label class="form-check-label" for="id_pass_iae_active">Valide</label></div></div></li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_pass_iae_expired" name="pass_iae_expired" type="checkbox"/><label class="form-check-label" for="id_pass_iae_expired">Expiré</label></div></div></li>
              <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_no_pass_iae" name="no_pass_iae" type="checkbox"/><label class="form-check-label" for="id_no_pass_iae">Aucun</label></div></div></li>
          </ul>
      </div>
  
  
              <div class="dropdown">
                  <button aria-expanded="false" class="btn btn-dropdown-filter dropdown-toggle" data-bs-auto-close="outside" data-bs-toggle="dropdown" type="button">
                      Candidat sans solution
                  </button>
                  <ul class="dropdown-menu">
                      <li><div class="dropdown-item"><div class="form-check"><input class="form-check-input" id="id_is_stalled" name="is_stalled" type="checkbox"/><label class="form-check-label" for="id_is_stalled">N’afficher que les candidats sans solution</label></div></div></li>
                      <li>
                          <hr class="dropdown-divider"/>
                      </li>
                      <li>
                          <a class="btn btn-link has-external-link" href="https://aide.emplois.inclusion.beta.gouv.fr/hc/fr/articles/33573455767441--Qu-est-ce-qu-un-candidat-sans-solution-sur-les-Emplois-de-l-inclusion" rel="noopener" target="_blank">Qu’est-ce qu’un candidat sans solution ?</a>
                      </li>
                  </ul>
              </div>
              
              
  
  
      
  
  
      <div class="ms-md-auto" id="job-seekers-list-filter-counter">
          
      </div>
  
  
          </div>
      </div>
  </div>
  
                  <input id="id_order" name="order" type="hidden" value="full_name"/>
              </form>
              <div class="s-section__row row">
                  <div class="col-12">
                      <div class="d-flex flex-column flex-md-row align-items-md-center mb-3 mb-md-4">
                          <div class="flex-md-grow-1">
                              
  
  <p class="mb-0" id="job-seekers-list-count">
      0 résultat
  </p>
  
                          </div>
                          <div class="flex-column flex-md-row mt-3 mt-md-0">
                              <div class="w-lg-400px"><label class="visually-hidden" for="id_job_seeker">Nom</label><select class="form-select django-select2" data-allow-clear="true" data-minimum-input-length="0" data-placeholder="Nom du candidat" data-theme="bootstrap-5" id="id_job_seeker" lang="fr" name="job_seeker">
    <option selected="" value=""></option>
  
  </select></div>
                          </div>
                      </div>
                      
  
  
  
  
  <section aria-labelledby="job-seekers-list-count" id="job-seekers-section">
      
          <div class="text-center my-3 my-md-4">
              <img alt="" class="img-fluid" loading="lazy" src="/static/img/illustration-card-no-result.png"/>
              <p class="mb-1 mt-3">
                  <strong>Aucun candidat pour le moment</strong>
              </p>
          </div>
      
  </section>
  
  
  
                  </div>
              </div>
          </div>
      </section>
  
          </main>
  '''
# ---
# name: test_multiple.1
  dict({
    'num_queries': 20,
    'queries': list([
      dict({
        'origin': list([
          'SessionStore._get_session_from_db[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          SELECT "django_session"."session_key",
                 "django_session"."session_data",
                 "django_session"."expire_date"
          FROM "django_session"
          WHERE ("django_session"."expire_date" > %s
                 AND "django_session"."session_key" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at"
          FROM "users_user"
          WHERE "users_user"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "prescribers_prescribermembership"."id",
                 "prescribers_prescribermembership"."user_id",
                 "prescribers_prescribermembership"."joined_at",
                 "prescribers_prescribermembership"."is_admin",
                 "prescribers_prescribermembership"."is_active",
                 "prescribers_prescribermembership"."created_at",
                 "prescribers_prescribermembership"."updated_at",
                 "prescribers_prescribermembership"."organization_id",
                 "prescribers_prescribermembership"."updated_by_id",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id"
          FROM "prescribers_prescribermembership"
          INNER JOIN "prescribers_prescriberorganization" ON ("prescribers_prescribermembership"."organization_id" = "prescribers_prescriberorganization"."id")
          WHERE ("prescribers_prescribermembership"."user_id" = %s
                 AND "prescribers_prescribermembership"."is_active")
          ORDER BY "prescribers_prescribermembership"."created_at" ASC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          
            (SELECT "users_user"."id" AS "col1"
             FROM "users_user"
             LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
             WHERE (("users_user"."created_by_id" = %s
                     AND "users_jobseekerprofile"."created_by_prescriber_organization_id" IS NULL)
                    OR ("users_user"."created_by_id" = %s
                        AND "users_jobseekerprofile"."created_by_prescriber_organization_id" = %s))
             ORDER BY RANDOM() ASC)
          UNION
            (SELECT "job_applications_jobapplication"."job_seeker_id" AS "col1"
             FROM "job_applications_jobapplication"
             WHERE (("job_applications_jobapplication"."sender_id" = %s
                     AND "job_applications_jobapplication"."sender_prescriber_organization_id" IS NULL)
                    OR ("job_applications_jobapplication"."sender_id" = %s
                        AND "job_applications_jobapplication"."sender_prescriber_organization_id" = %s))
             ORDER BY "job_applications_jobapplication"."created_at" DESC)
          UNION
            (SELECT "eligibility_eligibilitydiagnosis"."job_seeker_id" AS "col1"
             FROM "eligibility_eligibilitydiagnosis"
             WHERE (("eligibility_eligibilitydiagnosis"."author_id" = %s
                     AND "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" IS NULL)
                    OR ("eligibility_eligibilitydiagnosis"."author_id" = %s
                        AND "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = %s))
             ORDER BY "eligibility_eligibilitydiagnosis"."created_at" DESC)
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_job_seeker[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                 COALESCE(
                            (SELECT COUNT(U0."id") AS "count"
                             FROM "job_applications_jobapplication" U0
                             WHERE (((U0."sender_id" = %s
                                      AND U0."sender_prescriber_organization_id" IS NULL)
                                     OR U0."sender_prescriber_organization_id" = %s)
                                    AND U0."job_seeker_id" = ("users_user"."id"))
                             GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
            (SELECT MAX(U0."updated_at") AS "last_update"
             FROM "job_applications_jobapplication" U0
             WHERE (((U0."sender_id" = %s
                      AND U0."sender_prescriber_organization_id" IS NULL)
                     OR U0."sender_prescriber_organization_id" = %s)
                    AND U0."job_seeker_id" = ("users_user"."id"))
             GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
            (SELECT U0."id"
             FROM "eligibility_eligibilitydiagnosis" U0
             WHERE (U0."expires_at" > %s
                    AND U0."author_kind" = %s
                    AND U0."job_seeker_id" = ("users_user"."id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "valid_eligibility_diagnosis",
                 ARRAY_AGG(DISTINCT "job_applications_jobapplication"."sender_id") FILTER (
                                                                                           WHERE "job_applications_jobapplication"."sender_id" IS NOT NULL) AS "application_sent_by",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."are_allocation_since",
                 "users_jobseekerprofile"."activity_bonus_since",
                 "users_jobseekerprofile"."cape_freelance",
                 "users_jobseekerprofile"."cesa_freelance",
                 "users_jobseekerprofile"."actor_met_for_business_creation",
                 "users_jobseekerprofile"."mean_monthly_income_before_process",
                 "users_jobseekerprofile"."eiti_contributions",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "users_jobseekerprofile"."created_by_prescriber_organization_id",
                 "users_jobseekerprofile"."is_stalled",
                 "users_jobseekerprofile"."fields_history"
          FROM "users_user"
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          WHERE ("users_user"."kind" = %s
                 AND "users_user"."id" IN (%s,
                                           %s,
                                           %s,
                                           %s))
          GROUP BY "users_user"."id",
                   35,
                   36,
                   "users_jobseekerprofile"."user_id"
          ORDER BY "users_user"."first_name" ASC,
                   "users_user"."last_name" ASC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_job_seeker[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind",
                 "approvals_approval"."public_id"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s)
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_organization_members[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                 COALESCE(
                            (SELECT COUNT(U0."id") AS "count"
                             FROM "job_applications_jobapplication" U0
                             WHERE (((U0."sender_id" = %s
                                      AND U0."sender_prescriber_organization_id" IS NULL)
                                     OR U0."sender_prescriber_organization_id" = %s)
                                    AND U0."job_seeker_id" = ("users_user"."id"))
                             GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
            (SELECT MAX(U0."updated_at") AS "last_update"
             FROM "job_applications_jobapplication" U0
             WHERE (((U0."sender_id" = %s
                      AND U0."sender_prescriber_organization_id" IS NULL)
                     OR U0."sender_prescriber_organization_id" = %s)
                    AND U0."job_seeker_id" = ("users_user"."id"))
             GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
            (SELECT U0."id"
             FROM "eligibility_eligibilitydiagnosis" U0
             WHERE (U0."expires_at" > %s
                    AND U0."author_kind" = %s
                    AND U0."job_seeker_id" = ("users_user"."id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "valid_eligibility_diagnosis",
                 ARRAY_AGG(DISTINCT "job_applications_jobapplication"."sender_id") FILTER (
                                                                                           WHERE "job_applications_jobapplication"."sender_id" IS NOT NULL) AS "application_sent_by",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."are_allocation_since",
                 "users_jobseekerprofile"."activity_bonus_since",
                 "users_jobseekerprofile"."cape_freelance",
                 "users_jobseekerprofile"."cesa_freelance",
                 "users_jobseekerprofile"."actor_met_for_business_creation",
                 "users_jobseekerprofile"."mean_monthly_income_before_process",
                 "users_jobseekerprofile"."eiti_contributions",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "users_jobseekerprofile"."created_by_prescriber_organization_id",
                 "users_jobseekerprofile"."is_stalled",
                 "users_jobseekerprofile"."fields_history"
          FROM "users_user"
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          WHERE ("users_user"."kind" = %s
                 AND "users_user"."id" IN (%s,
                                           %s,
                                           %s,
                                           %s))
          GROUP BY "users_user"."id",
                   35,
                   36,
                   "users_jobseekerprofile"."user_id"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_organization_members[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind",
                 "approvals_approval"."public_id"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s)
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_organization_members[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at"
          FROM "users_user"
          INNER JOIN "prescribers_prescribermembership" ON ("users_user"."id" = "prescribers_prescribermembership"."user_id")
          WHERE ("prescribers_prescribermembership"."organization_id" = %s
                 AND "users_user"."id" IN (%s))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'ItouPaginator.count[<site-packages>/django/core/paginator.py]',
          'pager[utils/pagination.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT COUNT(*)
          FROM
            (SELECT (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                    COALESCE(
                               (SELECT COUNT(U0."id") AS "count"
                                FROM "job_applications_jobapplication" U0
                                WHERE (((U0."sender_id" = %s
                                         AND U0."sender_prescriber_organization_id" IS NULL)
                                        OR U0."sender_prescriber_organization_id" = %s)
                                       AND U0."job_seeker_id" = ("users_user"."id"))
                                GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
               (SELECT MAX(U0."updated_at") AS "last_update"
                FROM "job_applications_jobapplication" U0
                WHERE (((U0."sender_id" = %s
                         AND U0."sender_prescriber_organization_id" IS NULL)
                        OR U0."sender_prescriber_organization_id" = %s)
                       AND U0."job_seeker_id" = ("users_user"."id"))
                GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
               (SELECT U0."id"
                FROM "eligibility_eligibilitydiagnosis" U0
                WHERE (U0."expires_at" > %s
                       AND U0."author_kind" = %s
                       AND U0."job_seeker_id" = ("users_user"."id"))
                ORDER BY U0."created_at" DESC
                LIMIT 1) AS "valid_eligibility_diagnosis"
             FROM "users_user"
             LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
             WHERE ("users_user"."kind" = %s
                    AND "users_user"."id" IN (%s,
                                              %s,
                                              %s,
                                              %s))
             GROUP BY "users_user"."id",
                      1,
                      2) subquery
        ''',
      }),
      dict({
        'origin': list([
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                 COALESCE(
                            (SELECT COUNT(U0."id") AS "count"
                             FROM "job_applications_jobapplication" U0
                             WHERE (((U0."sender_id" = %s
                                      AND U0."sender_prescriber_organization_id" IS NULL)
                                     OR U0."sender_prescriber_organization_id" = %s)
                                    AND U0."job_seeker_id" = ("users_user"."id"))
                             GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
            (SELECT MAX(U0."updated_at") AS "last_update"
             FROM "job_applications_jobapplication" U0
             WHERE (((U0."sender_id" = %s
                      AND U0."sender_prescriber_organization_id" IS NULL)
                     OR U0."sender_prescriber_organization_id" = %s)
                    AND U0."job_seeker_id" = ("users_user"."id"))
             GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
            (SELECT U0."id"
             FROM "eligibility_eligibilitydiagnosis" U0
             WHERE (U0."expires_at" > %s
                    AND U0."author_kind" = %s
                    AND U0."job_seeker_id" = ("users_user"."id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "valid_eligibility_diagnosis",
                 ARRAY_AGG(DISTINCT "job_applications_jobapplication"."sender_id") FILTER (
                                                                                           WHERE "job_applications_jobapplication"."sender_id" IS NOT NULL) AS "application_sent_by",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."are_allocation_since",
                 "users_jobseekerprofile"."activity_bonus_since",
                 "users_jobseekerprofile"."cape_freelance",
                 "users_jobseekerprofile"."cesa_freelance",
                 "users_jobseekerprofile"."actor_met_for_business_creation",
                 "users_jobseekerprofile"."mean_monthly_income_before_process",
                 "users_jobseekerprofile"."eiti_contributions",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "users_jobseekerprofile"."created_by_prescriber_organization_id",
                 "users_jobseekerprofile"."is_stalled",
                 "users_jobseekerprofile"."fields_history"
          FROM "users_user"
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          WHERE ("users_user"."kind" = %s
                 AND "users_user"."id" IN (%s,
                                           %s,
                                           %s,
                                           %s))
          GROUP BY "users_user"."id",
                   35,
                   36,
                   "users_jobseekerprofile"."user_id"
          ORDER BY 35 ASC,
                   "users_user"."id" ASC
          LIMIT 4
        ''',
      }),
      dict({
        'origin': list([
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind",
                 "approvals_approval"."public_id"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" IN (%s,
                                                   %s,
                                                   %s,
                                                   %s)
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'nav[utils/templatetags/nav.py]',
          'InclusionNode[layout/_header_authenticated.html]',
          'IncludeNode[layout/base.html]',
          'IfNode[layout/base.html]',
          'ExtendsNode[job_seekers_views/list.html]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "prescribers_prescribermembership"
          WHERE "prescribers_prescribermembership"."organization_id" = %s
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[job_seekers_views/list.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[job_seekers_views/list.html]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "prescribers_prescribermembership"
          WHERE "prescribers_prescribermembership"."organization_id" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Approval.is_suspended[approvals/models.py]',
          'Approval.state[approvals/models.py]',
          'approval_state_badge[utils/templatetags/badges.py]',
          'SimpleNode[apply/includes/eligibility_badge.html]',
          'IfNode[apply/includes/eligibility_badge.html]',
          'IfNode[apply/includes/eligibility_badge.html]',
          'WithNode[apply/includes/eligibility_badge.html]',
          'IncludeNode[job_seekers_views/includes/list_results.html]',
          'ForNode[job_seekers_views/includes/list_results.html]',
          'IfNode[job_seekers_views/includes/list_results.html]',
          'IncludeNode[job_seekers_views/list.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[job_seekers_views/list.html]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "approvals_suspension"
          WHERE ("approvals_suspension"."approval_id" = %s
                 AND "approvals_suspension"."end_at" >= %s
                 AND "approvals_suspension"."start_at" <= %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Session.save[<site-packages>/django/db/models/base.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          UPDATE "django_session"
          SET "session_data" = %s,
              "expire_date" = %s
          WHERE "django_session"."session_key" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
    ]),
  })
# ---
# name: test_multiple[job seekers list table]
  '''
  <table class="table table-hover table-sortable">
                  <caption class="visually-hidden">
                      Liste des candidats (les colonnes disposant d’un bouton dans leur entête peuvent être triées en cliquant sur le bouton)
                  </caption>
                  <thead>
                      <tr>
                          <th aria-sort="ascending" scope="col">
      <button data-emplois-setter-target="#id_order" data-emplois-setter-value="-full_name" type="button">
          Prénom NOM
      </button>
  </th>
  
                          <th scope="col">Situation IAE</th>
                          <th aria-sort="none" scope="col">
      <button data-emplois-setter-target="#id_order" data-emplois-setter-value="job_applications_nb" type="button">
          Nombre de candidatures
      </button>
  </th>
  
                          <th aria-sort="none" scope="col">
      <button data-emplois-setter-target="#id_order" data-emplois-setter-value="last_updated_at" type="button">
          Dernière mise à jour de candidature
      </button>
  </th>
  
                          <th class="text-end w-100px" scope="col">
                          </th>
                      </tr>
                  </thead>
                  <tbody>
                      
                          <tr>
                              <td>
                                  <a class="btn-link" href="/job-seekers/details/11111111-1111-1111-1111-111111111111?back_url=/job-seekers/list">Alain ZORRO</a>
                                  
                              </td>
                              <td>
                                  
  
      
          
                      <span class="badge badge-xs rounded-pill bg-success-lighter text-success">
              <i aria-hidden="true" class="ri-check-line"></i>
              Éligible à l’IAE
          </span>
          
      
  
  
                              </td>
                              <td>2</td>
                              <td>29/08/2024</td>
                              <td class="text-end w-100px">
                                  
                                  
                                      
                                  
                                  <a class="btn btn-sm btn-link btn-ico-only" data-bs-title="Postuler pour ce candidat" data-bs-toggle="tooltip" data-matomo-action="clic" data-matomo-category="candidature" data-matomo-event="true" data-matomo-option="postuler-pour-ce-candidat" href="/search/employers/results?job_seeker_public_id=11111111-1111-1111-1111-111111111111&amp;city=brest-29">
                                      <i aria-label="Postuler pour ce candidat" class="ri-draft-line"></i>
                                  </a>
                                  
                                      <button aria-expanded="false" aria-haspopup="true" aria-label="Plus d'actions" class="btn btn-sm btn-link btn-ico-only" data-bs-toggle="dropdown" id="dropdown_1_action_menu" type="button">
                                          <i aria-hidden="true" class="ri-more-2-fill"></i>
                                      </button>
                                      
                                          <div aria-labelledby="dropdown_1_action_menu" class="dropdown-menu">
                                              <a class="dropdown-item" href=" /eligibility/update/11111111-1111-1111-1111-111111111111?back_url=/job-seekers/list">
                                                  
                                                      Mettre à jour son éligibilité IAE
                                                  
                                              </a>
                                          </div>
                                      
                                  
                              </td>
                          </tr>
                      
                          <tr>
                              <td>
                                  <a class="btn-link" href="/job-seekers/details/22222222-2222-2222-2222-222222222222?back_url=/job-seekers/list">Bernard YGREC</a>
                                  
                              </td>
                              <td>
                                  
  
      
          
                      <span class="badge badge-xs rounded-pill bg-warning-lighter text-warning">
              <i aria-hidden="true" class="ri-error-warning-line"></i>
              Éligibilité IAE à valider
          </span>
          
      
  
  
                              </td>
                              <td>1</td>
                              <td>30/08/2024</td>
                              <td class="text-end w-100px">
                                  
                                  
                                      
                                  
                                  <a class="btn btn-sm btn-link btn-ico-only" data-bs-title="Postuler pour ce candidat" data-bs-toggle="tooltip" data-matomo-action="clic" data-matomo-category="candidature" data-matomo-event="true" data-matomo-option="postuler-pour-ce-candidat" href="/search/employers/results?job_seeker_public_id=22222222-2222-2222-2222-222222222222&amp;city=brest-29">
                                      <i aria-label="Postuler pour ce candidat" class="ri-draft-line"></i>
                                  </a>
                                  
                                      <button aria-expanded="false" aria-haspopup="true" aria-label="Plus d'actions" class="btn btn-sm btn-link btn-ico-only" data-bs-toggle="dropdown" id="dropdown_2_action_menu" type="button">
                                          <i aria-hidden="true" class="ri-more-2-fill"></i>
                                      </button>
                                      
                                          <div aria-labelledby="dropdown_2_action_menu" class="dropdown-menu">
                                              <a class="dropdown-item" href=" /eligibility/update/22222222-2222-2222-2222-222222222222?back_url=/job-seekers/list">
                                                  
                                                      Valider son éligibilité IAE
                                                  
                                              </a>
                                          </div>
                                      
                                  
                              </td>
                          </tr>
                      
                          <tr>
                              <td>
                                  <a class="btn-link" href="/job-seekers/details/33333333-3333-3333-3333-333333333333?back_url=/job-seekers/list">Charlotte XERUS</a>
                                  
                              </td>
                              <td>
                                  
  
      
          
                          <span class="badge badge-xs rounded-pill bg-success-lighter text-success">
                  <i aria-hidden="true" class="ri-pass-valid-line"></i>
                  PASS IAE valide
              </span>
          
      
  
  
                              </td>
                              <td>1</td>
                              <td>30/08/2024</td>
                              <td class="text-end w-100px">
                                  
                                  
                                      
                                  
                                  <a class="btn btn-sm btn-link btn-ico-only" data-bs-title="Postuler pour ce candidat" data-bs-toggle="tooltip" data-matomo-action="clic" data-matomo-category="candidature" data-matomo-event="true" data-matomo-option="postuler-pour-ce-candidat" href="/search/employers/results?job_seeker_public_id=33333333-3333-3333-3333-333333333333&amp;city=brest-29">
                                      <i aria-label="Postuler pour ce candidat" class="ri-draft-line"></i>
                                  </a>
                                  
                                      <button aria-expanded="false" aria-haspopup="true" aria-label="Plus d'actions" class="btn btn-sm btn-link btn-ico-only" data-bs-toggle="dropdown" disabled="" id="dropdown_3_action_menu" type="button">
                                          <i aria-hidden="true" class="ri-more-2-fill"></i>
                                      </button>
                                      
                                  
                              </td>
                          </tr>
                      
                          <tr>
                              <td>
                                  <a class="btn-link" href="/job-seekers/details/44444444-4444-4444-4444-444444444444?back_url=/job-seekers/list">David WATERFORD</a>
                                  
                              </td>
                              <td>
                                  
  
      
          
                      <span class="badge badge-xs rounded-pill bg-success-lighter text-success">
              <i aria-hidden="true" class="ri-check-line"></i>
              Éligible à l’IAE
          </span>
          
      
  
  
                              </td>
                              <td>1</td>
                              <td>30/08/2024</td>
                              <td class="text-end w-100px">
                                  
                                  
                                      
                                  
                                  <a class="btn btn-sm btn-link btn-ico-only" data-bs-title="Postuler pour ce candidat" data-bs-toggle="tooltip" data-matomo-action="clic" data-matomo-category="candidature" data-matomo-event="true" data-matomo-option="postuler-pour-ce-candidat" href="/search/employers/results?job_seeker_public_id=44444444-4444-4444-4444-444444444444">
                                      <i aria-label="Postuler pour ce candidat" class="ri-draft-line"></i>
                                  </a>
                                  
                                      <button aria-expanded="false" aria-haspopup="true" aria-label="Plus d'actions" class="btn btn-sm btn-link btn-ico-only" data-bs-toggle="dropdown" id="dropdown_4_action_menu" type="button">
                                          <i aria-hidden="true" class="ri-more-2-fill"></i>
                                      </button>
                                      
                                          <div aria-labelledby="dropdown_4_action_menu" class="dropdown-menu">
                                              <a class="dropdown-item" href=" /eligibility/update/44444444-4444-4444-4444-444444444444?back_url=/job-seekers/list">
                                                  
                                                      Mettre à jour son éligibilité IAE
                                                  
                                              </a>
                                          </div>
                                      
                                  
                              </td>
                          </tr>
                      
                  </tbody>
              </table>
  '''
# ---
# name: test_multiple_with_job_seekers_created_by_organization.1
  dict({
    'num_queries': 20,
    'queries': list([
      dict({
        'origin': list([
          'SessionStore._get_session_from_db[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          SELECT "django_session"."session_key",
                 "django_session"."session_data",
                 "django_session"."expire_date"
          FROM "django_session"
          WHERE ("django_session"."expire_date" > %s
                 AND "django_session"."session_key" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at"
          FROM "users_user"
          WHERE "users_user"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "prescribers_prescribermembership"."id",
                 "prescribers_prescribermembership"."user_id",
                 "prescribers_prescribermembership"."joined_at",
                 "prescribers_prescribermembership"."is_admin",
                 "prescribers_prescribermembership"."is_active",
                 "prescribers_prescribermembership"."created_at",
                 "prescribers_prescribermembership"."updated_at",
                 "prescribers_prescribermembership"."organization_id",
                 "prescribers_prescribermembership"."updated_by_id",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id"
          FROM "prescribers_prescribermembership"
          INNER JOIN "prescribers_prescriberorganization" ON ("prescribers_prescribermembership"."organization_id" = "prescribers_prescriberorganization"."id")
          WHERE ("prescribers_prescribermembership"."user_id" = %s
                 AND "prescribers_prescribermembership"."is_active")
          ORDER BY "prescribers_prescribermembership"."created_at" ASC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "prescribers_prescribermembership"
          WHERE "prescribers_prescribermembership"."organization_id" = %s
        ''',
      }),
      dict({
        'origin': list([
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          
            (SELECT "users_user"."id" AS "col1"
             FROM "users_user"
             LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
             WHERE (("users_user"."created_by_id" = %s
                     AND "users_jobseekerprofile"."created_by_prescriber_organization_id" IS NULL)
                    OR "users_jobseekerprofile"."created_by_prescriber_organization_id" = %s)
             ORDER BY RANDOM() ASC)
          UNION
            (SELECT "job_applications_jobapplication"."job_seeker_id" AS "col1"
             FROM "job_applications_jobapplication"
             WHERE (("job_applications_jobapplication"."sender_id" = %s
                     AND "job_applications_jobapplication"."sender_prescriber_organization_id" IS NULL)
                    OR "job_applications_jobapplication"."sender_prescriber_organization_id" = %s)
             ORDER BY "job_applications_jobapplication"."created_at" DESC)
          UNION
            (SELECT "eligibility_eligibilitydiagnosis"."job_seeker_id" AS "col1"
             FROM "eligibility_eligibilitydiagnosis"
             WHERE (("eligibility_eligibilitydiagnosis"."author_id" = %s
                     AND "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" IS NULL)
                    OR "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = %s)
             ORDER BY "eligibility_eligibilitydiagnosis"."created_at" DESC)
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_job_seeker[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                 COALESCE(
                            (SELECT COUNT(U0."id") AS "count"
                             FROM "job_applications_jobapplication" U0
                             WHERE (((U0."sender_id" = %s
                                      AND U0."sender_prescriber_organization_id" IS NULL)
                                     OR U0."sender_prescriber_organization_id" = %s)
                                    AND U0."job_seeker_id" = ("users_user"."id"))
                             GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
            (SELECT MAX(U0."updated_at") AS "last_update"
             FROM "job_applications_jobapplication" U0
             WHERE (((U0."sender_id" = %s
                      AND U0."sender_prescriber_organization_id" IS NULL)
                     OR U0."sender_prescriber_organization_id" = %s)
                    AND U0."job_seeker_id" = ("users_user"."id"))
             GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
            (SELECT U0."id"
             FROM "eligibility_eligibilitydiagnosis" U0
             WHERE (U0."expires_at" > %s
                    AND U0."author_kind" = %s
                    AND U0."job_seeker_id" = ("users_user"."id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "valid_eligibility_diagnosis",
                 ARRAY_AGG(DISTINCT "job_applications_jobapplication"."sender_id") FILTER (
                                                                                           WHERE "job_applications_jobapplication"."sender_id" IS NOT NULL) AS "application_sent_by",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."are_allocation_since",
                 "users_jobseekerprofile"."activity_bonus_since",
                 "users_jobseekerprofile"."cape_freelance",
                 "users_jobseekerprofile"."cesa_freelance",
                 "users_jobseekerprofile"."actor_met_for_business_creation",
                 "users_jobseekerprofile"."mean_monthly_income_before_process",
                 "users_jobseekerprofile"."eiti_contributions",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "users_jobseekerprofile"."created_by_prescriber_organization_id",
                 "users_jobseekerprofile"."is_stalled",
                 "users_jobseekerprofile"."fields_history"
          FROM "users_user"
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          WHERE ("users_user"."kind" = %s
                 AND "users_user"."id" IN (%s,
                                           %s,
                                           %s))
          GROUP BY "users_user"."id",
                   35,
                   36,
                   "users_jobseekerprofile"."user_id"
          ORDER BY "users_user"."first_name" ASC,
                   "users_user"."last_name" ASC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_job_seeker[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind",
                 "approvals_approval"."public_id"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" IN (%s,
                                                   %s,
                                                   %s)
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_organization_members[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                 COALESCE(
                            (SELECT COUNT(U0."id") AS "count"
                             FROM "job_applications_jobapplication" U0
                             WHERE (((U0."sender_id" = %s
                                      AND U0."sender_prescriber_organization_id" IS NULL)
                                     OR U0."sender_prescriber_organization_id" = %s)
                                    AND U0."job_seeker_id" = ("users_user"."id"))
                             GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
            (SELECT MAX(U0."updated_at") AS "last_update"
             FROM "job_applications_jobapplication" U0
             WHERE (((U0."sender_id" = %s
                      AND U0."sender_prescriber_organization_id" IS NULL)
                     OR U0."sender_prescriber_organization_id" = %s)
                    AND U0."job_seeker_id" = ("users_user"."id"))
             GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
            (SELECT U0."id"
             FROM "eligibility_eligibilitydiagnosis" U0
             WHERE (U0."expires_at" > %s
                    AND U0."author_kind" = %s
                    AND U0."job_seeker_id" = ("users_user"."id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "valid_eligibility_diagnosis",
                 ARRAY_AGG(DISTINCT "job_applications_jobapplication"."sender_id") FILTER (
                                                                                           WHERE "job_applications_jobapplication"."sender_id" IS NOT NULL) AS "application_sent_by",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."are_allocation_since",
                 "users_jobseekerprofile"."activity_bonus_since",
                 "users_jobseekerprofile"."cape_freelance",
                 "users_jobseekerprofile"."cesa_freelance",
                 "users_jobseekerprofile"."actor_met_for_business_creation",
                 "users_jobseekerprofile"."mean_monthly_income_before_process",
                 "users_jobseekerprofile"."eiti_contributions",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "users_jobseekerprofile"."created_by_prescriber_organization_id",
                 "users_jobseekerprofile"."is_stalled",
                 "users_jobseekerprofile"."fields_history"
          FROM "users_user"
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          WHERE ("users_user"."kind" = %s
                 AND "users_user"."id" IN (%s,
                                           %s,
                                           %s))
          GROUP BY "users_user"."id",
                   35,
                   36,
                   "users_jobseekerprofile"."user_id"
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_organization_members[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind",
                 "approvals_approval"."public_id"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" IN (%s,
                                                   %s,
                                                   %s)
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'FilterForm._get_choices_for_organization_members[www/job_seekers_views/forms.py]',
          'FilterForm.__init__[www/job_seekers_views/forms.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at"
          FROM "users_user"
          INNER JOIN "prescribers_prescribermembership" ON ("users_user"."id" = "prescribers_prescribermembership"."user_id")
          WHERE ("prescribers_prescribermembership"."organization_id" = %s
                 AND "users_user"."id" IN (%s,
                                           %s,
                                           %s))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'ItouPaginator.count[<site-packages>/django/core/paginator.py]',
          'pager[utils/pagination.py]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT COUNT(*)
          FROM
            (SELECT (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                    COALESCE(
                               (SELECT COUNT(U0."id") AS "count"
                                FROM "job_applications_jobapplication" U0
                                WHERE (((U0."sender_id" = %s
                                         AND U0."sender_prescriber_organization_id" IS NULL)
                                        OR U0."sender_prescriber_organization_id" = %s)
                                       AND U0."job_seeker_id" = ("users_user"."id"))
                                GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
               (SELECT MAX(U0."updated_at") AS "last_update"
                FROM "job_applications_jobapplication" U0
                WHERE (((U0."sender_id" = %s
                         AND U0."sender_prescriber_organization_id" IS NULL)
                        OR U0."sender_prescriber_organization_id" = %s)
                       AND U0."job_seeker_id" = ("users_user"."id"))
                GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
               (SELECT U0."id"
                FROM "eligibility_eligibilitydiagnosis" U0
                WHERE (U0."expires_at" > %s
                       AND U0."author_kind" = %s
                       AND U0."job_seeker_id" = ("users_user"."id"))
                ORDER BY U0."created_at" DESC
                LIMIT 1) AS "valid_eligibility_diagnosis"
             FROM "users_user"
             LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
             WHERE ("users_user"."kind" = %s
                    AND "users_user"."id" IN (%s,
                                              %s,
                                              %s))
             GROUP BY "users_user"."id",
                      1,
                      2) subquery
        ''',
      }),
      dict({
        'origin': list([
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."full_name_search_vector",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_user"."upcoming_deletion_notified_at",
                 (COALESCE(LOWER("users_user"."first_name"), %s) || COALESCE((COALESCE(%s, %s) || COALESCE(LOWER("users_user"."last_name"), %s)), %s)) AS "full_name",
                 COALESCE(
                            (SELECT COUNT(U0."id") AS "count"
                             FROM "job_applications_jobapplication" U0
                             WHERE (((U0."sender_id" = %s
                                      AND U0."sender_prescriber_organization_id" IS NULL)
                                     OR U0."sender_prescriber_organization_id" = %s)
                                    AND U0."job_seeker_id" = ("users_user"."id"))
                             GROUP BY U0."job_seeker_id"), %s) AS "job_applications_nb",
          
            (SELECT MAX(U0."updated_at") AS "last_update"
             FROM "job_applications_jobapplication" U0
             WHERE (((U0."sender_id" = %s
                      AND U0."sender_prescriber_organization_id" IS NULL)
                     OR U0."sender_prescriber_organization_id" = %s)
                    AND U0."job_seeker_id" = ("users_user"."id"))
             GROUP BY U0."job_seeker_id") AS "last_updated_at",
          
            (SELECT U0."id"
             FROM "eligibility_eligibilitydiagnosis" U0
             WHERE (U0."expires_at" > %s
                    AND U0."author_kind" = %s
                    AND U0."job_seeker_id" = ("users_user"."id"))
             ORDER BY U0."created_at" DESC
             LIMIT 1) AS "valid_eligibility_diagnosis",
                 ARRAY_AGG(DISTINCT "job_applications_jobapplication"."sender_id") FILTER (
                                                                                           WHERE "job_applications_jobapplication"."sender_id" IS NOT NULL) AS "application_sent_by",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."are_allocation_since",
                 "users_jobseekerprofile"."activity_bonus_since",
                 "users_jobseekerprofile"."cape_freelance",
                 "users_jobseekerprofile"."cesa_freelance",
                 "users_jobseekerprofile"."actor_met_for_business_creation",
                 "users_jobseekerprofile"."mean_monthly_income_before_process",
                 "users_jobseekerprofile"."eiti_contributions",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "users_jobseekerprofile"."created_by_prescriber_organization_id",
                 "users_jobseekerprofile"."is_stalled",
                 "users_jobseekerprofile"."fields_history"
          FROM "users_user"
          LEFT OUTER JOIN "job_applications_jobapplication" ON ("users_user"."id" = "job_applications_jobapplication"."job_seeker_id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          WHERE ("users_user"."kind" = %s
                 AND "users_user"."id" IN (%s,
                                           %s,
                                           %s))
          GROUP BY "users_user"."id",
                   35,
                   36,
                   "users_jobseekerprofile"."user_id"
          ORDER BY 35 ASC,
                   "users_user"."id" ASC
          LIMIT 3
        ''',
      }),
      dict({
        'origin': list([
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind",
                 "approvals_approval"."public_id"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" IN (%s,
                                                   %s,
                                                   %s)
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'nav[utils/templatetags/nav.py]',
          'InclusionNode[layout/_header_authenticated.html]',
          'IncludeNode[layout/base.html]',
          'IfNode[layout/base.html]',
          'ExtendsNode[job_seekers_views/list.html]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "prescribers_prescribermembership"
          WHERE "prescribers_prescribermembership"."organization_id" = %s
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[job_seekers_views/list.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[job_seekers_views/list.html]',
          'list_job_seekers[www/job_seekers_views/views.py]',
          '_check_user_view_wrapper[utils/auth.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "prescribers_prescribermembership"
          WHERE "prescribers_prescribermembership"."organization_id" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Session.save[<site-packages>/django/db/models/base.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          UPDATE "django_session"
          SET "session_data" = %s,
              "expire_date" = %s
          WHERE "django_session"."session_key" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
    ]),
  })
# ---
# name: test_multiple_with_job_seekers_created_by_organization[job seekers list tbody]
  '''
  <tbody>
                      
                          <tr>
                              <td>
                                  <a class="btn-link" href="/job-seekers/details/11111111-1111-1111-1111-111111111111?back_url=/job-seekers/list-organization">Alain ZORRO</a>
                                  
                              </td>
                              <td>
                                  
  
      
          
                      <span class="badge badge-xs rounded-pill bg-success-lighter text-success">
              <i aria-hidden="true" class="ri-check-line"></i>
              Éligible à l’IAE
          </span>
          
      
  
  
                              </td>
                              <td>0</td>
                              <td></td>
                              <td class="text-end w-100px">
                                  
                                  
                                      
                                  
                                  <a class="btn btn-sm btn-link btn-ico-only" data-bs-title="Postuler pour ce candidat" data-bs-toggle="tooltip" data-matomo-action="clic" data-matomo-category="candidature" data-matomo-event="true" data-matomo-option="postuler-pour-ce-candidat" href="/search/employers/results?job_seeker_public_id=11111111-1111-1111-1111-111111111111&amp;city=brest-29">
                                      <i aria-label="Postuler pour ce candidat" class="ri-draft-line"></i>
                                  </a>
                                  
                                      <button aria-expanded="false" aria-haspopup="true" aria-label="Plus d'actions" class="btn btn-sm btn-link btn-ico-only" data-bs-toggle="dropdown" id="dropdown_1_action_menu" type="button">
                                          <i aria-hidden="true" class="ri-more-2-fill"></i>
                                      </button>
                                      
                                          <div aria-labelledby="dropdown_1_action_menu" class="dropdown-menu">
                                              <a class="dropdown-item" href=" /eligibility/update/11111111-1111-1111-1111-111111111111?back_url=/job-seekers/list-organization">
                                                  
                                                      Mettre à jour son éligibilité IAE
                                                  
                                              </a>
                                          </div>
                                      
                                  
                              </td>
                          </tr>
                      
                          <tr>
                              <td>
                                  <a class="btn-link" href="/job-seekers/details/22222222-2222-2222-2222-222222222222?back_url=/job-seekers/list-organization">Bernard YGREC</a>
                                  
                              </td>
                              <td>
                                  
  
      
          
                      <span class="badge badge-xs rounded-pill bg-warning-lighter text-warning">
              <i aria-hidden="true" class="ri-error-warning-line"></i>
              Éligibilité IAE à valider
          </span>
          
      
  
  
                              </td>
                              <td>0</td>
                              <td></td>
                              <td class="text-end w-100px">
                                  
                                  
                                      
                                  
                                  <a class="btn btn-sm btn-link btn-ico-only" data-bs-title="Postuler pour ce candidat" data-bs-toggle="tooltip" data-matomo-action="clic" data-matomo-category="candidature" data-matomo-event="true" data-matomo-option="postuler-pour-ce-candidat" href="/search/employers/results?job_seeker_public_id=22222222-2222-2222-2222-222222222222&amp;city=brest-29">
                                      <i aria-label="Postuler pour ce candidat" class="ri-draft-line"></i>
                                  </a>
                                  
                                      <button aria-expanded="false" aria-haspopup="true" aria-label="Plus d'actions" class="btn btn-sm btn-link btn-ico-only" data-bs-toggle="dropdown" id="dropdown_2_action_menu" type="button">
                                          <i aria-hidden="true" class="ri-more-2-fill"></i>
                                      </button>
                                      
                                          <div aria-labelledby="dropdown_2_action_menu" class="dropdown-menu">
                                              <a class="dropdown-item" href=" /eligibility/update/22222222-2222-2222-2222-222222222222?back_url=/job-seekers/list-organization">
                                                  
                                                      Valider son éligibilité IAE
                                                  
                                              </a>
                                          </div>
                                      
                                  
                              </td>
                          </tr>
                      
                          <tr>
                              <td>
                                  <a class="btn-link" href="/job-seekers/details/33333333-3333-3333-3333-333333333333?back_url=/job-seekers/list-organization">Charlotte XERUS</a>
                                  
                              </td>
                              <td>
                                  
  
      
          
                      <span class="badge badge-xs rounded-pill bg-warning-lighter text-warning">
              <i aria-hidden="true" class="ri-error-warning-line"></i>
              Éligibilité IAE à valider
          </span>
          
      
  
  
                              </td>
                              <td>0</td>
                              <td></td>
                              <td class="text-end w-100px">
                                  
                                  
                                      
                                  
                                  <a class="btn btn-sm btn-link btn-ico-only" data-bs-title="Postuler pour ce candidat" data-bs-toggle="tooltip" data-matomo-action="clic" data-matomo-category="candidature" data-matomo-event="true" data-matomo-option="postuler-pour-ce-candidat" href="/search/employers/results?job_seeker_public_id=33333333-3333-3333-3333-333333333333&amp;city=brest-29">
                                      <i aria-label="Postuler pour ce candidat" class="ri-draft-line"></i>
                                  </a>
                                  
                                      <button aria-expanded="false" aria-haspopup="true" aria-label="Plus d'actions" class="btn btn-sm btn-link btn-ico-only" data-bs-toggle="dropdown" id="dropdown_3_action_menu" type="button">
                                          <i aria-hidden="true" class="ri-more-2-fill"></i>
                                      </button>
                                      
                                          <div aria-labelledby="dropdown_3_action_menu" class="dropdown-menu">
                                              <a class="dropdown-item" href=" /eligibility/update/33333333-3333-3333-3333-333333333333?back_url=/job-seekers/list-organization">
                                                  
                                                      Valider son éligibilité IAE
                                                  
                                              </a>
                                          </div>
                                      
                                  
                              </td>
                          </tr>
                      
                  </tbody>
  '''
# ---
