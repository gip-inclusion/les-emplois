# serializer version: 1
# name: TestDashboardView.test_dashboard
  '''
  <form action="/search/employers/results" class="mt-3 mt-md-4" method="get" role="search">
                                  
  
  
  
  
  <div class="row">
      <div class="col-12">
          <label class="visually-hidden" for="id_city">Ville</label>
          <div class="input-group input-group-xl input-group-search flex-nowrap">
              <div class="input-group-text bg-white rounded-start ps-3 pe-2">
                  <i aria-hidden="true" class="ri-map-pin-line ri-lg text-disabled"></i>
              </div>
              <select class="form-control django-select2" data-ajax--url="/autocomplete/cities?slug=" data-allow-clear="false" data-minimum-input-length="1" data-placeholder="Rechercher un emploi inclusif autour deâ€¦" data-theme="bootstrap-5" id="id_city" lang="fr" name="city" required="">
  </select>
              <div class="input-group-text bg-white p-0">
                  <button aria-label="Rechercher un emploi inclusif" class="btn btn-ico btn-link">
                      <i aria-hidden="true" class="ri-search-line font-weight-bold"></i>
                      <span>Rechercher</span>
                  </button>
              </div>
          </div>
      </div>
  </div>
  
                              </form>
  '''
# ---
# name: TestDashboardView.test_dashboard_siae_evaluation_campaign_notifications[view queries]
  dict({
    'num_queries': 20,
    'queries': list([
      dict({
        'origin': list([
          'SessionStore._get_session_from_db[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          SELECT "django_session"."session_key",
                 "django_session"."session_data",
                 "django_session"."expire_date"
          FROM "django_session"
          WHERE ("django_session"."expire_date" > %s
                 AND "django_session"."session_key" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "users_user"
          WHERE "users_user"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_companymembership"."id",
                 "companies_companymembership"."user_id",
                 "companies_companymembership"."joined_at",
                 "companies_companymembership"."is_admin",
                 "companies_companymembership"."is_active",
                 "companies_companymembership"."created_at",
                 "companies_companymembership"."updated_at",
                 "companies_companymembership"."company_id",
                 "companies_companymembership"."updated_by_id",
                 "companies_companymembership"."notifications"
          FROM "companies_companymembership"
          WHERE ("companies_companymembership"."user_id" = %s
                 AND "companies_companymembership"."is_active")
          ORDER BY "companies_companymembership"."created_at" ASC
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."rdv_solidarites_id",
                 EXISTS
            (SELECT %s AS "a"
             FROM "companies_siaeconvention" U0
             WHERE (U0."deactivated_at" >= %s
                    AND U0."id" = ("companies_company"."convention_id"))
             LIMIT 1) AS "has_convention_in_grace_period",
                 "companies_siaeconvention"."id",
                 "companies_siaeconvention"."kind",
                 "companies_siaeconvention"."siret_signature",
                 "companies_siaeconvention"."is_active",
                 "companies_siaeconvention"."deactivated_at",
                 "companies_siaeconvention"."reactivated_by_id",
                 "companies_siaeconvention"."reactivated_at",
                 "companies_siaeconvention"."asp_id",
                 "companies_siaeconvention"."created_at",
                 "companies_siaeconvention"."updated_at"
          FROM "companies_company"
          INNER JOIN "companies_companymembership" ON ("companies_company"."id" = "companies_companymembership"."company_id")
          LEFT OUTER JOIN "companies_siaeconvention" ON ("companies_company"."convention_id" = "companies_siaeconvention"."id")
          WHERE (NOT ("companies_company"."siret" = %s)
                 AND "companies_companymembership"."user_id" = %s
                 AND "companies_company"."id" IN (%s)
                 AND (NOT ("companies_company"."kind" IN (%s,
                                                          %s,
                                                          %s,
                                                          %s,
                                                          %s))
                      OR "companies_company"."source" = %s
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."id" = ("companies_company"."convention_id")
                                AND U0."is_active")
                         LIMIT 1)
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."deactivated_at" >= %s
                                AND U0."id" = ("companies_company"."convention_id"))
                         LIMIT 1)))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          '_employer_dashboard_context[www/dashboard/views.py]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplication"."state"
          FROM "job_applications_jobapplication"
          WHERE ("job_applications_jobapplication"."to_company_id" = %s
                 AND "job_applications_jobapplication"."archived_at" IS NULL)
          ORDER BY "job_applications_jobapplication"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'Company.has_admin[common_apps/organizations/models.py]',
          'User.can_create_siae_antenna[users/models.py]',
          '_employer_dashboard_context[www/dashboard/views.py]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "users_user"
          INNER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
          WHERE ("companies_companymembership"."id" IN
                   (SELECT U0."id"
                    FROM "companies_companymembership" U0
                    INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                    WHERE (U0."company_id" = %s
                           AND U2."is_active"
                           AND U0."is_active"
                           AND U0."is_admin"
                           AND U2."is_active"))
                 AND "users_user"."id" = %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Company.has_admin[common_apps/organizations/models.py]',
          'Company.convention_can_be_accessed_by[companies/models.py]',
          '_employer_dashboard_context[www/dashboard/views.py]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "users_user"
          INNER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
          WHERE ("companies_companymembership"."id" IN
                   (SELECT U0."id"
                    FROM "companies_companymembership" U0
                    INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                    WHERE (U0."company_id" = %s
                           AND U2."is_active"
                           AND U0."is_active"
                           AND U0."is_admin"
                           AND U2."is_active"))
                 AND "users_user"."id" = %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          '_employer_dashboard_context[www/dashboard/views.py]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT COUNT(*) AS "__count"
          FROM "employee_record_employeerecord"
          INNER JOIN "job_applications_jobapplication" ON ("employee_record_employeerecord"."job_application_id" = "job_applications_jobapplication"."id")
          WHERE ("job_applications_jobapplication"."to_company_id" = %s
                 AND "employee_record_employeerecord"."status" = %s)
        ''',
      }),
      dict({
        'origin': list([
          'Company.get_active_suspension_dates[companies/models.py]',
          'Company.get_active_suspension_text_with_dates[companies/models.py]',
          '_employer_dashboard_context[www/dashboard/views.py]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_sanctions"."suspension_dates"
          FROM "siae_evaluations_evaluatedsiae"
          INNER JOIN "siae_evaluations_sanctions" ON ("siae_evaluations_evaluatedsiae"."id" = "siae_evaluations_sanctions"."evaluated_siae_id")
          WHERE ("siae_evaluations_evaluatedsiae"."siae_id" = %s
                 AND "siae_evaluations_sanctions"."suspension_dates" @> (%s)::date)
          ORDER BY UPPER("siae_evaluations_sanctions"."suspension_dates") DESC NULLS FIRST
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Company.has_admin[common_apps/organizations/models.py]',
          'Company.convention_can_be_accessed_by[companies/models.py]',
          'nav[utils/templatetags/nav.py]',
          'InclusionNode[layout/_header_authenticated.html]',
          'IncludeNode[layout/base.html]',
          'IfNode[layout/base.html]',
          'ExtendsNode[dashboard/dashboard.html]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "users_user"
          INNER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
          WHERE ("companies_companymembership"."id" IN
                   (SELECT U0."id"
                    FROM "companies_companymembership" U0
                    INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                    WHERE (U0."company_id" = %s
                           AND U2."is_active"
                           AND U0."is_active"
                           AND U0."is_admin"
                           AND U2."is_active"))
                 AND "users_user"."id" = %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[dashboard/dashboard.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[dashboard/dashboard.html]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "jobs_appellation"
          INNER JOIN "companies_jobdescription" ON ("jobs_appellation"."code" = "companies_jobdescription"."appellation_id")
          WHERE "companies_jobdescription"."company_id" = %s
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[dashboard/dashboard.html]',
          'IfNode[dashboard/dashboard.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[dashboard/dashboard.html]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedsiae"."id",
                 "siae_evaluations_evaluatedsiae"."evaluation_campaign_id",
                 "siae_evaluations_evaluatedsiae"."siae_id",
                 "siae_evaluations_evaluatedsiae"."reviewed_at",
                 "siae_evaluations_evaluatedsiae"."final_reviewed_at",
                 "siae_evaluations_evaluatedsiae"."submission_freezed_at",
                 "siae_evaluations_evaluatedsiae"."notified_at",
                 "siae_evaluations_evaluatedsiae"."notification_reason",
                 "siae_evaluations_evaluatedsiae"."notification_text",
                 "siae_evaluations_evaluatedsiae"."reminder_sent_at",
                 "siae_evaluations_evaluationcampaign"."id",
                 "siae_evaluations_evaluationcampaign"."name",
                 "siae_evaluations_evaluationcampaign"."created_at",
                 "siae_evaluations_evaluationcampaign"."percent_set_at",
                 "siae_evaluations_evaluationcampaign"."evaluations_asked_at",
                 "siae_evaluations_evaluationcampaign"."ended_at",
                 "siae_evaluations_evaluationcampaign"."submission_freeze_notified_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_start_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_end_at",
                 "siae_evaluations_evaluationcampaign"."institution_id",
                 "siae_evaluations_evaluationcampaign"."chosen_percent",
                 "siae_evaluations_evaluationcampaign"."calendar_id"
          FROM "siae_evaluations_evaluatedsiae"
          INNER JOIN "siae_evaluations_evaluationcampaign" ON ("siae_evaluations_evaluatedsiae"."evaluation_campaign_id" = "siae_evaluations_evaluationcampaign"."id")
          WHERE ("siae_evaluations_evaluatedsiae"."siae_id" = %s
                 AND NOT ("siae_evaluations_evaluationcampaign"."evaluations_asked_at" IS NULL)
                 AND "siae_evaluations_evaluationcampaign"."ended_at" IS NULL
                 AND "siae_evaluations_evaluatedsiae"."final_reviewed_at" IS NULL)
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[dashboard/dashboard.html]',
          'IfNode[dashboard/dashboard.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[dashboard/dashboard.html]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedjobapplication"."id",
                 "siae_evaluations_evaluatedjobapplication"."job_application_id",
                 "siae_evaluations_evaluatedjobapplication"."evaluated_siae_id",
                 "siae_evaluations_evaluatedjobapplication"."labor_inspector_explanation"
          FROM "siae_evaluations_evaluatedjobapplication"
          WHERE "siae_evaluations_evaluatedjobapplication"."evaluated_siae_id" IN (%s)
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[dashboard/dashboard.html]',
          'IfNode[dashboard/dashboard.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[dashboard/dashboard.html]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedadministrativecriteria"."id",
                 "siae_evaluations_evaluatedadministrativecriteria"."administrative_criteria_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."proof_id",
                 "siae_evaluations_evaluatedadministrativecriteria"."uploaded_at",
                 "siae_evaluations_evaluatedadministrativecriteria"."submitted_at",
                 "siae_evaluations_evaluatedadministrativecriteria"."review_state"
          FROM "siae_evaluations_evaluatedadministrativecriteria"
          INNER JOIN "eligibility_administrativecriteria" ON ("siae_evaluations_evaluatedadministrativecriteria"."administrative_criteria_id" = "eligibility_administrativecriteria"."id")
          WHERE "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id" IN (%s,
                                                                                                      %s)
          ORDER BY "siae_evaluations_evaluatedadministrativecriteria"."evaluated_job_application_id" ASC,
                   "eligibility_administrativecriteria"."level" ASC,
                   "eligibility_administrativecriteria"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[dashboard/includes/employer_evaluation_campaigns_card.html]',
          'IncludeNode[dashboard/dashboard.html]',
          'IfNode[dashboard/dashboard.html]',
          'IfNode[dashboard/dashboard.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[dashboard/dashboard.html]',
          'dashboard[www/dashboard/views.py]',
        ]),
        'sql': '''
          SELECT "siae_evaluations_evaluatedsiae"."id",
                 "siae_evaluations_evaluatedsiae"."evaluation_campaign_id",
                 "siae_evaluations_evaluatedsiae"."siae_id",
                 "siae_evaluations_evaluatedsiae"."reviewed_at",
                 "siae_evaluations_evaluatedsiae"."final_reviewed_at",
                 "siae_evaluations_evaluatedsiae"."submission_freezed_at",
                 "siae_evaluations_evaluatedsiae"."notified_at",
                 "siae_evaluations_evaluatedsiae"."notification_reason",
                 "siae_evaluations_evaluatedsiae"."notification_text",
                 "siae_evaluations_evaluatedsiae"."reminder_sent_at",
                 "siae_evaluations_evaluationcampaign"."id",
                 "siae_evaluations_evaluationcampaign"."name",
                 "siae_evaluations_evaluationcampaign"."created_at",
                 "siae_evaluations_evaluationcampaign"."percent_set_at",
                 "siae_evaluations_evaluationcampaign"."evaluations_asked_at",
                 "siae_evaluations_evaluationcampaign"."ended_at",
                 "siae_evaluations_evaluationcampaign"."submission_freeze_notified_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_start_at",
                 "siae_evaluations_evaluationcampaign"."evaluated_period_end_at",
                 "siae_evaluations_evaluationcampaign"."institution_id",
                 "siae_evaluations_evaluationcampaign"."chosen_percent",
                 "siae_evaluations_evaluationcampaign"."calendar_id"
          FROM "siae_evaluations_evaluatedsiae"
          INNER JOIN "siae_evaluations_evaluationcampaign" ON ("siae_evaluations_evaluatedsiae"."evaluation_campaign_id" = "siae_evaluations_evaluationcampaign"."id")
          WHERE ("siae_evaluations_evaluatedsiae"."siae_id" = %s
                 AND NOT ("siae_evaluations_evaluatedsiae"."notified_at" IS NULL)
                 AND "siae_evaluations_evaluatedsiae"."evaluation_campaign_id" IN
                   (SELECT U0."id"
                    FROM "siae_evaluations_evaluationcampaign" U0
                    WHERE ((U0."ended_at" IS NULL
                            OR U0."ended_at" >= %s)
                           AND NOT (U0."evaluated_period_end_at" < %s))))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          UPDATE "django_session"
          SET "session_data" = %s,
              "expire_date" = %s
          WHERE "django_session"."session_key" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
    ]),
  })
# ---
