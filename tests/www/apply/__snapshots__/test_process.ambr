# serializer version: 1
# name: TestProcessAcceptViews.test_select_job_description_for_job_application[accept view SQL queries]
  dict({
    'num_queries': 15,
    'queries': list([
      dict({
        'origin': list([
          'SessionStore._get_session_from_db[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          SELECT "django_session"."session_key",
                 "django_session"."session_data",
                 "django_session"."expire_date"
          FROM "django_session"
          WHERE ("django_session"."expire_date" > %s
                 AND "django_session"."session_key" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "users_user"
          WHERE "users_user"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_companymembership"."id",
                 "companies_companymembership"."user_id",
                 "companies_companymembership"."joined_at",
                 "companies_companymembership"."is_admin",
                 "companies_companymembership"."is_active",
                 "companies_companymembership"."created_at",
                 "companies_companymembership"."updated_at",
                 "companies_companymembership"."company_id",
                 "companies_companymembership"."updated_by_id",
                 "companies_companymembership"."notifications"
          FROM "companies_companymembership"
          WHERE ("companies_companymembership"."user_id" = %s
                 AND "companies_companymembership"."is_active")
          ORDER BY "companies_companymembership"."created_at" ASC
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id",
                 EXISTS
            (SELECT %s AS "a"
             FROM "companies_siaeconvention" U0
             WHERE (U0."deactivated_at" >= %s
                    AND U0."id" = ("companies_company"."convention_id"))
             LIMIT 1) AS "has_convention_in_grace_period",
                 "companies_siaeconvention"."id",
                 "companies_siaeconvention"."kind",
                 "companies_siaeconvention"."siret_signature",
                 "companies_siaeconvention"."is_active",
                 "companies_siaeconvention"."deactivated_at",
                 "companies_siaeconvention"."reactivated_by_id",
                 "companies_siaeconvention"."reactivated_at",
                 "companies_siaeconvention"."asp_id",
                 "companies_siaeconvention"."created_at",
                 "companies_siaeconvention"."updated_at"
          FROM "companies_company"
          INNER JOIN "companies_companymembership" ON ("companies_company"."id" = "companies_companymembership"."company_id")
          LEFT OUTER JOIN "companies_siaeconvention" ON ("companies_company"."convention_id" = "companies_siaeconvention"."id")
          WHERE (NOT ("companies_company"."siret" = %s)
                 AND "companies_companymembership"."user_id" = %s
                 AND "companies_company"."id" IN (%s)
                 AND (NOT ("companies_company"."kind" IN (%s,
                                                          %s,
                                                          %s,
                                                          %s,
                                                          %s))
                      OR "companies_company"."source" = %s
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."id" = ("companies_company"."convention_id")
                                AND U0."is_active")
                         LIMIT 1)
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."deactivated_at" >= %s
                                AND U0."id" = ("companies_company"."convention_id"))
                         LIMIT 1)))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplication"."id",
                 "job_applications_jobapplication"."job_seeker_id",
                 "job_applications_jobapplication"."eligibility_diagnosis_id",
                 "job_applications_jobapplication"."geiq_eligibility_diagnosis_id",
                 "job_applications_jobapplication"."create_employee_record",
                 "job_applications_jobapplication"."resume_link",
                 "job_applications_jobapplication"."sender_id",
                 "job_applications_jobapplication"."sender_kind",
                 "job_applications_jobapplication"."sender_company_id",
                 "job_applications_jobapplication"."sender_prescriber_organization_id",
                 "job_applications_jobapplication"."to_company_id",
                 "job_applications_jobapplication"."state",
                 "job_applications_jobapplication"."archived_at",
                 "job_applications_jobapplication"."archived_by_id",
                 "job_applications_jobapplication"."hired_job_id",
                 "job_applications_jobapplication"."message",
                 "job_applications_jobapplication"."answer",
                 "job_applications_jobapplication"."answer_to_prescriber",
                 "job_applications_jobapplication"."refusal_reason",
                 "job_applications_jobapplication"."refusal_reason_shared_with_job_seeker",
                 "job_applications_jobapplication"."hiring_start_at",
                 "job_applications_jobapplication"."hiring_end_at",
                 "job_applications_jobapplication"."hiring_without_approval",
                 "job_applications_jobapplication"."origin",
                 "job_applications_jobapplication"."approval_id",
                 "job_applications_jobapplication"."approval_delivery_mode",
                 "job_applications_jobapplication"."approval_number_sent_by_email",
                 "job_applications_jobapplication"."approval_number_sent_at",
                 "job_applications_jobapplication"."approval_manually_delivered_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_at",
                 "job_applications_jobapplication"."transferred_at",
                 "job_applications_jobapplication"."transferred_by_id",
                 "job_applications_jobapplication"."transferred_from_id",
                 "job_applications_jobapplication"."created_at",
                 "job_applications_jobapplication"."updated_at",
                 "job_applications_jobapplication"."processed_at",
                 "job_applications_jobapplication"."prehiring_guidance_days",
                 "job_applications_jobapplication"."contract_type",
                 "job_applications_jobapplication"."nb_hours_per_week",
                 "job_applications_jobapplication"."contract_type_details",
                 "job_applications_jobapplication"."qualification_type",
                 "job_applications_jobapplication"."qualification_level",
                 "job_applications_jobapplication"."planned_training_hours",
                 "job_applications_jobapplication"."inverted_vae_contract",
                 "job_applications_jobapplication"."diagoriente_invite_sent_at",
                 T5."id",
                 T5."password",
                 T5."last_login",
                 T5."is_superuser",
                 T5."username",
                 T5."first_name",
                 T5."last_name",
                 T5."is_staff",
                 T5."is_active",
                 T5."date_joined",
                 T5."address_line_1",
                 T5."address_line_2",
                 T5."post_code",
                 T5."city",
                 T5."department",
                 T5."coords",
                 T5."geocoding_score",
                 T5."geocoding_updated_at",
                 T5."ban_api_resolved_address",
                 T5."insee_city_id",
                 T5."title",
                 T5."email",
                 T5."phone",
                 T5."kind",
                 T5."identity_provider",
                 T5."has_completed_welcoming_tour",
                 T5."created_by_id",
                 T5."external_data_source_history",
                 T5."last_checked_at",
                 T5."public_id",
                 T5."address_filled_at",
                 T5."first_login",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."ata_allocation_since",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at"
          FROM "job_applications_jobapplication"
          INNER JOIN "companies_company" ON ("job_applications_jobapplication"."to_company_id" = "companies_company"."id")
          INNER JOIN "companies_companymembership" ON ("companies_company"."id" = "companies_companymembership"."company_id")
          INNER JOIN "users_user" ON ("companies_companymembership"."user_id" = "users_user"."id")
          INNER JOIN "users_user" T5 ON ("job_applications_jobapplication"."job_seeker_id" = T5."id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON (T5."id" = "users_jobseekerprofile"."user_id")
          WHERE ("companies_companymembership"."user_id" = %s
                 AND "users_user"."is_active"
                 AND "job_applications_jobapplication"."id" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'check_waiting_period[www/apply/views/process_views.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id"
          FROM "companies_company"
          WHERE "companies_company"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'User.latest_approval[users/models.py]',
          'User.has_valid_approval[users/models.py]',
          'RelatedManager.has_considered_valid[eligibility/models/iae.py]',
          'User.has_valid_diagnosis[users/models.py]',
          'User.new_approval_blocked_by_waiting_period[users/models.py]',
          'check_waiting_period[www/apply/views/process_views.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'EligibilityDiagnosisQuerySet.first[<site-packages>/django/db/models/query.py]',
          'RelatedManager.last_considered_valid[eligibility/models/iae.py]',
          'RelatedManager.has_considered_valid[eligibility/models/iae.py]',
          'User.has_valid_diagnosis[users/models.py]',
          'User.new_approval_blocked_by_waiting_period[users/models.py]',
          'check_waiting_period[www/apply/views/process_views.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_eligibilitydiagnosis"."id",
                 "eligibility_eligibilitydiagnosis"."author_id",
                 "eligibility_eligibilitydiagnosis"."author_kind",
                 "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_eligibilitydiagnosis"."created_at",
                 "eligibility_eligibilitydiagnosis"."updated_at",
                 "eligibility_eligibilitydiagnosis"."expires_at",
                 "eligibility_eligibilitydiagnosis"."job_seeker_id",
                 "eligibility_eligibilitydiagnosis"."author_siae_id",
                 CASE
                     WHEN "eligibility_eligibilitydiagnosis"."author_kind" = %s THEN %s
                     ELSE %s
                 END AS "from_prescriber",
                 T3."id",
                 T3."password",
                 T3."last_login",
                 T3."is_superuser",
                 T3."username",
                 T3."first_name",
                 T3."last_name",
                 T3."is_staff",
                 T3."is_active",
                 T3."date_joined",
                 T3."address_line_1",
                 T3."address_line_2",
                 T3."post_code",
                 T3."city",
                 T3."department",
                 T3."coords",
                 T3."geocoding_score",
                 T3."geocoding_updated_at",
                 T3."ban_api_resolved_address",
                 T3."insee_city_id",
                 T3."title",
                 T3."email",
                 T3."phone",
                 T3."kind",
                 T3."identity_provider",
                 T3."has_completed_welcoming_tour",
                 T3."created_by_id",
                 T3."external_data_source_history",
                 T3."last_checked_at",
                 T3."public_id",
                 T3."address_filled_at",
                 T3."first_login",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."is_authorized",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id"
          FROM "eligibility_eligibilitydiagnosis"
          INNER JOIN "users_user" T3 ON ("eligibility_eligibilitydiagnosis"."author_id" = T3."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          LEFT OUTER JOIN "companies_company" ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = "companies_company"."id")
          WHERE ("eligibility_eligibilitydiagnosis"."job_seeker_id" = %s
                 AND "eligibility_eligibilitydiagnosis"."author_kind" = %s
                 AND "eligibility_eligibilitydiagnosis"."job_seeker_id" = %s
                 AND "eligibility_eligibilitydiagnosis"."expires_at" > %s)
          ORDER BY 10 DESC,
                   "eligibility_eligibilitydiagnosis"."created_at" DESC
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'CommonApprovalQuerySet.first[<site-packages>/django/db/models/query.py]',
          'User.latest_pe_approval[users/models.py]',
          'User.latest_common_approval[users/models.py]',
          'User.has_latest_common_approval_in_waiting_period[users/models.py]',
          'User.new_approval_blocked_by_waiting_period[users/models.py]',
          'check_waiting_period[www/apply/views/process_views.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_poleemploiapproval"."id",
                 "approvals_poleemploiapproval"."start_at",
                 "approvals_poleemploiapproval"."end_at",
                 "approvals_poleemploiapproval"."created_at",
                 "approvals_poleemploiapproval"."pe_notification_status",
                 "approvals_poleemploiapproval"."pe_notification_time",
                 "approvals_poleemploiapproval"."pe_notification_endpoint",
                 "approvals_poleemploiapproval"."pe_notification_exit_code",
                 "approvals_poleemploiapproval"."pe_structure_code",
                 "approvals_poleemploiapproval"."number",
                 "approvals_poleemploiapproval"."pole_emploi_id",
                 "approvals_poleemploiapproval"."first_name",
                 "approvals_poleemploiapproval"."last_name",
                 "approvals_poleemploiapproval"."birth_name",
                 "approvals_poleemploiapproval"."birthdate",
                 "approvals_poleemploiapproval"."nir",
                 "approvals_poleemploiapproval"."ntt_nia",
                 "approvals_poleemploiapproval"."siae_siret",
                 "approvals_poleemploiapproval"."siae_kind"
          FROM "approvals_poleemploiapproval"
          WHERE (("approvals_poleemploiapproval"."nir" = %s
                  OR ("approvals_poleemploiapproval"."birthdate" = %s
                      AND "approvals_poleemploiapproval"."pole_emploi_id" = %s))
                 AND NOT ("approvals_poleemploiapproval"."number" IN
                            (SELECT U0."number"
                             FROM "approvals_approval" U0
                             WHERE U0."user_id" = %s)))
          ORDER BY "approvals_poleemploiapproval"."end_at" DESC,
                   "approvals_poleemploiapproval"."start_at" ASC
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'EligibilityDiagnosisQuerySet.first[<site-packages>/django/db/models/query.py]',
          'RelatedManager.last_considered_valid[eligibility/models/iae.py]',
          'RelatedManager.has_considered_valid[eligibility/models/iae.py]',
          'User.has_valid_diagnosis[users/models.py]',
          'JobApplication.eligibility_diagnosis_by_siae_required[job_applications/models.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_eligibilitydiagnosis"."id",
                 "eligibility_eligibilitydiagnosis"."author_id",
                 "eligibility_eligibilitydiagnosis"."author_kind",
                 "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_eligibilitydiagnosis"."created_at",
                 "eligibility_eligibilitydiagnosis"."updated_at",
                 "eligibility_eligibilitydiagnosis"."expires_at",
                 "eligibility_eligibilitydiagnosis"."job_seeker_id",
                 "eligibility_eligibilitydiagnosis"."author_siae_id",
                 CASE
                     WHEN "eligibility_eligibilitydiagnosis"."author_kind" = %s THEN %s
                     ELSE %s
                 END AS "from_prescriber",
                 T4."id",
                 T4."password",
                 T4."last_login",
                 T4."is_superuser",
                 T4."username",
                 T4."first_name",
                 T4."last_name",
                 T4."is_staff",
                 T4."is_active",
                 T4."date_joined",
                 T4."address_line_1",
                 T4."address_line_2",
                 T4."post_code",
                 T4."city",
                 T4."department",
                 T4."coords",
                 T4."geocoding_score",
                 T4."geocoding_updated_at",
                 T4."ban_api_resolved_address",
                 T4."insee_city_id",
                 T4."title",
                 T4."email",
                 T4."phone",
                 T4."kind",
                 T4."identity_provider",
                 T4."has_completed_welcoming_tour",
                 T4."created_by_id",
                 T4."external_data_source_history",
                 T4."last_checked_at",
                 T4."public_id",
                 T4."address_filled_at",
                 T4."first_login",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."is_authorized",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id"
          FROM "eligibility_eligibilitydiagnosis"
          LEFT OUTER JOIN "companies_company" ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = "companies_company"."id")
          INNER JOIN "users_user" T4 ON ("eligibility_eligibilitydiagnosis"."author_id" = T4."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          WHERE ("eligibility_eligibilitydiagnosis"."job_seeker_id" = %s
                 AND ("eligibility_eligibilitydiagnosis"."author_kind" = %s
                      OR "eligibility_eligibilitydiagnosis"."author_siae_id" = %s)
                 AND "eligibility_eligibilitydiagnosis"."job_seeker_id" = %s
                 AND "eligibility_eligibilitydiagnosis"."expires_at" > %s)
          ORDER BY 10 DESC,
                   "eligibility_eligibilitydiagnosis"."created_at" DESC
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'EligibilityDiagnosisQuerySet.first[<site-packages>/django/db/models/query.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.last_considered_valid[eligibility/models/iae.py]',
          '_accept[www/apply/views/common.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_eligibilitydiagnosis"."id",
                 "eligibility_eligibilitydiagnosis"."author_id",
                 "eligibility_eligibilitydiagnosis"."author_kind",
                 "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_eligibilitydiagnosis"."created_at",
                 "eligibility_eligibilitydiagnosis"."updated_at",
                 "eligibility_eligibilitydiagnosis"."expires_at",
                 "eligibility_eligibilitydiagnosis"."job_seeker_id",
                 "eligibility_eligibilitydiagnosis"."author_siae_id",
                 CASE
                     WHEN "eligibility_eligibilitydiagnosis"."author_kind" = %s THEN %s
                     ELSE %s
                 END AS "from_prescriber",
                 T4."id",
                 T4."password",
                 T4."last_login",
                 T4."is_superuser",
                 T4."username",
                 T4."first_name",
                 T4."last_name",
                 T4."is_staff",
                 T4."is_active",
                 T4."date_joined",
                 T4."address_line_1",
                 T4."address_line_2",
                 T4."post_code",
                 T4."city",
                 T4."department",
                 T4."coords",
                 T4."geocoding_score",
                 T4."geocoding_updated_at",
                 T4."ban_api_resolved_address",
                 T4."insee_city_id",
                 T4."title",
                 T4."email",
                 T4."phone",
                 T4."kind",
                 T4."identity_provider",
                 T4."has_completed_welcoming_tour",
                 T4."created_by_id",
                 T4."external_data_source_history",
                 T4."last_checked_at",
                 T4."public_id",
                 T4."address_filled_at",
                 T4."first_login",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."is_authorized",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id"
          FROM "eligibility_eligibilitydiagnosis"
          LEFT OUTER JOIN "companies_company" ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = "companies_company"."id")
          INNER JOIN "users_user" T4 ON ("eligibility_eligibilitydiagnosis"."author_id" = T4."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          WHERE (("eligibility_eligibilitydiagnosis"."author_kind" = %s
                  OR "eligibility_eligibilitydiagnosis"."author_siae_id" = %s)
                 AND "eligibility_eligibilitydiagnosis"."job_seeker_id" = %s
                 AND "eligibility_eligibilitydiagnosis"."expires_at" > %s)
          ORDER BY 10 DESC,
                   "eligibility_eligibilitydiagnosis"."created_at" DESC
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'AcceptForm.__init__[www/apply/forms.py]',
          '_accept[www/apply/views/common.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "companies_jobdescription"."id",
                 "companies_jobdescription"."appellation_id",
                 "companies_jobdescription"."company_id",
                 "companies_jobdescription"."created_at",
                 "companies_jobdescription"."updated_at",
                 "companies_jobdescription"."is_active",
                 "companies_jobdescription"."custom_name",
                 "companies_jobdescription"."description",
                 "companies_jobdescription"."ui_rank",
                 "companies_jobdescription"."contract_type",
                 "companies_jobdescription"."other_contract_type",
                 "companies_jobdescription"."contract_nature",
                 "companies_jobdescription"."location_id",
                 "companies_jobdescription"."hours_per_week",
                 "companies_jobdescription"."open_positions",
                 "companies_jobdescription"."profile_description",
                 "companies_jobdescription"."is_resume_mandatory",
                 "companies_jobdescription"."is_qpv_mandatory",
                 "companies_jobdescription"."market_context_description",
                 "companies_jobdescription"."source_id",
                 "companies_jobdescription"."source_kind",
                 "companies_jobdescription"."source_url",
                 "companies_jobdescription"."field_history",
                 "companies_jobdescription"."creation_source",
                 "jobs_appellation"."updated_at",
                 "jobs_appellation"."code",
                 "jobs_appellation"."name",
                 "jobs_appellation"."rome_id",
                 "jobs_appellation"."full_text",
                 "cities_city"."id",
                 "cities_city"."name",
                 "cities_city"."slug",
                 "cities_city"."department",
                 "cities_city"."post_codes",
                 "cities_city"."code_insee",
                 "cities_city"."coords",
                 "cities_city"."edition_mode"
          FROM "companies_jobdescription"
          INNER JOIN "jobs_appellation" ON ("companies_jobdescription"."appellation_id" = "jobs_appellation"."code")
          LEFT OUTER JOIN "cities_city" ON ("companies_jobdescription"."location_id" = "cities_city"."id")
          WHERE "companies_jobdescription"."company_id" = %s
          ORDER BY "companies_jobdescription"."custom_name" ASC,
                   "companies_jobdescription"."is_active" ASC
        ''',
      }),
      dict({
        'origin': list([
          'Company.has_admin[common_apps/organizations/models.py]',
          'Company.convention_can_be_accessed_by[companies/models.py]',
          'nav[utils/templatetags/nav.py]',
          'InclusionNode[layout/_header_authenticated.html]',
          'IncludeNode[layout/base.html]',
          'IfNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_accept.html]',
          '_accept[www/apply/views/common.py]',
          'accept[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "users_user"
          INNER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
          WHERE ("companies_companymembership"."id" IN
                   (SELECT U0."id"
                    FROM "companies_companymembership" U0
                    INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                    WHERE (U0."company_id" = %s
                           AND U2."is_active"
                           AND U0."is_active"
                           AND U0."is_admin"
                           AND U2."is_active"))
                 AND "users_user"."id" = %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
    ]),
  })
# ---
# name: TestProcessTransferJobApplication.test_job_application_external_transfer_disabled_for_bad_state
  '''
  <div class="dropdown dropdown-structure">
      <button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link-white btn-block w-lg-auto dropdown-toggle" data-bs-toggle="dropdown" id="transfer_to_button" type="button">
          Transférer cette candidature vers
      </button>
      <div aria-labelledby="transfer_to_button" class="dropdown-menu w-100">
          
          
              <div data-bs-placement="bottom" data-bs-toggle="tooltip" title="Vous devez d’abord décliner la candidature pour pouvoir la transférer à un autre employeur">
                  <div class="dropdown-item disabled">
                      <i class="ri-home-smile-line"></i>
                      <strong>Une autre structure</strong>
                  </div>
              </div>
          
      </div>
  </div>
  '''
# ---
# name: TestProcessTransferJobApplication.test_job_application_external_transfer_only_for_lone_users
  '''
  <div class="dropdown dropdown-structure">
      <button aria-expanded="false" aria-haspopup="true" class="btn btn-lg btn-link-white btn-block w-lg-auto dropdown-toggle" data-bs-toggle="dropdown" id="transfer_to_button" type="button">
          Transférer cette candidature vers
      </button>
      <div aria-labelledby="transfer_to_button" class="dropdown-menu w-100">
          
          
              <a class="dropdown-item" href="/apply/[PK of JobApplication]/siae/external-transfer/1">
                  <i class="ri-home-smile-line"></i>
                  <strong>Une autre structure</strong>
              </a>
          
      </div>
  </div>
  '''
# ---
# name: TestProcessTransferJobApplication.test_job_application_transfer_redirection[job application transfer message]
  'La candidature de <>Html Escaped<> DOE a bien été transférée à Acme inc.||Pour la consulter, rendez-vous sur son tableau de bord en changeant de structure'
# ---
# name: TestProcessViews.test_details_for_company_from_approval[job application detail for company]
  dict({
    'num_queries': 21,
    'queries': list([
      dict({
        'origin': list([
          'SessionStore._get_session_from_db[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          SELECT "django_session"."session_key",
                 "django_session"."session_data",
                 "django_session"."expire_date"
          FROM "django_session"
          WHERE ("django_session"."expire_date" > %s
                 AND "django_session"."session_key" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "users_user"
          WHERE "users_user"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_companymembership"."id",
                 "companies_companymembership"."user_id",
                 "companies_companymembership"."joined_at",
                 "companies_companymembership"."is_admin",
                 "companies_companymembership"."is_active",
                 "companies_companymembership"."created_at",
                 "companies_companymembership"."updated_at",
                 "companies_companymembership"."company_id",
                 "companies_companymembership"."updated_by_id",
                 "companies_companymembership"."notifications"
          FROM "companies_companymembership"
          WHERE ("companies_companymembership"."user_id" = %s
                 AND "companies_companymembership"."is_active")
          ORDER BY "companies_companymembership"."created_at" ASC
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id",
                 EXISTS
            (SELECT %s AS "a"
             FROM "companies_siaeconvention" U0
             WHERE (U0."deactivated_at" >= %s
                    AND U0."id" = ("companies_company"."convention_id"))
             LIMIT 1) AS "has_convention_in_grace_period",
                 "companies_siaeconvention"."id",
                 "companies_siaeconvention"."kind",
                 "companies_siaeconvention"."siret_signature",
                 "companies_siaeconvention"."is_active",
                 "companies_siaeconvention"."deactivated_at",
                 "companies_siaeconvention"."reactivated_by_id",
                 "companies_siaeconvention"."reactivated_at",
                 "companies_siaeconvention"."asp_id",
                 "companies_siaeconvention"."created_at",
                 "companies_siaeconvention"."updated_at"
          FROM "companies_company"
          INNER JOIN "companies_companymembership" ON ("companies_company"."id" = "companies_companymembership"."company_id")
          LEFT OUTER JOIN "companies_siaeconvention" ON ("companies_company"."convention_id" = "companies_siaeconvention"."id")
          WHERE (NOT ("companies_company"."siret" = %s)
                 AND "companies_companymembership"."user_id" = %s
                 AND "companies_company"."id" IN (%s)
                 AND (NOT ("companies_company"."kind" IN (%s,
                                                          %s,
                                                          %s,
                                                          %s,
                                                          %s))
                      OR "companies_company"."source" = %s
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."id" = ("companies_company"."convention_id")
                                AND U0."is_active")
                         LIMIT 1)
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."deactivated_at" >= %s
                                AND U0."id" = ("companies_company"."convention_id"))
                         LIMIT 1)))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplication"."id",
                 "job_applications_jobapplication"."job_seeker_id",
                 "job_applications_jobapplication"."eligibility_diagnosis_id",
                 "job_applications_jobapplication"."geiq_eligibility_diagnosis_id",
                 "job_applications_jobapplication"."create_employee_record",
                 "job_applications_jobapplication"."resume_link",
                 "job_applications_jobapplication"."sender_id",
                 "job_applications_jobapplication"."sender_kind",
                 "job_applications_jobapplication"."sender_company_id",
                 "job_applications_jobapplication"."sender_prescriber_organization_id",
                 "job_applications_jobapplication"."to_company_id",
                 "job_applications_jobapplication"."state",
                 "job_applications_jobapplication"."archived_at",
                 "job_applications_jobapplication"."archived_by_id",
                 "job_applications_jobapplication"."hired_job_id",
                 "job_applications_jobapplication"."message",
                 "job_applications_jobapplication"."answer",
                 "job_applications_jobapplication"."answer_to_prescriber",
                 "job_applications_jobapplication"."refusal_reason",
                 "job_applications_jobapplication"."refusal_reason_shared_with_job_seeker",
                 "job_applications_jobapplication"."hiring_start_at",
                 "job_applications_jobapplication"."hiring_end_at",
                 "job_applications_jobapplication"."hiring_without_approval",
                 "job_applications_jobapplication"."origin",
                 "job_applications_jobapplication"."approval_id",
                 "job_applications_jobapplication"."approval_delivery_mode",
                 "job_applications_jobapplication"."approval_number_sent_by_email",
                 "job_applications_jobapplication"."approval_number_sent_at",
                 "job_applications_jobapplication"."approval_manually_delivered_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_at",
                 "job_applications_jobapplication"."transferred_at",
                 "job_applications_jobapplication"."transferred_by_id",
                 "job_applications_jobapplication"."transferred_from_id",
                 "job_applications_jobapplication"."created_at",
                 "job_applications_jobapplication"."updated_at",
                 "job_applications_jobapplication"."processed_at",
                 "job_applications_jobapplication"."prehiring_guidance_days",
                 "job_applications_jobapplication"."contract_type",
                 "job_applications_jobapplication"."nb_hours_per_week",
                 "job_applications_jobapplication"."contract_type_details",
                 "job_applications_jobapplication"."qualification_type",
                 "job_applications_jobapplication"."qualification_level",
                 "job_applications_jobapplication"."planned_training_hours",
                 "job_applications_jobapplication"."inverted_vae_contract",
                 "job_applications_jobapplication"."diagoriente_invite_sent_at",
                 EXISTS
            (SELECT %s AS "a"
             FROM "rdv_insertion_invitationrequest" U0
             WHERE (U0."company_id" = ("job_applications_jobapplication"."to_company_id")
                    AND U0."created_at" > %s
                    AND U0."job_seeker_id" = ("job_applications_jobapplication"."job_seeker_id"))
             LIMIT 1) AS "has_pending_rdv_insertion_invitation_request",
                 COUNT("rdv_insertion_participation"."id") FILTER (
                                                                   WHERE ("rdv_insertion_appointment"."company_id" = %s
                                                                          AND "rdv_insertion_appointment"."start_at" > %s
                                                                          AND "rdv_insertion_participation"."status" = %s)) AS "upcoming_participations_count",
                 T5."id",
                 T5."password",
                 T5."last_login",
                 T5."is_superuser",
                 T5."username",
                 T5."first_name",
                 T5."last_name",
                 T5."is_staff",
                 T5."is_active",
                 T5."date_joined",
                 T5."address_line_1",
                 T5."address_line_2",
                 T5."post_code",
                 T5."city",
                 T5."department",
                 T5."coords",
                 T5."geocoding_score",
                 T5."geocoding_updated_at",
                 T5."ban_api_resolved_address",
                 T5."insee_city_id",
                 T5."title",
                 T5."email",
                 T5."phone",
                 T5."kind",
                 T5."identity_provider",
                 T5."has_completed_welcoming_tour",
                 T5."created_by_id",
                 T5."external_data_source_history",
                 T5."last_checked_at",
                 T5."public_id",
                 T5."address_filled_at",
                 T5."first_login",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."ata_allocation_since",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "eligibility_eligibilitydiagnosis"."id",
                 "eligibility_eligibilitydiagnosis"."author_id",
                 "eligibility_eligibilitydiagnosis"."author_kind",
                 "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_eligibilitydiagnosis"."created_at",
                 "eligibility_eligibilitydiagnosis"."updated_at",
                 "eligibility_eligibilitydiagnosis"."expires_at",
                 "eligibility_eligibilitydiagnosis"."job_seeker_id",
                 "eligibility_eligibilitydiagnosis"."author_siae_id",
                 T11."id",
                 T11."password",
                 T11."last_login",
                 T11."is_superuser",
                 T11."username",
                 T11."first_name",
                 T11."last_name",
                 T11."is_staff",
                 T11."is_active",
                 T11."date_joined",
                 T11."address_line_1",
                 T11."address_line_2",
                 T11."post_code",
                 T11."city",
                 T11."department",
                 T11."coords",
                 T11."geocoding_score",
                 T11."geocoding_updated_at",
                 T11."ban_api_resolved_address",
                 T11."insee_city_id",
                 T11."title",
                 T11."email",
                 T11."phone",
                 T11."kind",
                 T11."identity_provider",
                 T11."has_completed_welcoming_tour",
                 T11."created_by_id",
                 T11."external_data_source_history",
                 T11."last_checked_at",
                 T11."public_id",
                 T11."address_filled_at",
                 T11."first_login",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."is_authorized",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id",
                 T13."id",
                 T13."password",
                 T13."last_login",
                 T13."is_superuser",
                 T13."username",
                 T13."first_name",
                 T13."last_name",
                 T13."is_staff",
                 T13."is_active",
                 T13."date_joined",
                 T13."address_line_1",
                 T13."address_line_2",
                 T13."post_code",
                 T13."city",
                 T13."department",
                 T13."coords",
                 T13."geocoding_score",
                 T13."geocoding_updated_at",
                 T13."ban_api_resolved_address",
                 T13."insee_city_id",
                 T13."title",
                 T13."email",
                 T13."phone",
                 T13."kind",
                 T13."identity_provider",
                 T13."has_completed_welcoming_tour",
                 T13."created_by_id",
                 T13."external_data_source_history",
                 T13."last_checked_at",
                 T13."public_id",
                 T13."address_filled_at",
                 T13."first_login",
                 T14."user_id",
                 T14."birthdate",
                 T14."birth_place_id",
                 T14."birth_country_id",
                 T14."nir",
                 T14."lack_of_nir_reason",
                 T14."pole_emploi_id",
                 T14."lack_of_pole_emploi_id_reason",
                 T14."asp_uid",
                 T14."education_level",
                 T14."resourceless",
                 T14."rqth_employee",
                 T14."oeth_employee",
                 T14."pole_emploi_since",
                 T14."unemployed_since",
                 T14."has_rsa_allocation",
                 T14."rsa_allocation_since",
                 T14."ass_allocation_since",
                 T14."aah_allocation_since",
                 T14."ata_allocation_since",
                 T14."hexa_lane_number",
                 T14."hexa_std_extension",
                 T14."hexa_non_std_extension",
                 T14."hexa_lane_type",
                 T14."hexa_lane_name",
                 T14."hexa_additional_address",
                 T14."hexa_post_code",
                 T14."hexa_commune_id",
                 T14."pe_obfuscated_nir",
                 T14."pe_last_certification_attempt_at",
                 T15."id",
                 T15."address_line_1",
                 T15."address_line_2",
                 T15."post_code",
                 T15."city",
                 T15."department",
                 T15."coords",
                 T15."geocoding_score",
                 T15."geocoding_updated_at",
                 T15."ban_api_resolved_address",
                 T15."insee_city_id",
                 T15."name",
                 T15."created_at",
                 T15."updated_at",
                 T15."uid",
                 T15."active_members_email_reminder_last_sent_at",
                 T15."automatic_geocoding_update",
                 T15."siret",
                 T15."naf",
                 T15."kind",
                 T15."brand",
                 T15."phone",
                 T15."email",
                 T15."auth_email",
                 T15."website",
                 T15."description",
                 T15."provided_support",
                 T15."source",
                 T15."created_by_id",
                 T15."block_job_applications",
                 T15."job_applications_blocked_at",
                 T15."convention_id",
                 T15."job_app_score",
                 T15."is_searchable",
                 T15."rdv_solidarites_id",
                 "eligibility_geiqeligibilitydiagnosis"."id",
                 "eligibility_geiqeligibilitydiagnosis"."author_id",
                 "eligibility_geiqeligibilitydiagnosis"."author_kind",
                 "eligibility_geiqeligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_geiqeligibilitydiagnosis"."created_at",
                 "eligibility_geiqeligibilitydiagnosis"."updated_at",
                 "eligibility_geiqeligibilitydiagnosis"."expires_at",
                 "eligibility_geiqeligibilitydiagnosis"."job_seeker_id",
                 "eligibility_geiqeligibilitydiagnosis"."author_geiq_id",
                 T17."id",
                 T17."password",
                 T17."last_login",
                 T17."is_superuser",
                 T17."username",
                 T17."first_name",
                 T17."last_name",
                 T17."is_staff",
                 T17."is_active",
                 T17."date_joined",
                 T17."address_line_1",
                 T17."address_line_2",
                 T17."post_code",
                 T17."city",
                 T17."department",
                 T17."coords",
                 T17."geocoding_score",
                 T17."geocoding_updated_at",
                 T17."ban_api_resolved_address",
                 T17."insee_city_id",
                 T17."title",
                 T17."email",
                 T17."phone",
                 T17."kind",
                 T17."identity_provider",
                 T17."has_completed_welcoming_tour",
                 T17."created_by_id",
                 T17."external_data_source_history",
                 T17."last_checked_at",
                 T17."public_id",
                 T17."address_filled_at",
                 T17."first_login",
                 T18."id",
                 T18."address_line_1",
                 T18."address_line_2",
                 T18."post_code",
                 T18."city",
                 T18."department",
                 T18."coords",
                 T18."geocoding_score",
                 T18."geocoding_updated_at",
                 T18."ban_api_resolved_address",
                 T18."insee_city_id",
                 T18."name",
                 T18."created_at",
                 T18."updated_at",
                 T18."uid",
                 T18."active_members_email_reminder_last_sent_at",
                 T18."automatic_geocoding_update",
                 T18."siret",
                 T18."naf",
                 T18."kind",
                 T18."brand",
                 T18."phone",
                 T18."email",
                 T18."auth_email",
                 T18."website",
                 T18."description",
                 T18."provided_support",
                 T18."source",
                 T18."created_by_id",
                 T18."block_job_applications",
                 T18."job_applications_blocked_at",
                 T18."convention_id",
                 T18."job_app_score",
                 T18."is_searchable",
                 T18."rdv_solidarites_id",
                 T19."id",
                 T19."address_line_1",
                 T19."address_line_2",
                 T19."post_code",
                 T19."city",
                 T19."department",
                 T19."coords",
                 T19."geocoding_score",
                 T19."geocoding_updated_at",
                 T19."ban_api_resolved_address",
                 T19."insee_city_id",
                 T19."name",
                 T19."created_at",
                 T19."updated_at",
                 T19."uid",
                 T19."active_members_email_reminder_last_sent_at",
                 T19."automatic_geocoding_update",
                 T19."siret",
                 T19."is_head_office",
                 T19."kind",
                 T19."is_brsa",
                 T19."phone",
                 T19."email",
                 T19."website",
                 T19."description",
                 T19."is_authorized",
                 T19."code_safir_pole_emploi",
                 T19."created_by_id",
                 T19."authorization_status",
                 T19."authorization_updated_at",
                 T19."authorization_updated_by_id",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id",
                 T20."id",
                 T20."password",
                 T20."last_login",
                 T20."is_superuser",
                 T20."username",
                 T20."first_name",
                 T20."last_name",
                 T20."is_staff",
                 T20."is_active",
                 T20."date_joined",
                 T20."address_line_1",
                 T20."address_line_2",
                 T20."post_code",
                 T20."city",
                 T20."department",
                 T20."coords",
                 T20."geocoding_score",
                 T20."geocoding_updated_at",
                 T20."ban_api_resolved_address",
                 T20."insee_city_id",
                 T20."title",
                 T20."email",
                 T20."phone",
                 T20."kind",
                 T20."identity_provider",
                 T20."has_completed_welcoming_tour",
                 T20."created_by_id",
                 T20."external_data_source_history",
                 T20."last_checked_at",
                 T20."public_id",
                 T20."address_filled_at",
                 T20."first_login",
                 "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "job_applications_jobapplication"
          INNER JOIN "companies_company" ON ("job_applications_jobapplication"."to_company_id" = "companies_company"."id")
          INNER JOIN "companies_companymembership" ON ("companies_company"."id" = "companies_companymembership"."company_id")
          INNER JOIN "users_user" ON ("companies_companymembership"."user_id" = "users_user"."id")
          INNER JOIN "users_user" T5 ON ("job_applications_jobapplication"."job_seeker_id" = T5."id")
          LEFT OUTER JOIN "rdv_insertion_participation" ON (T5."id" = "rdv_insertion_participation"."job_seeker_id")
          LEFT OUTER JOIN "rdv_insertion_appointment" ON ("rdv_insertion_participation"."appointment_id" = "rdv_insertion_appointment"."id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON (T5."id" = "users_jobseekerprofile"."user_id")
          LEFT OUTER JOIN "eligibility_eligibilitydiagnosis" ON ("job_applications_jobapplication"."eligibility_diagnosis_id" = "eligibility_eligibilitydiagnosis"."id")
          LEFT OUTER JOIN "users_user" T11 ON ("eligibility_eligibilitydiagnosis"."author_id" = T11."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          LEFT OUTER JOIN "users_user" T13 ON ("eligibility_eligibilitydiagnosis"."job_seeker_id" = T13."id")
          LEFT OUTER JOIN "users_jobseekerprofile" T14 ON (T13."id" = T14."user_id")
          LEFT OUTER JOIN "companies_company" T15 ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = T15."id")
          LEFT OUTER JOIN "eligibility_geiqeligibilitydiagnosis" ON ("job_applications_jobapplication"."geiq_eligibility_diagnosis_id" = "eligibility_geiqeligibilitydiagnosis"."id")
          LEFT OUTER JOIN "users_user" T17 ON ("job_applications_jobapplication"."sender_id" = T17."id")
          LEFT OUTER JOIN "companies_company" T18 ON ("job_applications_jobapplication"."sender_company_id" = T18."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" T19 ON ("job_applications_jobapplication"."sender_prescriber_organization_id" = T19."id")
          LEFT OUTER JOIN "users_user" T20 ON ("job_applications_jobapplication"."archived_by_id" = T20."id")
          LEFT OUTER JOIN "approvals_approval" ON ("job_applications_jobapplication"."approval_id" = "approvals_approval"."id")
          WHERE ("companies_companymembership"."user_id" = %s
                 AND "users_user"."is_active"
                 AND "job_applications_jobapplication"."id" = %s)
          GROUP BY "job_applications_jobapplication"."id",
                   T5."id",
                   "users_jobseekerprofile"."user_id",
                   "eligibility_eligibilitydiagnosis"."id",
                   T11."id",
                   "prescribers_prescriberorganization"."id",
                   T13."id",
                   T14."user_id",
                   T15."id",
                   "eligibility_geiqeligibilitydiagnosis"."id",
                   T17."id",
                   T18."id",
                   T19."id",
                   "companies_company"."id",
                   T20."id",
                   "approvals_approval"."id"
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT ("job_applications_jobapplication_selected_jobs"."jobapplication_id") AS "_prefetch_related_val_jobapplication_id",
                 "companies_jobdescription"."id",
                 "companies_jobdescription"."appellation_id",
                 "companies_jobdescription"."company_id",
                 "companies_jobdescription"."created_at",
                 "companies_jobdescription"."updated_at",
                 "companies_jobdescription"."is_active",
                 "companies_jobdescription"."custom_name",
                 "companies_jobdescription"."description",
                 "companies_jobdescription"."ui_rank",
                 "companies_jobdescription"."contract_type",
                 "companies_jobdescription"."other_contract_type",
                 "companies_jobdescription"."contract_nature",
                 "companies_jobdescription"."location_id",
                 "companies_jobdescription"."hours_per_week",
                 "companies_jobdescription"."open_positions",
                 "companies_jobdescription"."profile_description",
                 "companies_jobdescription"."is_resume_mandatory",
                 "companies_jobdescription"."is_qpv_mandatory",
                 "companies_jobdescription"."market_context_description",
                 "companies_jobdescription"."source_id",
                 "companies_jobdescription"."source_kind",
                 "companies_jobdescription"."source_url",
                 "companies_jobdescription"."field_history",
                 "companies_jobdescription"."creation_source"
          FROM "companies_jobdescription"
          INNER JOIN "job_applications_jobapplication_selected_jobs" ON ("companies_jobdescription"."id" = "job_applications_jobapplication_selected_jobs"."jobdescription_id")
          INNER JOIN "jobs_appellation" ON ("companies_jobdescription"."appellation_id" = "jobs_appellation"."code")
          WHERE "job_applications_jobapplication_selected_jobs"."jobapplication_id" IN (%s)
          ORDER BY "jobs_appellation"."name" ASC,
                   "companies_jobdescription"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_selectedadministrativecriteria"."id",
                 "eligibility_selectedadministrativecriteria"."certified",
                 "eligibility_selectedadministrativecriteria"."certified_at",
                 "eligibility_selectedadministrativecriteria"."certification_period",
                 "eligibility_selectedadministrativecriteria"."data_returned_by_api",
                 "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id",
                 "eligibility_selectedadministrativecriteria"."administrative_criteria_id",
                 "eligibility_selectedadministrativecriteria"."created_at"
          FROM "eligibility_selectedadministrativecriteria"
          WHERE "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id" IN (%s)
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'User.latest_approval[users/models.py]',
          'User.has_valid_approval[users/models.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.has_considered_valid[eligibility/models/iae.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.last_expired[eligibility/models/iae.py]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'JobApplication.can_be_cancelled[job_applications/models.py]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "employee_record_employeerecord"
          WHERE "employee_record_employeerecord"."job_application_id" = %s
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Company.has_admin[common_apps/organizations/models.py]',
          'Company.convention_can_be_accessed_by[companies/models.py]',
          'nav[utils/templatetags/nav.py]',
          'InclusionNode[layout/_header_authenticated.html]',
          'IncludeNode[layout/base.html]',
          'IfNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "users_user"
          INNER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
          WHERE ("companies_companymembership"."id" IN
                   (SELECT U0."id"
                    FROM "companies_companymembership" U0
                    INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                    WHERE (U0."company_id" = %s
                           AND U2."is_active"
                           AND U0."is_active"
                           AND U0."is_admin"
                           AND U2."is_active"))
                 AND "users_user"."id" = %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IncludeNode[apply/process_details_company.html]',
          'IfNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_selectedadministrativecriteria"."id",
                 "eligibility_selectedadministrativecriteria"."certified",
                 "eligibility_selectedadministrativecriteria"."certified_at",
                 "eligibility_selectedadministrativecriteria"."certification_period",
                 "eligibility_selectedadministrativecriteria"."data_returned_by_api",
                 "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id",
                 "eligibility_selectedadministrativecriteria"."administrative_criteria_id",
                 "eligibility_selectedadministrativecriteria"."created_at",
                 ("eligibility_selectedadministrativecriteria"."certification_period" && %s
                  AND "eligibility_selectedadministrativecriteria"."certified") AS "is_considered_certified"
          FROM "eligibility_selectedadministrativecriteria"
          WHERE "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id" = %s
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'User.latest_approval[users/models.py]',
          'User.has_valid_approval[users/models.py]',
          'EligibilityDiagnosis.considered_to_expire_at[eligibility/models/iae.py]',
          'VariableNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IncludeNode[apply/process_details_company.html]',
          'IfNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'Approval.is_suspended[approvals/models.py]',
          'Approval.state[approvals/models.py]',
          'IfNode[approvals/includes/box.html]',
          'IncludeNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'WithNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'BlockNode',
          'VariableNode[apply/process_details_company.html]',
          'BlockNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "approvals_suspension"
          WHERE ("approvals_suspension"."approval_id" = %s
                 AND "approvals_suspension"."end_at" >= %s
                 AND "approvals_suspension"."start_at" <= %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Approval.remainder[approvals/models.py]',
          'Approval.remainder_as_date[approvals/models.py]',
          'VariableNode[approvals/includes/box.html]',
          'IfNode[approvals/includes/box.html]',
          'IncludeNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'WithNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'BlockNode',
          'VariableNode[apply/process_details_company.html]',
          'BlockNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_suspension"."id",
                 "approvals_suspension"."approval_id",
                 "approvals_suspension"."start_at",
                 "approvals_suspension"."end_at",
                 "approvals_suspension"."siae_id",
                 "approvals_suspension"."reason",
                 "approvals_suspension"."reason_explanation",
                 "approvals_suspension"."created_at",
                 "approvals_suspension"."created_by_id",
                 "approvals_suspension"."updated_at",
                 "approvals_suspension"."updated_by_id"
          FROM "approvals_suspension"
          WHERE "approvals_suspension"."approval_id" = %s
          ORDER BY "approvals_suspension"."start_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'QuerySet.first[<site-packages>/django/db/models/query.py]',
          'Approval.pending_prolongation_request[approvals/models.py]',
          'WithNode[approvals/includes/box.html]',
          'IfNode[approvals/includes/box.html]',
          'IfNode[approvals/includes/box.html]',
          'IncludeNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'WithNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'BlockNode',
          'VariableNode[apply/process_details_company.html]',
          'BlockNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_prolongationrequest"."id",
                 "approvals_prolongationrequest"."approval_id",
                 "approvals_prolongationrequest"."start_at",
                 "approvals_prolongationrequest"."end_at",
                 "approvals_prolongationrequest"."reason",
                 "approvals_prolongationrequest"."reason_explanation",
                 "approvals_prolongationrequest"."declared_by_id",
                 "approvals_prolongationrequest"."declared_by_siae_id",
                 "approvals_prolongationrequest"."validated_by_id",
                 "approvals_prolongationrequest"."prescriber_organization_id",
                 "approvals_prolongationrequest"."created_at",
                 "approvals_prolongationrequest"."created_by_id",
                 "approvals_prolongationrequest"."updated_at",
                 "approvals_prolongationrequest"."updated_by_id",
                 "approvals_prolongationrequest"."report_file_id",
                 "approvals_prolongationrequest"."require_phone_interview",
                 "approvals_prolongationrequest"."contact_email",
                 "approvals_prolongationrequest"."contact_phone",
                 "approvals_prolongationrequest"."status",
                 "approvals_prolongationrequest"."processed_at",
                 "approvals_prolongationrequest"."processed_by_id",
                 "approvals_prolongationrequest"."reminder_sent_at"
          FROM "approvals_prolongationrequest"
          WHERE ("approvals_prolongationrequest"."approval_id" = %s
                 AND "approvals_prolongationrequest"."status" = %s)
          ORDER BY "approvals_prolongationrequest"."created_at" DESC
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'ForNode[apply/includes/transition_logs.html]',
          'WithNode[apply/includes/transition_logs.html]',
          'IncludeNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplicationtransitionlog"."id",
                 "job_applications_jobapplicationtransitionlog"."transition",
                 "job_applications_jobapplicationtransitionlog"."from_state",
                 "job_applications_jobapplicationtransitionlog"."to_state",
                 "job_applications_jobapplicationtransitionlog"."timestamp",
                 "job_applications_jobapplicationtransitionlog"."job_application_id",
                 "job_applications_jobapplicationtransitionlog"."user_id",
                 "job_applications_jobapplicationtransitionlog"."target_company_id",
                 "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "job_applications_jobapplicationtransitionlog"
          LEFT OUTER JOIN "users_user" ON ("job_applications_jobapplicationtransitionlog"."user_id" = "users_user"."id")
          WHERE "job_applications_jobapplicationtransitionlog"."job_application_id" = %s
          ORDER BY "job_applications_jobapplicationtransitionlog"."timestamp" DESC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Session.save[<site-packages>/django/db/models/base.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          UPDATE "django_session"
          SET "session_data" = %s,
              "expire_date" = %s
          WHERE "django_session"."session_key" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
    ]),
  })
# ---
# name: TestProcessViews.test_details_for_company_from_list[job application detail for company]
  dict({
    'num_queries': 21,
    'queries': list([
      dict({
        'origin': list([
          'SessionStore._get_session_from_db[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          SELECT "django_session"."session_key",
                 "django_session"."session_data",
                 "django_session"."expire_date"
          FROM "django_session"
          WHERE ("django_session"."expire_date" > %s
                 AND "django_session"."session_key" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "users_user"
          WHERE "users_user"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_companymembership"."id",
                 "companies_companymembership"."user_id",
                 "companies_companymembership"."joined_at",
                 "companies_companymembership"."is_admin",
                 "companies_companymembership"."is_active",
                 "companies_companymembership"."created_at",
                 "companies_companymembership"."updated_at",
                 "companies_companymembership"."company_id",
                 "companies_companymembership"."updated_by_id",
                 "companies_companymembership"."notifications"
          FROM "companies_companymembership"
          WHERE ("companies_companymembership"."user_id" = %s
                 AND "companies_companymembership"."is_active")
          ORDER BY "companies_companymembership"."created_at" ASC
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id",
                 EXISTS
            (SELECT %s AS "a"
             FROM "companies_siaeconvention" U0
             WHERE (U0."deactivated_at" >= %s
                    AND U0."id" = ("companies_company"."convention_id"))
             LIMIT 1) AS "has_convention_in_grace_period",
                 "companies_siaeconvention"."id",
                 "companies_siaeconvention"."kind",
                 "companies_siaeconvention"."siret_signature",
                 "companies_siaeconvention"."is_active",
                 "companies_siaeconvention"."deactivated_at",
                 "companies_siaeconvention"."reactivated_by_id",
                 "companies_siaeconvention"."reactivated_at",
                 "companies_siaeconvention"."asp_id",
                 "companies_siaeconvention"."created_at",
                 "companies_siaeconvention"."updated_at"
          FROM "companies_company"
          INNER JOIN "companies_companymembership" ON ("companies_company"."id" = "companies_companymembership"."company_id")
          LEFT OUTER JOIN "companies_siaeconvention" ON ("companies_company"."convention_id" = "companies_siaeconvention"."id")
          WHERE (NOT ("companies_company"."siret" = %s)
                 AND "companies_companymembership"."user_id" = %s
                 AND "companies_company"."id" IN (%s)
                 AND (NOT ("companies_company"."kind" IN (%s,
                                                          %s,
                                                          %s,
                                                          %s,
                                                          %s))
                      OR "companies_company"."source" = %s
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."id" = ("companies_company"."convention_id")
                                AND U0."is_active")
                         LIMIT 1)
                      OR EXISTS
                        (SELECT %s AS "a"
                         FROM "companies_siaeconvention" U0
                         WHERE (U0."deactivated_at" >= %s
                                AND U0."id" = ("companies_company"."convention_id"))
                         LIMIT 1)))
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplication"."id",
                 "job_applications_jobapplication"."job_seeker_id",
                 "job_applications_jobapplication"."eligibility_diagnosis_id",
                 "job_applications_jobapplication"."geiq_eligibility_diagnosis_id",
                 "job_applications_jobapplication"."create_employee_record",
                 "job_applications_jobapplication"."resume_link",
                 "job_applications_jobapplication"."sender_id",
                 "job_applications_jobapplication"."sender_kind",
                 "job_applications_jobapplication"."sender_company_id",
                 "job_applications_jobapplication"."sender_prescriber_organization_id",
                 "job_applications_jobapplication"."to_company_id",
                 "job_applications_jobapplication"."state",
                 "job_applications_jobapplication"."archived_at",
                 "job_applications_jobapplication"."archived_by_id",
                 "job_applications_jobapplication"."hired_job_id",
                 "job_applications_jobapplication"."message",
                 "job_applications_jobapplication"."answer",
                 "job_applications_jobapplication"."answer_to_prescriber",
                 "job_applications_jobapplication"."refusal_reason",
                 "job_applications_jobapplication"."refusal_reason_shared_with_job_seeker",
                 "job_applications_jobapplication"."hiring_start_at",
                 "job_applications_jobapplication"."hiring_end_at",
                 "job_applications_jobapplication"."hiring_without_approval",
                 "job_applications_jobapplication"."origin",
                 "job_applications_jobapplication"."approval_id",
                 "job_applications_jobapplication"."approval_delivery_mode",
                 "job_applications_jobapplication"."approval_number_sent_by_email",
                 "job_applications_jobapplication"."approval_number_sent_at",
                 "job_applications_jobapplication"."approval_manually_delivered_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_at",
                 "job_applications_jobapplication"."transferred_at",
                 "job_applications_jobapplication"."transferred_by_id",
                 "job_applications_jobapplication"."transferred_from_id",
                 "job_applications_jobapplication"."created_at",
                 "job_applications_jobapplication"."updated_at",
                 "job_applications_jobapplication"."processed_at",
                 "job_applications_jobapplication"."prehiring_guidance_days",
                 "job_applications_jobapplication"."contract_type",
                 "job_applications_jobapplication"."nb_hours_per_week",
                 "job_applications_jobapplication"."contract_type_details",
                 "job_applications_jobapplication"."qualification_type",
                 "job_applications_jobapplication"."qualification_level",
                 "job_applications_jobapplication"."planned_training_hours",
                 "job_applications_jobapplication"."inverted_vae_contract",
                 "job_applications_jobapplication"."diagoriente_invite_sent_at",
                 EXISTS
            (SELECT %s AS "a"
             FROM "rdv_insertion_invitationrequest" U0
             WHERE (U0."company_id" = ("job_applications_jobapplication"."to_company_id")
                    AND U0."created_at" > %s
                    AND U0."job_seeker_id" = ("job_applications_jobapplication"."job_seeker_id"))
             LIMIT 1) AS "has_pending_rdv_insertion_invitation_request",
                 COUNT("rdv_insertion_participation"."id") FILTER (
                                                                   WHERE ("rdv_insertion_appointment"."company_id" = %s
                                                                          AND "rdv_insertion_appointment"."start_at" > %s
                                                                          AND "rdv_insertion_participation"."status" = %s)) AS "upcoming_participations_count",
                 T5."id",
                 T5."password",
                 T5."last_login",
                 T5."is_superuser",
                 T5."username",
                 T5."first_name",
                 T5."last_name",
                 T5."is_staff",
                 T5."is_active",
                 T5."date_joined",
                 T5."address_line_1",
                 T5."address_line_2",
                 T5."post_code",
                 T5."city",
                 T5."department",
                 T5."coords",
                 T5."geocoding_score",
                 T5."geocoding_updated_at",
                 T5."ban_api_resolved_address",
                 T5."insee_city_id",
                 T5."title",
                 T5."email",
                 T5."phone",
                 T5."kind",
                 T5."identity_provider",
                 T5."has_completed_welcoming_tour",
                 T5."created_by_id",
                 T5."external_data_source_history",
                 T5."last_checked_at",
                 T5."public_id",
                 T5."address_filled_at",
                 T5."first_login",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."ata_allocation_since",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "eligibility_eligibilitydiagnosis"."id",
                 "eligibility_eligibilitydiagnosis"."author_id",
                 "eligibility_eligibilitydiagnosis"."author_kind",
                 "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_eligibilitydiagnosis"."created_at",
                 "eligibility_eligibilitydiagnosis"."updated_at",
                 "eligibility_eligibilitydiagnosis"."expires_at",
                 "eligibility_eligibilitydiagnosis"."job_seeker_id",
                 "eligibility_eligibilitydiagnosis"."author_siae_id",
                 T11."id",
                 T11."password",
                 T11."last_login",
                 T11."is_superuser",
                 T11."username",
                 T11."first_name",
                 T11."last_name",
                 T11."is_staff",
                 T11."is_active",
                 T11."date_joined",
                 T11."address_line_1",
                 T11."address_line_2",
                 T11."post_code",
                 T11."city",
                 T11."department",
                 T11."coords",
                 T11."geocoding_score",
                 T11."geocoding_updated_at",
                 T11."ban_api_resolved_address",
                 T11."insee_city_id",
                 T11."title",
                 T11."email",
                 T11."phone",
                 T11."kind",
                 T11."identity_provider",
                 T11."has_completed_welcoming_tour",
                 T11."created_by_id",
                 T11."external_data_source_history",
                 T11."last_checked_at",
                 T11."public_id",
                 T11."address_filled_at",
                 T11."first_login",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."is_authorized",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id",
                 T13."id",
                 T13."password",
                 T13."last_login",
                 T13."is_superuser",
                 T13."username",
                 T13."first_name",
                 T13."last_name",
                 T13."is_staff",
                 T13."is_active",
                 T13."date_joined",
                 T13."address_line_1",
                 T13."address_line_2",
                 T13."post_code",
                 T13."city",
                 T13."department",
                 T13."coords",
                 T13."geocoding_score",
                 T13."geocoding_updated_at",
                 T13."ban_api_resolved_address",
                 T13."insee_city_id",
                 T13."title",
                 T13."email",
                 T13."phone",
                 T13."kind",
                 T13."identity_provider",
                 T13."has_completed_welcoming_tour",
                 T13."created_by_id",
                 T13."external_data_source_history",
                 T13."last_checked_at",
                 T13."public_id",
                 T13."address_filled_at",
                 T13."first_login",
                 T14."user_id",
                 T14."birthdate",
                 T14."birth_place_id",
                 T14."birth_country_id",
                 T14."nir",
                 T14."lack_of_nir_reason",
                 T14."pole_emploi_id",
                 T14."lack_of_pole_emploi_id_reason",
                 T14."asp_uid",
                 T14."education_level",
                 T14."resourceless",
                 T14."rqth_employee",
                 T14."oeth_employee",
                 T14."pole_emploi_since",
                 T14."unemployed_since",
                 T14."has_rsa_allocation",
                 T14."rsa_allocation_since",
                 T14."ass_allocation_since",
                 T14."aah_allocation_since",
                 T14."ata_allocation_since",
                 T14."hexa_lane_number",
                 T14."hexa_std_extension",
                 T14."hexa_non_std_extension",
                 T14."hexa_lane_type",
                 T14."hexa_lane_name",
                 T14."hexa_additional_address",
                 T14."hexa_post_code",
                 T14."hexa_commune_id",
                 T14."pe_obfuscated_nir",
                 T14."pe_last_certification_attempt_at",
                 T15."id",
                 T15."address_line_1",
                 T15."address_line_2",
                 T15."post_code",
                 T15."city",
                 T15."department",
                 T15."coords",
                 T15."geocoding_score",
                 T15."geocoding_updated_at",
                 T15."ban_api_resolved_address",
                 T15."insee_city_id",
                 T15."name",
                 T15."created_at",
                 T15."updated_at",
                 T15."uid",
                 T15."active_members_email_reminder_last_sent_at",
                 T15."automatic_geocoding_update",
                 T15."siret",
                 T15."naf",
                 T15."kind",
                 T15."brand",
                 T15."phone",
                 T15."email",
                 T15."auth_email",
                 T15."website",
                 T15."description",
                 T15."provided_support",
                 T15."source",
                 T15."created_by_id",
                 T15."block_job_applications",
                 T15."job_applications_blocked_at",
                 T15."convention_id",
                 T15."job_app_score",
                 T15."is_searchable",
                 T15."rdv_solidarites_id",
                 "eligibility_geiqeligibilitydiagnosis"."id",
                 "eligibility_geiqeligibilitydiagnosis"."author_id",
                 "eligibility_geiqeligibilitydiagnosis"."author_kind",
                 "eligibility_geiqeligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_geiqeligibilitydiagnosis"."created_at",
                 "eligibility_geiqeligibilitydiagnosis"."updated_at",
                 "eligibility_geiqeligibilitydiagnosis"."expires_at",
                 "eligibility_geiqeligibilitydiagnosis"."job_seeker_id",
                 "eligibility_geiqeligibilitydiagnosis"."author_geiq_id",
                 T17."id",
                 T17."password",
                 T17."last_login",
                 T17."is_superuser",
                 T17."username",
                 T17."first_name",
                 T17."last_name",
                 T17."is_staff",
                 T17."is_active",
                 T17."date_joined",
                 T17."address_line_1",
                 T17."address_line_2",
                 T17."post_code",
                 T17."city",
                 T17."department",
                 T17."coords",
                 T17."geocoding_score",
                 T17."geocoding_updated_at",
                 T17."ban_api_resolved_address",
                 T17."insee_city_id",
                 T17."title",
                 T17."email",
                 T17."phone",
                 T17."kind",
                 T17."identity_provider",
                 T17."has_completed_welcoming_tour",
                 T17."created_by_id",
                 T17."external_data_source_history",
                 T17."last_checked_at",
                 T17."public_id",
                 T17."address_filled_at",
                 T17."first_login",
                 T18."id",
                 T18."address_line_1",
                 T18."address_line_2",
                 T18."post_code",
                 T18."city",
                 T18."department",
                 T18."coords",
                 T18."geocoding_score",
                 T18."geocoding_updated_at",
                 T18."ban_api_resolved_address",
                 T18."insee_city_id",
                 T18."name",
                 T18."created_at",
                 T18."updated_at",
                 T18."uid",
                 T18."active_members_email_reminder_last_sent_at",
                 T18."automatic_geocoding_update",
                 T18."siret",
                 T18."naf",
                 T18."kind",
                 T18."brand",
                 T18."phone",
                 T18."email",
                 T18."auth_email",
                 T18."website",
                 T18."description",
                 T18."provided_support",
                 T18."source",
                 T18."created_by_id",
                 T18."block_job_applications",
                 T18."job_applications_blocked_at",
                 T18."convention_id",
                 T18."job_app_score",
                 T18."is_searchable",
                 T18."rdv_solidarites_id",
                 T19."id",
                 T19."address_line_1",
                 T19."address_line_2",
                 T19."post_code",
                 T19."city",
                 T19."department",
                 T19."coords",
                 T19."geocoding_score",
                 T19."geocoding_updated_at",
                 T19."ban_api_resolved_address",
                 T19."insee_city_id",
                 T19."name",
                 T19."created_at",
                 T19."updated_at",
                 T19."uid",
                 T19."active_members_email_reminder_last_sent_at",
                 T19."automatic_geocoding_update",
                 T19."siret",
                 T19."is_head_office",
                 T19."kind",
                 T19."is_brsa",
                 T19."phone",
                 T19."email",
                 T19."website",
                 T19."description",
                 T19."is_authorized",
                 T19."code_safir_pole_emploi",
                 T19."created_by_id",
                 T19."authorization_status",
                 T19."authorization_updated_at",
                 T19."authorization_updated_by_id",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id",
                 T20."id",
                 T20."password",
                 T20."last_login",
                 T20."is_superuser",
                 T20."username",
                 T20."first_name",
                 T20."last_name",
                 T20."is_staff",
                 T20."is_active",
                 T20."date_joined",
                 T20."address_line_1",
                 T20."address_line_2",
                 T20."post_code",
                 T20."city",
                 T20."department",
                 T20."coords",
                 T20."geocoding_score",
                 T20."geocoding_updated_at",
                 T20."ban_api_resolved_address",
                 T20."insee_city_id",
                 T20."title",
                 T20."email",
                 T20."phone",
                 T20."kind",
                 T20."identity_provider",
                 T20."has_completed_welcoming_tour",
                 T20."created_by_id",
                 T20."external_data_source_history",
                 T20."last_checked_at",
                 T20."public_id",
                 T20."address_filled_at",
                 T20."first_login",
                 "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "job_applications_jobapplication"
          INNER JOIN "companies_company" ON ("job_applications_jobapplication"."to_company_id" = "companies_company"."id")
          INNER JOIN "companies_companymembership" ON ("companies_company"."id" = "companies_companymembership"."company_id")
          INNER JOIN "users_user" ON ("companies_companymembership"."user_id" = "users_user"."id")
          INNER JOIN "users_user" T5 ON ("job_applications_jobapplication"."job_seeker_id" = T5."id")
          LEFT OUTER JOIN "rdv_insertion_participation" ON (T5."id" = "rdv_insertion_participation"."job_seeker_id")
          LEFT OUTER JOIN "rdv_insertion_appointment" ON ("rdv_insertion_participation"."appointment_id" = "rdv_insertion_appointment"."id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON (T5."id" = "users_jobseekerprofile"."user_id")
          LEFT OUTER JOIN "eligibility_eligibilitydiagnosis" ON ("job_applications_jobapplication"."eligibility_diagnosis_id" = "eligibility_eligibilitydiagnosis"."id")
          LEFT OUTER JOIN "users_user" T11 ON ("eligibility_eligibilitydiagnosis"."author_id" = T11."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          LEFT OUTER JOIN "users_user" T13 ON ("eligibility_eligibilitydiagnosis"."job_seeker_id" = T13."id")
          LEFT OUTER JOIN "users_jobseekerprofile" T14 ON (T13."id" = T14."user_id")
          LEFT OUTER JOIN "companies_company" T15 ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = T15."id")
          LEFT OUTER JOIN "eligibility_geiqeligibilitydiagnosis" ON ("job_applications_jobapplication"."geiq_eligibility_diagnosis_id" = "eligibility_geiqeligibilitydiagnosis"."id")
          LEFT OUTER JOIN "users_user" T17 ON ("job_applications_jobapplication"."sender_id" = T17."id")
          LEFT OUTER JOIN "companies_company" T18 ON ("job_applications_jobapplication"."sender_company_id" = T18."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" T19 ON ("job_applications_jobapplication"."sender_prescriber_organization_id" = T19."id")
          LEFT OUTER JOIN "users_user" T20 ON ("job_applications_jobapplication"."archived_by_id" = T20."id")
          LEFT OUTER JOIN "approvals_approval" ON ("job_applications_jobapplication"."approval_id" = "approvals_approval"."id")
          WHERE ("companies_companymembership"."user_id" = %s
                 AND "users_user"."is_active"
                 AND "job_applications_jobapplication"."id" = %s)
          GROUP BY "job_applications_jobapplication"."id",
                   T5."id",
                   "users_jobseekerprofile"."user_id",
                   "eligibility_eligibilitydiagnosis"."id",
                   T11."id",
                   "prescribers_prescriberorganization"."id",
                   T13."id",
                   T14."user_id",
                   T15."id",
                   "eligibility_geiqeligibilitydiagnosis"."id",
                   T17."id",
                   T18."id",
                   T19."id",
                   "companies_company"."id",
                   T20."id",
                   "approvals_approval"."id"
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT ("job_applications_jobapplication_selected_jobs"."jobapplication_id") AS "_prefetch_related_val_jobapplication_id",
                 "companies_jobdescription"."id",
                 "companies_jobdescription"."appellation_id",
                 "companies_jobdescription"."company_id",
                 "companies_jobdescription"."created_at",
                 "companies_jobdescription"."updated_at",
                 "companies_jobdescription"."is_active",
                 "companies_jobdescription"."custom_name",
                 "companies_jobdescription"."description",
                 "companies_jobdescription"."ui_rank",
                 "companies_jobdescription"."contract_type",
                 "companies_jobdescription"."other_contract_type",
                 "companies_jobdescription"."contract_nature",
                 "companies_jobdescription"."location_id",
                 "companies_jobdescription"."hours_per_week",
                 "companies_jobdescription"."open_positions",
                 "companies_jobdescription"."profile_description",
                 "companies_jobdescription"."is_resume_mandatory",
                 "companies_jobdescription"."is_qpv_mandatory",
                 "companies_jobdescription"."market_context_description",
                 "companies_jobdescription"."source_id",
                 "companies_jobdescription"."source_kind",
                 "companies_jobdescription"."source_url",
                 "companies_jobdescription"."field_history",
                 "companies_jobdescription"."creation_source"
          FROM "companies_jobdescription"
          INNER JOIN "job_applications_jobapplication_selected_jobs" ON ("companies_jobdescription"."id" = "job_applications_jobapplication_selected_jobs"."jobdescription_id")
          INNER JOIN "jobs_appellation" ON ("companies_jobdescription"."appellation_id" = "jobs_appellation"."code")
          WHERE "job_applications_jobapplication_selected_jobs"."jobapplication_id" IN (%s)
          ORDER BY "jobs_appellation"."name" ASC,
                   "companies_jobdescription"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_selectedadministrativecriteria"."id",
                 "eligibility_selectedadministrativecriteria"."certified",
                 "eligibility_selectedadministrativecriteria"."certified_at",
                 "eligibility_selectedadministrativecriteria"."certification_period",
                 "eligibility_selectedadministrativecriteria"."data_returned_by_api",
                 "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id",
                 "eligibility_selectedadministrativecriteria"."administrative_criteria_id",
                 "eligibility_selectedadministrativecriteria"."created_at"
          FROM "eligibility_selectedadministrativecriteria"
          WHERE "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id" IN (%s)
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'User.latest_approval[users/models.py]',
          'User.has_valid_approval[users/models.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.has_considered_valid[eligibility/models/iae.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.last_expired[eligibility/models/iae.py]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'JobApplication.can_be_cancelled[job_applications/models.py]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "employee_record_employeerecord"
          WHERE "employee_record_employeerecord"."job_application_id" = %s
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Company.has_admin[common_apps/organizations/models.py]',
          'Company.convention_can_be_accessed_by[companies/models.py]',
          'nav[utils/templatetags/nav.py]',
          'InclusionNode[layout/_header_authenticated.html]',
          'IncludeNode[layout/base.html]',
          'IfNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "users_user"
          INNER JOIN "companies_companymembership" ON ("users_user"."id" = "companies_companymembership"."user_id")
          WHERE ("companies_companymembership"."id" IN
                   (SELECT U0."id"
                    FROM "companies_companymembership" U0
                    INNER JOIN "users_user" U2 ON (U0."user_id" = U2."id")
                    WHERE (U0."company_id" = %s
                           AND U2."is_active"
                           AND U0."is_active"
                           AND U0."is_admin"
                           AND U2."is_active"))
                 AND "users_user"."id" = %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IncludeNode[apply/process_details_company.html]',
          'IfNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_selectedadministrativecriteria"."id",
                 "eligibility_selectedadministrativecriteria"."certified",
                 "eligibility_selectedadministrativecriteria"."certified_at",
                 "eligibility_selectedadministrativecriteria"."certification_period",
                 "eligibility_selectedadministrativecriteria"."data_returned_by_api",
                 "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id",
                 "eligibility_selectedadministrativecriteria"."administrative_criteria_id",
                 "eligibility_selectedadministrativecriteria"."created_at",
                 ("eligibility_selectedadministrativecriteria"."certification_period" && %s
                  AND "eligibility_selectedadministrativecriteria"."certified") AS "is_considered_certified"
          FROM "eligibility_selectedadministrativecriteria"
          WHERE "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id" = %s
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'User.latest_approval[users/models.py]',
          'User.has_valid_approval[users/models.py]',
          'EligibilityDiagnosis.considered_to_expire_at[eligibility/models/iae.py]',
          'VariableNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IncludeNode[apply/process_details_company.html]',
          'IfNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'Approval.is_suspended[approvals/models.py]',
          'Approval.state[approvals/models.py]',
          'IfNode[approvals/includes/box.html]',
          'IncludeNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'WithNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'BlockNode',
          'VariableNode[apply/process_details_company.html]',
          'BlockNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT %s AS "a"
          FROM "approvals_suspension"
          WHERE ("approvals_suspension"."approval_id" = %s
                 AND "approvals_suspension"."end_at" >= %s
                 AND "approvals_suspension"."start_at" <= %s)
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'Approval.remainder[approvals/models.py]',
          'Approval.remainder_as_date[approvals/models.py]',
          'VariableNode[approvals/includes/box.html]',
          'IfNode[approvals/includes/box.html]',
          'IncludeNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'WithNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'BlockNode',
          'VariableNode[apply/process_details_company.html]',
          'BlockNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_suspension"."id",
                 "approvals_suspension"."approval_id",
                 "approvals_suspension"."start_at",
                 "approvals_suspension"."end_at",
                 "approvals_suspension"."siae_id",
                 "approvals_suspension"."reason",
                 "approvals_suspension"."reason_explanation",
                 "approvals_suspension"."created_at",
                 "approvals_suspension"."created_by_id",
                 "approvals_suspension"."updated_at",
                 "approvals_suspension"."updated_by_id"
          FROM "approvals_suspension"
          WHERE "approvals_suspension"."approval_id" = %s
          ORDER BY "approvals_suspension"."start_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'QuerySet.first[<site-packages>/django/db/models/query.py]',
          'Approval.pending_prolongation_request[approvals/models.py]',
          'WithNode[approvals/includes/box.html]',
          'IfNode[approvals/includes/box.html]',
          'IfNode[approvals/includes/box.html]',
          'IncludeNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'WithNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'IfNode[apply/process_base.html]',
          'BlockNode',
          'VariableNode[apply/process_details_company.html]',
          'BlockNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_prolongationrequest"."id",
                 "approvals_prolongationrequest"."approval_id",
                 "approvals_prolongationrequest"."start_at",
                 "approvals_prolongationrequest"."end_at",
                 "approvals_prolongationrequest"."reason",
                 "approvals_prolongationrequest"."reason_explanation",
                 "approvals_prolongationrequest"."declared_by_id",
                 "approvals_prolongationrequest"."declared_by_siae_id",
                 "approvals_prolongationrequest"."validated_by_id",
                 "approvals_prolongationrequest"."prescriber_organization_id",
                 "approvals_prolongationrequest"."created_at",
                 "approvals_prolongationrequest"."created_by_id",
                 "approvals_prolongationrequest"."updated_at",
                 "approvals_prolongationrequest"."updated_by_id",
                 "approvals_prolongationrequest"."report_file_id",
                 "approvals_prolongationrequest"."require_phone_interview",
                 "approvals_prolongationrequest"."contact_email",
                 "approvals_prolongationrequest"."contact_phone",
                 "approvals_prolongationrequest"."status",
                 "approvals_prolongationrequest"."processed_at",
                 "approvals_prolongationrequest"."processed_by_id",
                 "approvals_prolongationrequest"."reminder_sent_at"
          FROM "approvals_prolongationrequest"
          WHERE ("approvals_prolongationrequest"."approval_id" = %s
                 AND "approvals_prolongationrequest"."status" = %s)
          ORDER BY "approvals_prolongationrequest"."created_at" DESC
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'ForNode[apply/includes/transition_logs.html]',
          'WithNode[apply/includes/transition_logs.html]',
          'IncludeNode[apply/process_details_company.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details_company.html]',
          'details_for_company[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplicationtransitionlog"."id",
                 "job_applications_jobapplicationtransitionlog"."transition",
                 "job_applications_jobapplicationtransitionlog"."from_state",
                 "job_applications_jobapplicationtransitionlog"."to_state",
                 "job_applications_jobapplicationtransitionlog"."timestamp",
                 "job_applications_jobapplicationtransitionlog"."job_application_id",
                 "job_applications_jobapplicationtransitionlog"."user_id",
                 "job_applications_jobapplicationtransitionlog"."target_company_id",
                 "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "job_applications_jobapplicationtransitionlog"
          LEFT OUTER JOIN "users_user" ON ("job_applications_jobapplicationtransitionlog"."user_id" = "users_user"."id")
          WHERE "job_applications_jobapplicationtransitionlog"."job_application_id" = %s
          ORDER BY "job_applications_jobapplicationtransitionlog"."timestamp" DESC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Session.save[<site-packages>/django/db/models/base.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          UPDATE "django_session"
          SET "session_data" = %s,
              "expire_date" = %s
          WHERE "django_session"."session_key" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
    ]),
  })
# ---
# name: TestProcessViews.test_details_for_company_transition_logs_hides_hired_by_other
  '''
  <ul class="list-step" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:38:00+00:00">Le 12 décembre 2023 à 13:38</time>
                  <span>
                      
                          Passé en "Embauché ailleurs"
                      
                      
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:00+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: TestProcessViews.test_details_for_company_with_transition_logs
  '''
  <ul class="list-step" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:38:00+00:00">Le 12 décembre 2023 à 13:38</time>
                  <span>
                      
                          Passé en "Candidature acceptée"
                      
                      par John DOE
                  </span>
              </li>
          
              <li>
                  <time datetime="2023-12-12T12:37:00+00:00">Le 12 décembre 2023 à 13:37</time>
                  <span>
                      
                          Passé en "Candidature à l'étude"
                      
                      par John DOE
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:00+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: TestProcessViews.test_details_for_job_seeker
  dict({
    'num_queries': 16,
    'queries': list([
      dict({
        'origin': list([
          'SessionStore._get_session_from_db[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          SELECT "django_session"."session_key",
                 "django_session"."session_data",
                 "django_session"."expire_date"
          FROM "django_session"
          WHERE ("django_session"."expire_date" > %s
                 AND "django_session"."session_key" = %s)
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'ItouCurrentOrganizationMiddleware.__call__[utils/perms/middleware.py]',
        ]),
        'sql': '''
          SELECT "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "users_user"
          WHERE "users_user"."id" = %s
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplication"."id",
                 "job_applications_jobapplication"."job_seeker_id",
                 "job_applications_jobapplication"."eligibility_diagnosis_id",
                 "job_applications_jobapplication"."geiq_eligibility_diagnosis_id",
                 "job_applications_jobapplication"."create_employee_record",
                 "job_applications_jobapplication"."resume_link",
                 "job_applications_jobapplication"."sender_id",
                 "job_applications_jobapplication"."sender_kind",
                 "job_applications_jobapplication"."sender_company_id",
                 "job_applications_jobapplication"."sender_prescriber_organization_id",
                 "job_applications_jobapplication"."to_company_id",
                 "job_applications_jobapplication"."state",
                 "job_applications_jobapplication"."archived_at",
                 "job_applications_jobapplication"."archived_by_id",
                 "job_applications_jobapplication"."hired_job_id",
                 "job_applications_jobapplication"."message",
                 "job_applications_jobapplication"."answer",
                 "job_applications_jobapplication"."answer_to_prescriber",
                 "job_applications_jobapplication"."refusal_reason",
                 "job_applications_jobapplication"."refusal_reason_shared_with_job_seeker",
                 "job_applications_jobapplication"."hiring_start_at",
                 "job_applications_jobapplication"."hiring_end_at",
                 "job_applications_jobapplication"."hiring_without_approval",
                 "job_applications_jobapplication"."origin",
                 "job_applications_jobapplication"."approval_id",
                 "job_applications_jobapplication"."approval_delivery_mode",
                 "job_applications_jobapplication"."approval_number_sent_by_email",
                 "job_applications_jobapplication"."approval_number_sent_at",
                 "job_applications_jobapplication"."approval_manually_delivered_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_by_id",
                 "job_applications_jobapplication"."approval_manually_refused_at",
                 "job_applications_jobapplication"."transferred_at",
                 "job_applications_jobapplication"."transferred_by_id",
                 "job_applications_jobapplication"."transferred_from_id",
                 "job_applications_jobapplication"."created_at",
                 "job_applications_jobapplication"."updated_at",
                 "job_applications_jobapplication"."processed_at",
                 "job_applications_jobapplication"."prehiring_guidance_days",
                 "job_applications_jobapplication"."contract_type",
                 "job_applications_jobapplication"."nb_hours_per_week",
                 "job_applications_jobapplication"."contract_type_details",
                 "job_applications_jobapplication"."qualification_type",
                 "job_applications_jobapplication"."qualification_level",
                 "job_applications_jobapplication"."planned_training_hours",
                 "job_applications_jobapplication"."inverted_vae_contract",
                 "job_applications_jobapplication"."diagoriente_invite_sent_at",
                 COUNT("rdv_insertion_participation"."id") FILTER (
                                                                   WHERE ("rdv_insertion_appointment"."company_id" = ("job_applications_jobapplication"."to_company_id")
                                                                          AND "rdv_insertion_appointment"."start_at" > %s
                                                                          AND "rdv_insertion_participation"."status" = %s)) AS "upcoming_participations_count",
                 "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login",
                 "users_jobseekerprofile"."user_id",
                 "users_jobseekerprofile"."birthdate",
                 "users_jobseekerprofile"."birth_place_id",
                 "users_jobseekerprofile"."birth_country_id",
                 "users_jobseekerprofile"."nir",
                 "users_jobseekerprofile"."lack_of_nir_reason",
                 "users_jobseekerprofile"."pole_emploi_id",
                 "users_jobseekerprofile"."lack_of_pole_emploi_id_reason",
                 "users_jobseekerprofile"."asp_uid",
                 "users_jobseekerprofile"."education_level",
                 "users_jobseekerprofile"."resourceless",
                 "users_jobseekerprofile"."rqth_employee",
                 "users_jobseekerprofile"."oeth_employee",
                 "users_jobseekerprofile"."pole_emploi_since",
                 "users_jobseekerprofile"."unemployed_since",
                 "users_jobseekerprofile"."has_rsa_allocation",
                 "users_jobseekerprofile"."rsa_allocation_since",
                 "users_jobseekerprofile"."ass_allocation_since",
                 "users_jobseekerprofile"."aah_allocation_since",
                 "users_jobseekerprofile"."ata_allocation_since",
                 "users_jobseekerprofile"."hexa_lane_number",
                 "users_jobseekerprofile"."hexa_std_extension",
                 "users_jobseekerprofile"."hexa_non_std_extension",
                 "users_jobseekerprofile"."hexa_lane_type",
                 "users_jobseekerprofile"."hexa_lane_name",
                 "users_jobseekerprofile"."hexa_additional_address",
                 "users_jobseekerprofile"."hexa_post_code",
                 "users_jobseekerprofile"."hexa_commune_id",
                 "users_jobseekerprofile"."pe_obfuscated_nir",
                 "users_jobseekerprofile"."pe_last_certification_attempt_at",
                 "eligibility_eligibilitydiagnosis"."id",
                 "eligibility_eligibilitydiagnosis"."author_id",
                 "eligibility_eligibilitydiagnosis"."author_kind",
                 "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_eligibilitydiagnosis"."created_at",
                 "eligibility_eligibilitydiagnosis"."updated_at",
                 "eligibility_eligibilitydiagnosis"."expires_at",
                 "eligibility_eligibilitydiagnosis"."job_seeker_id",
                 "eligibility_eligibilitydiagnosis"."author_siae_id",
                 T9."id",
                 T9."password",
                 T9."last_login",
                 T9."is_superuser",
                 T9."username",
                 T9."first_name",
                 T9."last_name",
                 T9."is_staff",
                 T9."is_active",
                 T9."date_joined",
                 T9."address_line_1",
                 T9."address_line_2",
                 T9."post_code",
                 T9."city",
                 T9."department",
                 T9."coords",
                 T9."geocoding_score",
                 T9."geocoding_updated_at",
                 T9."ban_api_resolved_address",
                 T9."insee_city_id",
                 T9."title",
                 T9."email",
                 T9."phone",
                 T9."kind",
                 T9."identity_provider",
                 T9."has_completed_welcoming_tour",
                 T9."created_by_id",
                 T9."external_data_source_history",
                 T9."last_checked_at",
                 T9."public_id",
                 T9."address_filled_at",
                 T9."first_login",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."is_authorized",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id",
                 T11."id",
                 T11."password",
                 T11."last_login",
                 T11."is_superuser",
                 T11."username",
                 T11."first_name",
                 T11."last_name",
                 T11."is_staff",
                 T11."is_active",
                 T11."date_joined",
                 T11."address_line_1",
                 T11."address_line_2",
                 T11."post_code",
                 T11."city",
                 T11."department",
                 T11."coords",
                 T11."geocoding_score",
                 T11."geocoding_updated_at",
                 T11."ban_api_resolved_address",
                 T11."insee_city_id",
                 T11."title",
                 T11."email",
                 T11."phone",
                 T11."kind",
                 T11."identity_provider",
                 T11."has_completed_welcoming_tour",
                 T11."created_by_id",
                 T11."external_data_source_history",
                 T11."last_checked_at",
                 T11."public_id",
                 T11."address_filled_at",
                 T11."first_login",
                 T12."user_id",
                 T12."birthdate",
                 T12."birth_place_id",
                 T12."birth_country_id",
                 T12."nir",
                 T12."lack_of_nir_reason",
                 T12."pole_emploi_id",
                 T12."lack_of_pole_emploi_id_reason",
                 T12."asp_uid",
                 T12."education_level",
                 T12."resourceless",
                 T12."rqth_employee",
                 T12."oeth_employee",
                 T12."pole_emploi_since",
                 T12."unemployed_since",
                 T12."has_rsa_allocation",
                 T12."rsa_allocation_since",
                 T12."ass_allocation_since",
                 T12."aah_allocation_since",
                 T12."ata_allocation_since",
                 T12."hexa_lane_number",
                 T12."hexa_std_extension",
                 T12."hexa_non_std_extension",
                 T12."hexa_lane_type",
                 T12."hexa_lane_name",
                 T12."hexa_additional_address",
                 T12."hexa_post_code",
                 T12."hexa_commune_id",
                 T12."pe_obfuscated_nir",
                 T12."pe_last_certification_attempt_at",
                 T13."id",
                 T13."address_line_1",
                 T13."address_line_2",
                 T13."post_code",
                 T13."city",
                 T13."department",
                 T13."coords",
                 T13."geocoding_score",
                 T13."geocoding_updated_at",
                 T13."ban_api_resolved_address",
                 T13."insee_city_id",
                 T13."name",
                 T13."created_at",
                 T13."updated_at",
                 T13."uid",
                 T13."active_members_email_reminder_last_sent_at",
                 T13."automatic_geocoding_update",
                 T13."siret",
                 T13."naf",
                 T13."kind",
                 T13."brand",
                 T13."phone",
                 T13."email",
                 T13."auth_email",
                 T13."website",
                 T13."description",
                 T13."provided_support",
                 T13."source",
                 T13."created_by_id",
                 T13."block_job_applications",
                 T13."job_applications_blocked_at",
                 T13."convention_id",
                 T13."job_app_score",
                 T13."is_searchable",
                 T13."rdv_solidarites_id",
                 T14."id",
                 T14."password",
                 T14."last_login",
                 T14."is_superuser",
                 T14."username",
                 T14."first_name",
                 T14."last_name",
                 T14."is_staff",
                 T14."is_active",
                 T14."date_joined",
                 T14."address_line_1",
                 T14."address_line_2",
                 T14."post_code",
                 T14."city",
                 T14."department",
                 T14."coords",
                 T14."geocoding_score",
                 T14."geocoding_updated_at",
                 T14."ban_api_resolved_address",
                 T14."insee_city_id",
                 T14."title",
                 T14."email",
                 T14."phone",
                 T14."kind",
                 T14."identity_provider",
                 T14."has_completed_welcoming_tour",
                 T14."created_by_id",
                 T14."external_data_source_history",
                 T14."last_checked_at",
                 T14."public_id",
                 T14."address_filled_at",
                 T14."first_login",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id"
          FROM "job_applications_jobapplication"
          INNER JOIN "users_user" ON ("job_applications_jobapplication"."job_seeker_id" = "users_user"."id")
          LEFT OUTER JOIN "rdv_insertion_participation" ON ("users_user"."id" = "rdv_insertion_participation"."job_seeker_id")
          INNER JOIN "companies_company" ON ("job_applications_jobapplication"."to_company_id" = "companies_company"."id")
          LEFT OUTER JOIN "rdv_insertion_appointment" ON ("rdv_insertion_participation"."appointment_id" = "rdv_insertion_appointment"."id")
          LEFT OUTER JOIN "users_jobseekerprofile" ON ("users_user"."id" = "users_jobseekerprofile"."user_id")
          LEFT OUTER JOIN "eligibility_eligibilitydiagnosis" ON ("job_applications_jobapplication"."eligibility_diagnosis_id" = "eligibility_eligibilitydiagnosis"."id")
          LEFT OUTER JOIN "users_user" T9 ON ("eligibility_eligibilitydiagnosis"."author_id" = T9."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          LEFT OUTER JOIN "users_user" T11 ON ("eligibility_eligibilitydiagnosis"."job_seeker_id" = T11."id")
          LEFT OUTER JOIN "users_jobseekerprofile" T12 ON (T11."id" = T12."user_id")
          LEFT OUTER JOIN "companies_company" T13 ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = T13."id")
          LEFT OUTER JOIN "users_user" T14 ON ("job_applications_jobapplication"."sender_id" = T14."id")
          WHERE ("job_applications_jobapplication"."id" = %s
                 AND "job_applications_jobapplication"."job_seeker_id" = %s)
          GROUP BY "job_applications_jobapplication"."id",
                   "users_user"."id",
                   "users_jobseekerprofile"."user_id",
                   "eligibility_eligibilitydiagnosis"."id",
                   T9."id",
                   "prescribers_prescriberorganization"."id",
                   T11."id",
                   T12."user_id",
                   T13."id",
                   T14."id",
                   "companies_company"."id"
          LIMIT 21
        ''',
      }),
      dict({
        'origin': list([
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT ("job_applications_jobapplication_selected_jobs"."jobapplication_id") AS "_prefetch_related_val_jobapplication_id",
                 "companies_jobdescription"."id",
                 "companies_jobdescription"."appellation_id",
                 "companies_jobdescription"."company_id",
                 "companies_jobdescription"."created_at",
                 "companies_jobdescription"."updated_at",
                 "companies_jobdescription"."is_active",
                 "companies_jobdescription"."custom_name",
                 "companies_jobdescription"."description",
                 "companies_jobdescription"."ui_rank",
                 "companies_jobdescription"."contract_type",
                 "companies_jobdescription"."other_contract_type",
                 "companies_jobdescription"."contract_nature",
                 "companies_jobdescription"."location_id",
                 "companies_jobdescription"."hours_per_week",
                 "companies_jobdescription"."open_positions",
                 "companies_jobdescription"."profile_description",
                 "companies_jobdescription"."is_resume_mandatory",
                 "companies_jobdescription"."is_qpv_mandatory",
                 "companies_jobdescription"."market_context_description",
                 "companies_jobdescription"."source_id",
                 "companies_jobdescription"."source_kind",
                 "companies_jobdescription"."source_url",
                 "companies_jobdescription"."field_history",
                 "companies_jobdescription"."creation_source"
          FROM "companies_jobdescription"
          INNER JOIN "job_applications_jobapplication_selected_jobs" ON ("companies_jobdescription"."id" = "job_applications_jobapplication_selected_jobs"."jobdescription_id")
          INNER JOIN "jobs_appellation" ON ("companies_jobdescription"."appellation_id" = "jobs_appellation"."code")
          WHERE "job_applications_jobapplication_selected_jobs"."jobapplication_id" IN (%s)
          ORDER BY "jobs_appellation"."name" ASC,
                   "companies_jobdescription"."ui_rank" ASC
        ''',
      }),
      dict({
        'origin': list([
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_selectedadministrativecriteria"."id",
                 "eligibility_selectedadministrativecriteria"."certified",
                 "eligibility_selectedadministrativecriteria"."certified_at",
                 "eligibility_selectedadministrativecriteria"."certification_period",
                 "eligibility_selectedadministrativecriteria"."data_returned_by_api",
                 "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id",
                 "eligibility_selectedadministrativecriteria"."administrative_criteria_id",
                 "eligibility_selectedadministrativecriteria"."created_at"
          FROM "eligibility_selectedadministrativecriteria"
          WHERE "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id" IN (%s)
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'User.latest_approval[users/models.py]',
          'User.has_valid_approval[users/models.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.has_considered_valid[eligibility/models/iae.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.last_expired[eligibility/models/iae.py]',
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'EligibilityDiagnosisQuerySet.first[<site-packages>/django/db/models/query.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.last_considered_valid[eligibility/models/iae.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.has_considered_valid[eligibility/models/iae.py]',
          'EligibilityDiagnosisManagerFromEligibilityDiagnosisQuerySet.last_expired[eligibility/models/iae.py]',
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_eligibilitydiagnosis"."id",
                 "eligibility_eligibilitydiagnosis"."author_id",
                 "eligibility_eligibilitydiagnosis"."author_kind",
                 "eligibility_eligibilitydiagnosis"."author_prescriber_organization_id",
                 "eligibility_eligibilitydiagnosis"."created_at",
                 "eligibility_eligibilitydiagnosis"."updated_at",
                 "eligibility_eligibilitydiagnosis"."expires_at",
                 "eligibility_eligibilitydiagnosis"."job_seeker_id",
                 "eligibility_eligibilitydiagnosis"."author_siae_id",
                 CASE
                     WHEN "eligibility_eligibilitydiagnosis"."author_kind" = %s THEN %s
                     ELSE %s
                 END AS "from_prescriber",
                 T4."id",
                 T4."password",
                 T4."last_login",
                 T4."is_superuser",
                 T4."username",
                 T4."first_name",
                 T4."last_name",
                 T4."is_staff",
                 T4."is_active",
                 T4."date_joined",
                 T4."address_line_1",
                 T4."address_line_2",
                 T4."post_code",
                 T4."city",
                 T4."department",
                 T4."coords",
                 T4."geocoding_score",
                 T4."geocoding_updated_at",
                 T4."ban_api_resolved_address",
                 T4."insee_city_id",
                 T4."title",
                 T4."email",
                 T4."phone",
                 T4."kind",
                 T4."identity_provider",
                 T4."has_completed_welcoming_tour",
                 T4."created_by_id",
                 T4."external_data_source_history",
                 T4."last_checked_at",
                 T4."public_id",
                 T4."address_filled_at",
                 T4."first_login",
                 "prescribers_prescriberorganization"."id",
                 "prescribers_prescriberorganization"."address_line_1",
                 "prescribers_prescriberorganization"."address_line_2",
                 "prescribers_prescriberorganization"."post_code",
                 "prescribers_prescriberorganization"."city",
                 "prescribers_prescriberorganization"."department",
                 "prescribers_prescriberorganization"."coords",
                 "prescribers_prescriberorganization"."geocoding_score",
                 "prescribers_prescriberorganization"."geocoding_updated_at",
                 "prescribers_prescriberorganization"."ban_api_resolved_address",
                 "prescribers_prescriberorganization"."insee_city_id",
                 "prescribers_prescriberorganization"."name",
                 "prescribers_prescriberorganization"."created_at",
                 "prescribers_prescriberorganization"."updated_at",
                 "prescribers_prescriberorganization"."uid",
                 "prescribers_prescriberorganization"."active_members_email_reminder_last_sent_at",
                 "prescribers_prescriberorganization"."automatic_geocoding_update",
                 "prescribers_prescriberorganization"."siret",
                 "prescribers_prescriberorganization"."is_head_office",
                 "prescribers_prescriberorganization"."kind",
                 "prescribers_prescriberorganization"."is_brsa",
                 "prescribers_prescriberorganization"."phone",
                 "prescribers_prescriberorganization"."email",
                 "prescribers_prescriberorganization"."website",
                 "prescribers_prescriberorganization"."description",
                 "prescribers_prescriberorganization"."is_authorized",
                 "prescribers_prescriberorganization"."code_safir_pole_emploi",
                 "prescribers_prescriberorganization"."created_by_id",
                 "prescribers_prescriberorganization"."authorization_status",
                 "prescribers_prescriberorganization"."authorization_updated_at",
                 "prescribers_prescriberorganization"."authorization_updated_by_id",
                 "companies_company"."id",
                 "companies_company"."address_line_1",
                 "companies_company"."address_line_2",
                 "companies_company"."post_code",
                 "companies_company"."city",
                 "companies_company"."department",
                 "companies_company"."coords",
                 "companies_company"."geocoding_score",
                 "companies_company"."geocoding_updated_at",
                 "companies_company"."ban_api_resolved_address",
                 "companies_company"."insee_city_id",
                 "companies_company"."name",
                 "companies_company"."created_at",
                 "companies_company"."updated_at",
                 "companies_company"."uid",
                 "companies_company"."active_members_email_reminder_last_sent_at",
                 "companies_company"."automatic_geocoding_update",
                 "companies_company"."siret",
                 "companies_company"."naf",
                 "companies_company"."kind",
                 "companies_company"."brand",
                 "companies_company"."phone",
                 "companies_company"."email",
                 "companies_company"."auth_email",
                 "companies_company"."website",
                 "companies_company"."description",
                 "companies_company"."provided_support",
                 "companies_company"."source",
                 "companies_company"."created_by_id",
                 "companies_company"."block_job_applications",
                 "companies_company"."job_applications_blocked_at",
                 "companies_company"."convention_id",
                 "companies_company"."job_app_score",
                 "companies_company"."is_searchable",
                 "companies_company"."rdv_solidarites_id"
          FROM "eligibility_eligibilitydiagnosis"
          LEFT OUTER JOIN "companies_company" ON ("eligibility_eligibilitydiagnosis"."author_siae_id" = "companies_company"."id")
          INNER JOIN "users_user" T4 ON ("eligibility_eligibilitydiagnosis"."author_id" = T4."id")
          LEFT OUTER JOIN "prescribers_prescriberorganization" ON ("eligibility_eligibilitydiagnosis"."author_prescriber_organization_id" = "prescribers_prescriberorganization"."id")
          WHERE (("eligibility_eligibilitydiagnosis"."author_kind" = %s
                  OR "eligibility_eligibilitydiagnosis"."author_siae_id" = %s)
                 AND "eligibility_eligibilitydiagnosis"."job_seeker_id" = %s
                 AND "eligibility_eligibilitydiagnosis"."expires_at" > %s)
          ORDER BY 10 DESC,
                   "eligibility_eligibilitydiagnosis"."created_at" DESC
          LIMIT 1
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[apply/process_details.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details.html]',
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "rdv_insertion_participation"."id",
                 "rdv_insertion_participation"."job_seeker_id",
                 "rdv_insertion_participation"."appointment_id",
                 "rdv_insertion_participation"."status",
                 "rdv_insertion_participation"."rdv_insertion_user_id",
                 "rdv_insertion_participation"."rdv_insertion_id",
                 "rdv_insertion_appointment"."id",
                 "rdv_insertion_appointment"."company_id",
                 "rdv_insertion_appointment"."location_id",
                 "rdv_insertion_appointment"."status",
                 "rdv_insertion_appointment"."reason_category",
                 "rdv_insertion_appointment"."reason",
                 "rdv_insertion_appointment"."is_collective",
                 "rdv_insertion_appointment"."start_at",
                 "rdv_insertion_appointment"."duration",
                 "rdv_insertion_appointment"."canceled_at",
                 "rdv_insertion_appointment"."address",
                 "rdv_insertion_appointment"."total_participants",
                 "rdv_insertion_appointment"."max_participants",
                 "rdv_insertion_appointment"."rdv_insertion_id",
                 "rdv_insertion_location"."id",
                 "rdv_insertion_location"."name",
                 "rdv_insertion_location"."address",
                 "rdv_insertion_location"."phone_number",
                 "rdv_insertion_location"."rdv_solidarites_id"
          FROM "rdv_insertion_participation"
          INNER JOIN "rdv_insertion_appointment" ON ("rdv_insertion_participation"."appointment_id" = "rdv_insertion_appointment"."id")
          LEFT OUTER JOIN "rdv_insertion_location" ON ("rdv_insertion_appointment"."location_id" = "rdv_insertion_location"."id")
          WHERE ("rdv_insertion_participation"."job_seeker_id" = %s
                 AND "rdv_insertion_appointment"."company_id" = %s)
          ORDER BY "rdv_insertion_appointment"."start_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IncludeNode[apply/process_details.html]',
          'IfNode[apply/process_details.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details.html]',
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "eligibility_selectedadministrativecriteria"."id",
                 "eligibility_selectedadministrativecriteria"."certified",
                 "eligibility_selectedadministrativecriteria"."certified_at",
                 "eligibility_selectedadministrativecriteria"."certification_period",
                 "eligibility_selectedadministrativecriteria"."data_returned_by_api",
                 "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id",
                 "eligibility_selectedadministrativecriteria"."administrative_criteria_id",
                 "eligibility_selectedadministrativecriteria"."created_at",
                 ("eligibility_selectedadministrativecriteria"."certification_period" && %s
                  AND "eligibility_selectedadministrativecriteria"."certified") AS "is_considered_certified"
          FROM "eligibility_selectedadministrativecriteria"
          WHERE "eligibility_selectedadministrativecriteria"."eligibility_diagnosis_id" = %s
          ORDER BY RANDOM() ASC
        ''',
      }),
      dict({
        'origin': list([
          'User.latest_approval[users/models.py]',
          'User.has_valid_approval[users/models.py]',
          'EligibilityDiagnosis.considered_to_expire_at[eligibility/models/iae.py]',
          'VariableNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IfNode[apply/includes/eligibility_diagnosis.html]',
          'IncludeNode[apply/process_details.html]',
          'IfNode[apply/process_details.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details.html]',
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "approvals_approval"."id",
                 "approvals_approval"."start_at",
                 "approvals_approval"."end_at",
                 "approvals_approval"."created_at",
                 "approvals_approval"."number",
                 "approvals_approval"."pe_notification_status",
                 "approvals_approval"."pe_notification_time",
                 "approvals_approval"."pe_notification_endpoint",
                 "approvals_approval"."pe_notification_exit_code",
                 "approvals_approval"."user_id",
                 "approvals_approval"."created_by_id",
                 "approvals_approval"."origin",
                 "approvals_approval"."eligibility_diagnosis_id",
                 "approvals_approval"."updated_at",
                 "approvals_approval"."origin_siae_siret",
                 "approvals_approval"."origin_siae_kind",
                 "approvals_approval"."origin_sender_kind",
                 "approvals_approval"."origin_prescriber_organization_kind"
          FROM "approvals_approval"
          WHERE "approvals_approval"."user_id" = %s
          ORDER BY "approvals_approval"."created_at" DESC
        ''',
      }),
      dict({
        'origin': list([
          'ForNode[apply/includes/transition_logs.html]',
          'WithNode[apply/includes/transition_logs.html]',
          'IncludeNode[apply/process_details.html]',
          'BlockNode[layout/base.html]',
          'ExtendsNode[apply/process_base.html]',
          'ExtendsNode[apply/process_details.html]',
          'details_for_jobseeker[www/apply/views/process_views.py]',
        ]),
        'sql': '''
          SELECT "job_applications_jobapplicationtransitionlog"."id",
                 "job_applications_jobapplicationtransitionlog"."transition",
                 "job_applications_jobapplicationtransitionlog"."from_state",
                 "job_applications_jobapplicationtransitionlog"."to_state",
                 "job_applications_jobapplicationtransitionlog"."timestamp",
                 "job_applications_jobapplicationtransitionlog"."job_application_id",
                 "job_applications_jobapplicationtransitionlog"."user_id",
                 "job_applications_jobapplicationtransitionlog"."target_company_id",
                 "users_user"."id",
                 "users_user"."password",
                 "users_user"."last_login",
                 "users_user"."is_superuser",
                 "users_user"."username",
                 "users_user"."first_name",
                 "users_user"."last_name",
                 "users_user"."is_staff",
                 "users_user"."is_active",
                 "users_user"."date_joined",
                 "users_user"."address_line_1",
                 "users_user"."address_line_2",
                 "users_user"."post_code",
                 "users_user"."city",
                 "users_user"."department",
                 "users_user"."coords",
                 "users_user"."geocoding_score",
                 "users_user"."geocoding_updated_at",
                 "users_user"."ban_api_resolved_address",
                 "users_user"."insee_city_id",
                 "users_user"."title",
                 "users_user"."email",
                 "users_user"."phone",
                 "users_user"."kind",
                 "users_user"."identity_provider",
                 "users_user"."has_completed_welcoming_tour",
                 "users_user"."created_by_id",
                 "users_user"."external_data_source_history",
                 "users_user"."last_checked_at",
                 "users_user"."public_id",
                 "users_user"."address_filled_at",
                 "users_user"."first_login"
          FROM "job_applications_jobapplicationtransitionlog"
          LEFT OUTER JOIN "users_user" ON ("job_applications_jobapplicationtransitionlog"."user_id" = "users_user"."id")
          WHERE "job_applications_jobapplicationtransitionlog"."job_application_id" = %s
          ORDER BY "job_applications_jobapplicationtransitionlog"."timestamp" DESC
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Atomic.__enter__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'SAVEPOINT "<snapshot>"',
      }),
      dict({
        'origin': list([
          'Session.save[<site-packages>/django/db/models/base.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': '''
          UPDATE "django_session"
          SET "session_data" = %s,
              "expire_date" = %s
          WHERE "django_session"."session_key" = %s
        ''',
      }),
      dict({
        'origin': list([
          'Atomic.__exit__[<site-packages>/django/db/transaction.py]',
          'SessionStore.save[<site-packages>/django/contrib/sessions/backends/db.py]',
        ]),
        'sql': 'RELEASE SAVEPOINT "<snapshot>"',
      }),
    ]),
  })
# ---
# name: TestProcessViews.test_details_for_job_seeker_with_transition_logs
  '''
  <ul class="list-step" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:38:00+00:00">Le 12 décembre 2023 à 13:38</time>
                  <span>
                      
                          Passé en "Candidature acceptée"
                      
                      par John DOE
                  </span>
              </li>
          
              <li>
                  <time datetime="2023-12-12T12:37:00+00:00">Le 12 décembre 2023 à 13:37</time>
                  <span>
                      
                          Passé en "Candidature à l'étude"
                      
                      par John DOE
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:00+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: TestProcessViews.test_details_for_prescriber_with_transition_logs
  '''
  <ul class="list-step" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:38:00+00:00">Le 12 décembre 2023 à 13:38</time>
                  <span>
                      
                          Passé en "Candidature acceptée"
                      
                      par John DOE
                  </span>
              </li>
          
              <li>
                  <time datetime="2023-12-12T12:37:00+00:00">Le 12 décembre 2023 à 13:37</time>
                  <span>
                      
                          Passé en "Candidature à l'étude"
                      
                      par John DOE
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:00+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: TestProcessViews.test_external_transfer_log_display
  '''
  <ul class="list-step" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:38:00+00:00">Le 12 décembre 2023 à 13:38</time>
                  <span>
                      
                          Candidature transférée à un autre employeur
                      
                      par John DOE
                  </span>
              </li>
          
              <li>
                  <time datetime="2023-12-12T12:37:00+00:00">Le 12 décembre 2023 à 13:37</time>
                  <span>
                      
                          Passé en "Candidature déclinée"
                      
                      par John DOE
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:00+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: TestProcessViews.test_postpone_from_employer_orienter[postpone_email_to_job_seeker_body]
  '''
  Bonjour,
  
  Suite à votre candidature au sein de la structure EI Acme inc., l’employeur a mis votre candidature en attente.
  
  Commentaire de l’employeur:
  
  On vous rappellera.
  
  ---
  [DEV] Cet email est envoyé depuis un environnement de démonstration, merci de ne pas en tenir compte [DEV]
  Les emplois de l'inclusion
  http://localhost:8000
  '''
# ---
# name: TestProcessViews.test_postpone_from_employer_orienter[postpone_email_to_job_seeker_subject]
  '[DEV] Votre candidature mise en attente par EI Acme inc.'
# ---
# name: TestProcessViews.test_postpone_from_employer_orienter[postpone_email_to_proxy_body]
  '''
  Bonjour,
  
  La candidature de Jane DOE au sein de la structure EI Acme inc. a été mise en attente par l’employeur.
  
  Commentaire de l’employeur:
  
  On vous rappellera.
  
  ---
  [DEV] Cet email est envoyé depuis un environnement de démonstration, merci de ne pas en tenir compte [DEV]
  Les emplois de l'inclusion
  http://localhost:8000
  '''
# ---
# name: TestProcessViews.test_postpone_from_employer_orienter[postpone_email_to_proxy_subject]
  '[DEV] Candidature de Jane DOE mise en attente par EI Acme inc.'
# ---
# name: TestProcessViews.test_postpone_from_job_seeker[postpone_email_to_job_seeker_body]
  '''
  Bonjour,
  
  Suite à votre candidature au sein de la structure EI Acme inc., l’employeur a mis votre candidature en attente.
  
  Commentaire de l’employeur:
  
  On vous rappellera.
  
  ---
  [DEV] Cet email est envoyé depuis un environnement de démonstration, merci de ne pas en tenir compte [DEV]
  Les emplois de l'inclusion
  http://localhost:8000
  '''
# ---
# name: TestProcessViews.test_postpone_from_job_seeker[postpone_email_to_job_seeker_subject]
  '[DEV] Votre candidature mise en attente par EI Acme inc.'
# ---
# name: TestProcessViews.test_postpone_from_prescriber[postpone_email_to_job_seeker_body]
  '''
  Bonjour,
  
  Suite à votre candidature au sein de la structure EI Acme inc., l’employeur a mis votre candidature en attente.
  
  ---
  [DEV] Cet email est envoyé depuis un environnement de démonstration, merci de ne pas en tenir compte [DEV]
  Les emplois de l'inclusion
  http://localhost:8000
  '''
# ---
# name: TestProcessViews.test_postpone_from_prescriber[postpone_email_to_job_seeker_subject]
  '[DEV] Votre candidature mise en attente par EI Acme inc.'
# ---
# name: TestProcessViews.test_postpone_from_prescriber[postpone_email_to_proxy_body]
  '''
  Bonjour,
  
  La candidature de Jane DOE au sein de la structure EI Acme inc. a été mise en attente par l’employeur.
  
  ---
  [DEV] Cet email est envoyé depuis un environnement de démonstration, merci de ne pas en tenir compte [DEV]
  Les emplois de l'inclusion
  http://localhost:8000
  '''
# ---
# name: TestProcessViews.test_postpone_from_prescriber[postpone_email_to_proxy_subject]
  '[DEV] Candidature de Jane DOE mise en attente par EI Acme inc.'
# ---
# name: test_add_prior_action_processing
  '''
  <ul class="list-step" hx-swap-oob="true" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:37:00+00:00">Le 12 décembre 2023 à 13:37</time>
                  <span>
                      
                          Passé en "Action préalable à l’embauche"
                      
                      par John DOE
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:11+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: test_approval_status_includes[Approval prolongations list]
  '''
  <div class="ps-3 border-start approval-left-border" id="prolongations-list">
                  
                      <p class="mb-1">Prolongation en cours :</p>
                      <ul class="list-unstyled">
      
          <li>
              du 19/04/2023 au 29/04/2023
              <small class="ms-3">Fin d'une formation</small>
              
          </li>
      
  </ul>
  
                  
                  
                      <p class="mb-1">
                          Prolongations passées ou à venir :
                      </p>
                      <ul class="list-unstyled">
      
          <li>
              du 09/05/2023 au 14/05/2023
              <small class="ms-3">Fin d'une formation</small>
              
          </li>
      
          <li>
              du 27/03/2023 au 06/04/2023
              <small class="ms-3">Fin d'une formation</small>
              
          </li>
      
          <li>
              du 25/02/2023 au 07/03/2023
              <small class="ms-3">Fin d'une formation</small>
              
          </li>
      
  </ul>
  
                  
                  
                      <p class="mb-1">Demande de prolongation en cours :</p>
                      <ul class="list-unstyled">
                          
                              <li>
                                  du 26/04/2023 au 26/05/2023
                                  <small class="ms-3">Fin d'une formation</small>
                                  <small class="d-block mb-2">
                                      
                                          Demandée le 26/04/2023 par <i>Milady DE WINTER</i> à <i>First LAST</i> (Organization - 72)
                                      
                                  </small>
                              </li>
                          
                      </ul>
                  
              </div>
  '''
# ---
# name: test_approval_status_includes[Approval suspensions list]
  '''
  <div class="ps-3 border-start approval-left-border" id="suspensions-list">
                  
                      <p class="mb-1">Suspension en cours :</p>
                      <ul class="list-unstyled">
                          <li>
                              <b>du 19/04/2023 au 29/04/2023</b>
                              
                                  <!-- djlint:off --><!-- djlint:on -->
                                  
                                      <br/>
                                      <a class="btn btn-link ps-0" href="/approvals/suspension/1/action/edit/?back_url=/apply/[PK of JobApplication]/siae/details">Modifier la suspension</a>
                                      <a class="btn btn-link" href="/approvals/suspension/1/action/?back_url=/apply/[PK of JobApplication]/siae/details">Supprimer la suspension</a>
                                  
                              
                          </li>
                      </ul>
                  
                  
                      <p class="mb-1">Suspension passée :</p>
                      <ul class="list-unstyled">
                          
                              <li>
                                  <span>du 27/03/2023 au 06/04/2023</span>
                              </li>
                          
                      </ul>
                  
              </div>
  '''
# ---
# name: test_delete_prior_action[False]
  '''
  <ul class="list-step" hx-swap-oob="true" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:40:00+00:00">Le 12 décembre 2023 à 13:40</time>
                  <span>
                      
                          Passé en "Action préalable à l’embauche"
                      
                      par John DOE
                  </span>
              </li>
          
              <li>
                  <time datetime="2023-12-12T12:37:00+00:00">Le 12 décembre 2023 à 13:37</time>
                  <span>
                      
                          Passé en "Candidature à l'étude"
                      
                      par John DOE
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:11+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: test_delete_prior_action[True]
  '''
  <ul class="list-step" hx-swap-oob="true" id="transition_logs_11111111-1111-1111-1111-111111111111">
      
          
              <li>
                  <time datetime="2023-12-12T12:40:00+00:00">Le 12 décembre 2023 à 13:40</time>
                  <span>
                      
                          Passé en "Action préalable à l’embauche"
                      
                      par John DOE
                  </span>
              </li>
          
              <li>
                  <time datetime="2023-12-12T12:37:00+00:00">Le 12 décembre 2023 à 13:37</time>
                  <span>
                      
                          Passé en "Candidature à l'étude"
                      
                      par John DOE
                  </span>
              </li>
          
          <li>
              <time datetime="2023-12-10T10:11:11+00:00">Le 10 décembre 2023 à 11:11</time>
              <span>Nouvelle candidature</span>
          </li>
      
  </ul>
  '''
# ---
# name: test_reload_contract_type_and_options[APPRENTICESHIP]
  '''
  
  <div id="geiq_contract_type_and_options_block">
      <div class="form-group is-invalid form-group-required"><label class="form-label" for="id_prehiring_guidance_days">Nombre de jours d’accompagnement avant contrat</label><input type="number" name="prehiring_guidance_days" min="0" class="form-control is-invalid" placeholder="Nombre de jours d’accompagnement avant contrat" required aria-invalid="true" aria-describedby="id_prehiring_guidance_days_helptext" id="id_prehiring_guidance_days">
      <div class="invalid-feedback">Ce champ est obligatoire.</div>
  
  <div class="form-text">Laissez "0" si vous n'avez pas accompagné le candidat avant son embauche</div>
  </div>
      <div class="form-group form-group-required"><label class="form-label" for="id_contract_type">Type de contrat</label><select name="contract_type" hx-trigger="change" hx-post="/apply/10/accept/reload_contract_type_and_options" hx-swap="outerHTML" hx-select="#geiq_contract_type_and_options_block" hx-target="#geiq_contract_type_and_options_block" class="form-select" required id="id_contract_type">
    <option value="">---------</option>
  
    <option value="APPRENTICESHIP" selected>Contrat d&#x27;apprentissage</option>
  
    <option value="PROFESSIONAL_TRAINING">Contrat de professionalisation</option>
  
    <option value="OTHER">Autre type de contrat</option>
  
  </select></div>
      <div class="form-group"><div class="form-check"><input type="checkbox" name="inverted_vae_contract" class="form-check-input" disabled id="id_inverted_vae_contract"><label class="form-check-label" for="id_inverted_vae_contract">Contrat associé à une VAE inversée</label></div></div>
      
      <div class="form-group form-group-required"><label class="form-label" for="id_nb_hours_per_week">Nombre d&#x27;heures par semaine</label><input type="number" name="nb_hours_per_week" min="0" class="form-control" placeholder="Nombre d&#x27;heures par semaine" required id="id_nb_hours_per_week"></div>
  </div>
  
  '''
# ---
# name: test_reload_contract_type_and_options[OTHER]
  '''
  
  <div id="geiq_contract_type_and_options_block">
      <div class="form-group is-invalid form-group-required"><label class="form-label" for="id_prehiring_guidance_days">Nombre de jours d’accompagnement avant contrat</label><input type="number" name="prehiring_guidance_days" min="0" class="form-control is-invalid" placeholder="Nombre de jours d’accompagnement avant contrat" required aria-invalid="true" aria-describedby="id_prehiring_guidance_days_helptext" id="id_prehiring_guidance_days">
      <div class="invalid-feedback">Ce champ est obligatoire.</div>
  
  <div class="form-text">Laissez "0" si vous n'avez pas accompagné le candidat avant son embauche</div>
  </div>
      <div class="form-group form-group-required"><label class="form-label" for="id_contract_type">Type de contrat</label><select name="contract_type" hx-trigger="change" hx-post="/apply/10/accept/reload_contract_type_and_options" hx-swap="outerHTML" hx-select="#geiq_contract_type_and_options_block" hx-target="#geiq_contract_type_and_options_block" class="form-select" required id="id_contract_type">
    <option value="">---------</option>
  
    <option value="APPRENTICESHIP">Contrat d&#x27;apprentissage</option>
  
    <option value="PROFESSIONAL_TRAINING">Contrat de professionalisation</option>
  
    <option value="OTHER" selected>Autre type de contrat</option>
  
  </select></div>
      <div class="form-group"><div class="form-check"><input type="checkbox" name="inverted_vae_contract" class="form-check-input" disabled id="id_inverted_vae_contract"><label class="form-check-label" for="id_inverted_vae_contract">Contrat associé à une VAE inversée</label></div></div>
      
          <div id="contractTypeDetails"><div class="form-group"><label class="form-label" for="id_contract_type_details">Précisions sur le type de contrat</label><textarea name="contract_type_details" cols="40" rows="2" class="form-control" placeholder="Précisions sur le type de contrat" aria-describedby="id_contract_type_details_helptext" id="id_contract_type_details">
  </textarea><div class="form-text">Si vous avez choisi un autre type de contrat, merci de bien vouloir fournir plus de précisions</div>
  </div></div>
      
      <div class="form-group form-group-required"><label class="form-label" for="id_nb_hours_per_week">Nombre d&#x27;heures par semaine</label><input type="number" name="nb_hours_per_week" min="0" class="form-control" placeholder="Nombre d&#x27;heures par semaine" required id="id_nb_hours_per_week"></div>
  </div>
  
  '''
# ---
# name: test_reload_contract_type_and_options[PROFESSIONAL_TRAINING]
  '''
  
  <div id="geiq_contract_type_and_options_block">
      <div class="form-group is-invalid form-group-required"><label class="form-label" for="id_prehiring_guidance_days">Nombre de jours d’accompagnement avant contrat</label><input type="number" name="prehiring_guidance_days" min="0" class="form-control is-invalid" placeholder="Nombre de jours d’accompagnement avant contrat" required aria-invalid="true" aria-describedby="id_prehiring_guidance_days_helptext" id="id_prehiring_guidance_days">
      <div class="invalid-feedback">Ce champ est obligatoire.</div>
  
  <div class="form-text">Laissez "0" si vous n'avez pas accompagné le candidat avant son embauche</div>
  </div>
      <div class="form-group form-group-required"><label class="form-label" for="id_contract_type">Type de contrat</label><select name="contract_type" hx-trigger="change" hx-post="/apply/10/accept/reload_contract_type_and_options" hx-swap="outerHTML" hx-select="#geiq_contract_type_and_options_block" hx-target="#geiq_contract_type_and_options_block" class="form-select" required id="id_contract_type">
    <option value="">---------</option>
  
    <option value="APPRENTICESHIP">Contrat d&#x27;apprentissage</option>
  
    <option value="PROFESSIONAL_TRAINING" selected>Contrat de professionalisation</option>
  
    <option value="OTHER">Autre type de contrat</option>
  
  </select></div>
      <div class="form-group"><div class="form-check"><input type="checkbox" name="inverted_vae_contract" class="form-check-input" id="id_inverted_vae_contract"><label class="form-check-label" for="id_inverted_vae_contract">Contrat associé à une VAE inversée</label></div></div>
      
      <div class="form-group form-group-required"><label class="form-label" for="id_nb_hours_per_week">Nombre d&#x27;heures par semaine</label><input type="number" name="nb_hours_per_week" min="0" class="form-control" placeholder="Nombre d&#x27;heures par semaine" required id="id_nb_hours_per_week"></div>
  </div>
  
  '''
# ---
# name: test_reload_qualification_fields[CCN]
  '''
  
  <div id="geiq_qualification_fields_block">
      <div class="form-group form-group-required"><label class="form-label" for="id_qualification_type">Type de qualification visé</label><select name="qualification_type" hx-trigger="change" hx-post="/apply/10/accept/reload_qualification_fields" hx-swap="outerHTML" hx-select="#geiq_qualification_fields_block" hx-target="#geiq_qualification_fields_block" class="form-select" required id="id_qualification_type">
    <option value="">---------</option>
  
    <option value="STATE_DIPLOMA">Diplôme d&#x27;état ou titre homologué</option>
  
    <option value="CQP">CQP</option>
  
    <option value="CCN" selected>Positionnement de CCN</option>
  
  </select></div>
      <div class="form-group form-group-required"><label class="form-label" for="id_qualification_level">Niveau de qualification</label><select name="qualification_level" class="form-select" required id="id_qualification_level">
    <option value="" selected>---------</option>
  
    <option value="LEVEL_3">Niveau 3 (CAP, BEP)</option>
  
    <option value="LEVEL_4">Niveau 4 (BP, Bac général, Techno ou Pro, BT)</option>
  
    <option value="LEVEL_5">Niveau 5 ou + (Bac+2 ou +)</option>
  
    <option value="NOT_RELEVANT">Non concerné</option>
  
  </select></div>
      <div class="form-group form-group-required"><label class="form-label" for="id_planned_training_hours">Nombre d&#x27;heures de formation prévues</label><input type="number" name="planned_training_hours" value="0" min="0" class="form-control" placeholder="Nombre d&#x27;heures de formation prévues" required id="id_planned_training_hours"></div>
  </div>
  
  '''
# ---
# name: test_reload_qualification_fields[CQP]
  '''
  
  <div id="geiq_qualification_fields_block">
      <div class="form-group form-group-required"><label class="form-label" for="id_qualification_type">Type de qualification visé</label><select name="qualification_type" hx-trigger="change" hx-post="/apply/10/accept/reload_qualification_fields" hx-swap="outerHTML" hx-select="#geiq_qualification_fields_block" hx-target="#geiq_qualification_fields_block" class="form-select" required id="id_qualification_type">
    <option value="">---------</option>
  
    <option value="STATE_DIPLOMA">Diplôme d&#x27;état ou titre homologué</option>
  
    <option value="CQP" selected>CQP</option>
  
    <option value="CCN">Positionnement de CCN</option>
  
  </select></div>
      <div class="form-group form-group-required"><label class="form-label" for="id_qualification_level">Niveau de qualification</label><select name="qualification_level" class="form-select" required id="id_qualification_level">
    <option value="" selected>---------</option>
  
    <option value="LEVEL_3">Niveau 3 (CAP, BEP)</option>
  
    <option value="LEVEL_4">Niveau 4 (BP, Bac général, Techno ou Pro, BT)</option>
  
    <option value="LEVEL_5">Niveau 5 ou + (Bac+2 ou +)</option>
  
    <option value="NOT_RELEVANT">Non concerné</option>
  
  </select></div>
      <div class="form-group form-group-required"><label class="form-label" for="id_planned_training_hours">Nombre d&#x27;heures de formation prévues</label><input type="number" name="planned_training_hours" value="0" min="0" class="form-control" placeholder="Nombre d&#x27;heures de formation prévues" required id="id_planned_training_hours"></div>
  </div>
  
  '''
# ---
# name: test_reload_qualification_fields[STATE_DIPLOMA]
  '''
  
  <div id="geiq_qualification_fields_block">
      <div class="form-group form-group-required"><label class="form-label" for="id_qualification_type">Type de qualification visé</label><select name="qualification_type" hx-trigger="change" hx-post="/apply/10/accept/reload_qualification_fields" hx-swap="outerHTML" hx-select="#geiq_qualification_fields_block" hx-target="#geiq_qualification_fields_block" class="form-select" required id="id_qualification_type">
    <option value="">---------</option>
  
    <option value="STATE_DIPLOMA" selected>Diplôme d&#x27;état ou titre homologué</option>
  
    <option value="CQP">CQP</option>
  
    <option value="CCN">Positionnement de CCN</option>
  
  </select></div>
      <div class="form-group form-group-required"><label class="form-label" for="id_qualification_level">Niveau de qualification</label><select name="qualification_level" class="form-select" required id="id_qualification_level">
    <option value="" selected>---------</option>
  
    <option value="LEVEL_3">Niveau 3 (CAP, BEP)</option>
  
    <option value="LEVEL_4">Niveau 4 (BP, Bac général, Techno ou Pro, BT)</option>
  
    <option value="LEVEL_5">Niveau 5 ou + (Bac+2 ou +)</option>
  
  </select></div>
      <div class="form-group form-group-required"><label class="form-label" for="id_planned_training_hours">Nombre d&#x27;heures de formation prévues</label><input type="number" name="planned_training_hours" value="0" min="0" class="form-control" placeholder="Nombre d&#x27;heures de formation prévues" required id="id_planned_training_hours"></div>
  </div>
  
  '''
# ---
